
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb4  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbec  0800bbec  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbf4  0800bbf4  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf4  0800bbf4  0000cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf8  0800bbf8  0000cbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bbfc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  20000088  0800bc84  0000d088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  0800bc84  0000d498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016daf  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344c  00000000  00000000  00023e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  000272b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133f  00000000  00000000  00028b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bcd4  00000000  00000000  00029e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1c3  00000000  00000000  00055b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ed2c  00000000  00000000  00071d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007848  00000000  00000000  00180aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001882e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac20 	.word	0x0800ac20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ac20 	.word	0x0800ac20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b2f      	cmp	r3, #47	@ 0x2f
 800057e:	d906      	bls.n	800058e <Hex2Num+0x1e>
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b39      	cmp	r3, #57	@ 0x39
 8000584:	d803      	bhi.n	800058e <Hex2Num+0x1e>
        return a - '0';
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	3b30      	subs	r3, #48	@ 0x30
 800058a:	b2db      	uxtb	r3, r3
 800058c:	e014      	b.n	80005b8 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b60      	cmp	r3, #96	@ 0x60
 8000592:	d906      	bls.n	80005a2 <Hex2Num+0x32>
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b66      	cmp	r3, #102	@ 0x66
 8000598:	d803      	bhi.n	80005a2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	3b57      	subs	r3, #87	@ 0x57
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	e00a      	b.n	80005b8 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b40      	cmp	r3, #64	@ 0x40
 80005a6:	d906      	bls.n	80005b6 <Hex2Num+0x46>
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b46      	cmp	r3, #70	@ 0x46
 80005ac:	d803      	bhi.n	80005b6 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b37      	subs	r3, #55	@ 0x37
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	e000      	b.n	80005b8 <Hex2Num+0x48>
    }

    return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80005d6:	e012      	b.n	80005fe <ParseHexNumber+0x3a>
        sum <<= 4;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ffc4 	bl	8000570 <Hex2Num>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
        ptr++;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
        i++;
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	3301      	adds	r3, #1
 80005fc:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b2f      	cmp	r3, #47	@ 0x2f
 8000604:	d903      	bls.n	800060e <ParseHexNumber+0x4a>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b39      	cmp	r3, #57	@ 0x39
 800060c:	d9e4      	bls.n	80005d8 <ParseHexNumber+0x14>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b60      	cmp	r3, #96	@ 0x60
 8000614:	d903      	bls.n	800061e <ParseHexNumber+0x5a>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b66      	cmp	r3, #102	@ 0x66
 800061c:	d9dc      	bls.n	80005d8 <ParseHexNumber+0x14>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b40      	cmp	r3, #64	@ 0x40
 8000624:	d903      	bls.n	800062e <ParseHexNumber+0x6a>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b46      	cmp	r3, #70	@ 0x46
 800062c:	d9d4      	bls.n	80005d8 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <ParseHexNumber+0x76>
        *cnt = i;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	7afa      	ldrb	r2, [r7, #11]
 8000638:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	2300      	movs	r3, #0
 8000654:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000660:	d119      	bne.n	8000696 <ParseNumber+0x52>
        minus = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
        i++;
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	3301      	adds	r3, #1
 8000670:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000672:	e010      	b.n	8000696 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3b30      	subs	r3, #48	@ 0x30
 8000686:	4413      	add	r3, r2
 8000688:	60bb      	str	r3, [r7, #8]
        ptr++;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
        i++;
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	3301      	adds	r3, #1
 8000694:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b2f      	cmp	r3, #47	@ 0x2f
 800069c:	d903      	bls.n	80006a6 <ParseNumber+0x62>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b39      	cmp	r3, #57	@ 0x39
 80006a4:	d9e6      	bls.n	8000674 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <ParseNumber+0x6e>
        *cnt = i;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	7bba      	ldrb	r2, [r7, #14]
 80006b0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <ParseNumber+0x7a>
        return 0 - sum;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	425b      	negs	r3, r3
 80006bc:	e000      	b.n	80006c0 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80006be:	68bb      	ldr	r3, [r7, #8]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80006da:	e019      	b.n	8000710 <ParseMAC+0x44>
    hexcnt = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80006e6:	d00e      	beq.n	8000706 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80006e8:	f107 030e 	add.w	r3, r7, #14
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff ff68 	bl	80005c4 <ParseHexNumber>
 80006f4:	4601      	mov	r1, r0
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	73fa      	strb	r2, [r7, #15]
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	4413      	add	r3, r2
 8000702:	b2ca      	uxtb	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1e1      	bne.n	80006dc <ParseMAC+0x10>
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000730:	e019      	b.n	8000766 <ParseIP+0x44>
    hexcnt = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b2e      	cmp	r3, #46	@ 0x2e
 800073c:	d00e      	beq.n	800075c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800073e:	f107 030e 	add.w	r3, r7, #14
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff7d 	bl	8000644 <ParseNumber>
 800074a:	4601      	mov	r1, r0
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	73fa      	strb	r2, [r7, #15]
 8000752:	461a      	mov	r2, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	b2ca      	uxtb	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1e1      	bne.n	8000732 <ParseIP+0x10>
  }
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3302      	adds	r3, #2
 800078a:	4934      	ldr	r1, [pc, #208]	@ (800085c <AT_ParseInfo+0xe4>)
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fda5 	bl	80092dc <strtok>
 8000792:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000794:	e05a      	b.n	800084c <AT_ParseInfo+0xd4>
    switch (num++) {
 8000796:	7afb      	ldrb	r3, [r7, #11]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	72fa      	strb	r2, [r7, #11]
 800079c:	2b06      	cmp	r3, #6
 800079e:	d84f      	bhi.n	8000840 <AT_ParseInfo+0xc8>
 80007a0:	a201      	add	r2, pc, #4	@ (adr r2, 80007a8 <AT_ParseInfo+0x30>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007c5 	.word	0x080007c5
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007e3 	.word	0x080007e3
 80007b4:	080007f3 	.word	0x080007f3
 80007b8:	08000803 	.word	0x08000803
 80007bc:	08000813 	.word	0x08000813
 80007c0:	08000827 	.word	0x08000827
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2220      	movs	r2, #32
 80007c8:	68f9      	ldr	r1, [r7, #12]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 fd73 	bl	80092b6 <strncpy>
      break;
 80007d0:	e037      	b.n	8000842 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3320      	adds	r3, #32
 80007d6:	2218      	movs	r2, #24
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4618      	mov	r0, r3
 80007dc:	f008 fd6b 	bl	80092b6 <strncpy>
      break;
 80007e0:	e02f      	b.n	8000842 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3338      	adds	r3, #56	@ 0x38
 80007e6:	2210      	movs	r2, #16
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f008 fd63 	bl	80092b6 <strncpy>
      break;
 80007f0:	e027      	b.n	8000842 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3348      	adds	r3, #72	@ 0x48
 80007f6:	2210      	movs	r2, #16
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 fd5b 	bl	80092b6 <strncpy>
      break;
 8000800:	e01f      	b.n	8000842 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3358      	adds	r3, #88	@ 0x58
 8000806:	2210      	movs	r2, #16
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	4618      	mov	r0, r3
 800080c:	f008 fd53 	bl	80092b6 <strncpy>
      break;
 8000810:	e017      	b.n	8000842 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000812:	2100      	movs	r1, #0
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ff15 	bl	8000644 <ParseNumber>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8000824:	e00d      	b.n	8000842 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8000826:	490e      	ldr	r1, [pc, #56]	@ (8000860 <AT_ParseInfo+0xe8>)
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f008 fd57 	bl	80092dc <strtok>
 800082e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3368      	adds	r3, #104	@ 0x68
 8000834:	2220      	movs	r2, #32
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	4618      	mov	r0, r3
 800083a:	f008 fd3c 	bl	80092b6 <strncpy>
      break;
 800083e:	e000      	b.n	8000842 <AT_ParseInfo+0xca>

    default: break;
 8000840:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000842:	4906      	ldr	r1, [pc, #24]	@ (800085c <AT_ParseInfo+0xe4>)
 8000844:	2000      	movs	r0, #0
 8000846:	f008 fd49 	bl	80092dc <strtok>
 800084a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1a1      	bne.n	8000796 <AT_ParseInfo+0x1e>
  }
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	0800ac68 	.word	0x0800ac68
 8000860:	0800ac6c 	.word	0x0800ac6c

08000864 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3302      	adds	r3, #2
 8000876:	4952      	ldr	r1, [pc, #328]	@ (80009c0 <AT_ParseConnSettings+0x15c>)
 8000878:	4618      	mov	r0, r3
 800087a:	f008 fd2f 	bl	80092dc <strtok>
 800087e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8000880:	e095      	b.n	80009ae <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	73fa      	strb	r2, [r7, #15]
 8000888:	2b0b      	cmp	r3, #11
 800088a:	d87f      	bhi.n	800098c <AT_ParseConnSettings+0x128>
 800088c:	a201      	add	r2, pc, #4	@ (adr r2, 8000894 <AT_ParseConnSettings+0x30>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008c5 	.word	0x080008c5
 8000898:	080008d3 	.word	0x080008d3
 800089c:	080008e3 	.word	0x080008e3
 80008a0:	080008f7 	.word	0x080008f7
 80008a4:	0800090b 	.word	0x0800090b
 80008a8:	0800091f 	.word	0x0800091f
 80008ac:	0800092d 	.word	0x0800092d
 80008b0:	0800093b 	.word	0x0800093b
 80008b4:	08000949 	.word	0x08000949
 80008b8:	08000957 	.word	0x08000957
 80008bc:	08000965 	.word	0x08000965
 80008c0:	08000979 	.word	0x08000979
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2221      	movs	r2, #33	@ 0x21
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fcf3 	bl	80092b6 <strncpy>
      break;
 80008d0:	e05d      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3321      	adds	r3, #33	@ 0x21
 80008d6:	2221      	movs	r2, #33	@ 0x21
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f008 fceb 	bl	80092b6 <strncpy>
      break;
 80008e0:	e055      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80008e2:	2100      	movs	r1, #0
 80008e4:	68b8      	ldr	r0, [r7, #8]
 80008e6:	f7ff fead 	bl	8000644 <ParseNumber>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 80008f4:	e04b      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80008f6:	2100      	movs	r1, #0
 80008f8:	68b8      	ldr	r0, [r7, #8]
 80008fa:	f7ff fea3 	bl	8000644 <ParseNumber>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8000908:	e041      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800090a:	2100      	movs	r1, #0
 800090c:	68b8      	ldr	r0, [r7, #8]
 800090e:	f7ff fe99 	bl	8000644 <ParseNumber>
 8000912:	4603      	mov	r3, r0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 800091c:	e037      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3348      	adds	r3, #72	@ 0x48
 8000922:	4619      	mov	r1, r3
 8000924:	68b8      	ldr	r0, [r7, #8]
 8000926:	f7ff fefc 	bl	8000722 <ParseIP>
      break;
 800092a:	e030      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	334c      	adds	r3, #76	@ 0x4c
 8000930:	4619      	mov	r1, r3
 8000932:	68b8      	ldr	r0, [r7, #8]
 8000934:	f7ff fef5 	bl	8000722 <ParseIP>
      break;
 8000938:	e029      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3350      	adds	r3, #80	@ 0x50
 800093e:	4619      	mov	r1, r3
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f7ff feee 	bl	8000722 <ParseIP>
      break;
 8000946:	e022      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	3354      	adds	r3, #84	@ 0x54
 800094c:	4619      	mov	r1, r3
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f7ff fee7 	bl	8000722 <ParseIP>
      break;
 8000954:	e01b      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3358      	adds	r3, #88	@ 0x58
 800095a:	4619      	mov	r1, r3
 800095c:	68b8      	ldr	r0, [r7, #8]
 800095e:	f7ff fee0 	bl	8000722 <ParseIP>
      break;
 8000962:	e014      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000964:	2100      	movs	r1, #0
 8000966:	68b8      	ldr	r0, [r7, #8]
 8000968:	f7ff fe6c 	bl	8000644 <ParseNumber>
 800096c:	4603      	mov	r3, r0
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8000976:	e00a      	b.n	800098e <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000978:	2100      	movs	r1, #0
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f7ff fe62 	bl	8000644 <ParseNumber>
 8000980:	4603      	mov	r3, r0
 8000982:	b2da      	uxtb	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 800098a:	e000      	b.n	800098e <AT_ParseConnSettings+0x12a>

    default:
      break;
 800098c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800098e:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <AT_ParseConnSettings+0x15c>)
 8000990:	2000      	movs	r0, #0
 8000992:	f008 fca3 	bl	80092dc <strtok>
 8000996:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <AT_ParseConnSettings+0x14a>
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80009a6:	d102      	bne.n	80009ae <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3301      	adds	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f af66 	bne.w	8000882 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	0800ac68 	.word	0x0800ac68

080009c4 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3302      	adds	r3, #2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b31      	cmp	r3, #49	@ 0x31
 80009d6:	bf0c      	ite	eq
 80009d8:	2301      	moveq	r3, #1
 80009da:	2300      	movne	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	701a      	strb	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8000a0a:	68b8      	ldr	r0, [r7, #8]
 8000a0c:	f7ff fbe0 	bl	80001d0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b299      	uxth	r1, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	47a0      	blx	r4
 8000a20:	4603      	mov	r3, r0
 8000a22:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	dd3e      	ble.n	8000aa8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8000a36:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	4798      	blx	r3
 8000a3e:	4603      	mov	r3, r0
 8000a40:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000a42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	dd27      	ble.n	8000a9a <AT_ExecuteCommand+0xaa>
 8000a4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a4e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a52:	dc22      	bgt.n	8000a9a <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000a54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a58:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a5c:	d105      	bne.n	8000a6a <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000a5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8000a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000a76:	490f      	ldr	r1, [pc, #60]	@ (8000ab4 <AT_ExecuteCommand+0xc4>)
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f008 fc8b 	bl	8009394 <strstr>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e010      	b.n	8000aaa <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000a88:	490b      	ldr	r1, [pc, #44]	@ (8000ab8 <AT_ExecuteCommand+0xc8>)
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f008 fc82 	bl	8009394 <strstr>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000a96:	2305      	movs	r3, #5
 8000a98:	e007      	b.n	8000aaa <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000a9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a9e:	f113 0f04 	cmn.w	r3, #4
 8000aa2:	d101      	bne.n	8000aa8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	e000      	b.n	8000aaa <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000aa8:	2304      	movs	r3, #4
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	0800ac7c 	.word	0x0800ac7c
 8000ab8:	0800ac88 	.word	0x0800ac88

08000abc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8000ad6:	68b8      	ldr	r0, [r7, #8]
 8000ad8:	f7ff fb7a 	bl	80001d0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000ae0:	8a7b      	ldrh	r3, [r7, #18]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <AT_RequestSendData+0x32>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e053      	b.n	8000b96 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8000afa:	8a79      	ldrh	r1, [r7, #18]
 8000afc:	68b8      	ldr	r0, [r7, #8]
 8000afe:	4798      	blx	r3
 8000b00:	4603      	mov	r3, r0
 8000b02:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8000b04:	8a3a      	ldrh	r2, [r7, #16]
 8000b06:	8a7b      	ldrh	r3, [r7, #18]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d143      	bne.n	8000b94 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8000b18:	8879      	ldrh	r1, [r7, #2]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4798      	blx	r3
 8000b1e:	4603      	mov	r3, r0
 8000b20:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8000b22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d131      	bne.n	8000b90 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8000b38:	2100      	movs	r1, #0
 8000b3a:	6a38      	ldr	r0, [r7, #32]
 8000b3c:	4798      	blx	r3
 8000b3e:	4603      	mov	r3, r0
 8000b40:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8000b42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	dd19      	ble.n	8000b7e <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8000b4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b4e:	6a3a      	ldr	r2, [r7, #32]
 8000b50:	4413      	add	r3, r2
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000b56:	4912      	ldr	r1, [pc, #72]	@ (8000ba0 <AT_RequestSendData+0xe4>)
 8000b58:	6a38      	ldr	r0, [r7, #32]
 8000b5a:	f008 fc1b 	bl	8009394 <strstr>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e016      	b.n	8000b96 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000b68:	490e      	ldr	r1, [pc, #56]	@ (8000ba4 <AT_RequestSendData+0xe8>)
 8000b6a:	6a38      	ldr	r0, [r7, #32]
 8000b6c:	f008 fc12 	bl	8009394 <strstr>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000b76:	2305      	movs	r3, #5
 8000b78:	e00d      	b.n	8000b96 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e00b      	b.n	8000b96 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000b7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b82:	f113 0f04 	cmn.w	r3, #4
 8000b86:	d101      	bne.n	8000b8c <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000b88:	2306      	movs	r3, #6
 8000b8a:	e004      	b.n	8000b96 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000b90:	2302      	movs	r3, #2
 8000b92:	e000      	b.n	8000b96 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000b94:	2304      	movs	r3, #4
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	0800ac7c 	.word	0x0800ac7c
 8000ba4:	0800ac88 	.word	0x0800ac88

08000ba8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000bbc:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8000bc4:	68b8      	ldr	r0, [r7, #8]
 8000bc6:	f7ff fb03 	bl	80001d0 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	47a0      	blx	r4
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd6f      	ble.n	8000cc0 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8000bec:	2100      	movs	r1, #0
 8000bee:	6938      	ldr	r0, [r7, #16]
 8000bf0:	4798      	blx	r3
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b0d      	cmp	r3, #13
 8000bfc:	d104      	bne.n	8000c08 <AT_RequestReceiveData+0x60>
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	3301      	adds	r3, #1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b0a      	cmp	r3, #10
 8000c06:	d001      	beq.n	8000c0c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e05a      	b.n	8000cc2 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3b02      	subs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
    p+=2;
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3302      	adds	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d94a      	bls.n	8000cb4 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8000c1e:	e002      	b.n	8000c26 <AT_RequestReceiveData+0x7e>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <AT_RequestReceiveData+0x92>
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4413      	add	r3, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b15      	cmp	r3, #21
 8000c38:	d0f2      	beq.n	8000c20 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3b08      	subs	r3, #8
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	491f      	ldr	r1, [pc, #124]	@ (8000ccc <AT_RequestReceiveData+0x124>)
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fba0 	bl	8009394 <strstr>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d016      	beq.n	8000c88 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c64:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d202      	bcs.n	8000c76 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8000c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8000c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	6939      	ldr	r1, [r7, #16]
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f008 fc11 	bl	80094a6 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	e01c      	b.n	8000cc2 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2204      	movs	r2, #4
 8000c92:	490f      	ldr	r1, [pc, #60]	@ (8000cd0 <AT_RequestReceiveData+0x128>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f008 fad5 	bl	8009244 <memcmp>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8000ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e00b      	b.n	8000cc2 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8000caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cac:	2200      	movs	r2, #0
 8000cae:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e006      	b.n	8000cc2 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f113 0f04 	cmn.w	r3, #4
 8000cba:	d101      	bne.n	8000cc0 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	e000      	b.n	8000cc2 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000cc0:	2304      	movs	r3, #4
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800ac7c 	.word	0x0800ac7c
 8000cd0:	0800ac90 	.word	0x0800ac90

08000cd4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000ce6:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	4798      	blx	r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d113      	bne.n	8000d22 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000d00:	461a      	mov	r2, r3
 8000d02:	490a      	ldr	r1, [pc, #40]	@ (8000d2c <ES_WIFI_Init+0x58>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fe73 	bl	80009f0 <AT_ExecuteCommand>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d106      	bne.n	8000d22 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fd2b 	bl	8000778 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800ac98 	.word	0x0800ac98

08000d30 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00b      	beq.n	8000d5c <ES_WIFI_RegisterBusIO+0x2c>
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <ES_WIFI_RegisterBusIO+0x2c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <ES_WIFI_RegisterBusIO+0x2c>
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <ES_WIFI_RegisterBusIO+0x2c>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e014      	b.n	8000d8a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	4932      	ldr	r1, [pc, #200]	@ (8000e78 <ES_WIFI_Connect+0xe0>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 f923 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fe13 	bl	80009f0 <AT_ExecuteCommand>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14b      	bne.n	8000e6c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4927      	ldr	r1, [pc, #156]	@ (8000e7c <ES_WIFI_Connect+0xe4>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 f90c 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000df0:	461a      	mov	r2, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff fdfc 	bl	80009f0 <AT_ExecuteCommand>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d134      	bne.n	8000e6c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	491b      	ldr	r1, [pc, #108]	@ (8000e80 <ES_WIFI_Connect+0xe8>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f008 f8f1 	bl	8008ffc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000e26:	461a      	mov	r2, r3
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fde1 	bl	80009f0 <AT_ExecuteCommand>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d119      	bne.n	8000e6c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000e3e:	4911      	ldr	r1, [pc, #68]	@ (8000e84 <ES_WIFI_Connect+0xec>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f008 f8db 	bl	8008ffc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000e52:	461a      	mov	r2, r3
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fdcb 	bl	80009f0 <AT_ExecuteCommand>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d103      	bne.n	8000e6c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800acb0 	.word	0x0800acb0
 8000e7c:	0800acb8 	.word	0x0800acb8
 8000e80:	0800acc0 	.word	0x0800acc0
 8000e84:	0800acc8 	.word	0x0800acc8

08000e88 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000e96:	4911      	ldr	r1, [pc, #68]	@ (8000edc <ES_WIFI_IsConnected+0x54>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f008 f8af 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fd9f 	bl	80009f0 <AT_ExecuteCommand>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	33d2      	adds	r3, #210	@ 0xd2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff fd7b 	bl	80009c4 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	0800accc 	.word	0x0800accc

08000ee0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000eee:	4910      	ldr	r1, [pc, #64]	@ (8000f30 <ES_WIFI_GetNetworkSettings+0x50>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 f883 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000f02:	461a      	mov	r2, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fd73 	bl	80009f0 <AT_ExecuteCommand>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d108      	bne.n	8000f26 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	338d      	adds	r3, #141	@ 0x8d
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f7ff fc9f 	bl	8000864 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800acd4 	.word	0x0800acd4

08000f34 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000f44:	4912      	ldr	r1, [pc, #72]	@ (8000f90 <ES_WIFI_GetMACAddress+0x5c>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f008 f858 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000f58:	461a      	mov	r2, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fd48 	bl	80009f0 <AT_ExecuteCommand>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000f70:	3302      	adds	r3, #2
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <ES_WIFI_GetMACAddress+0x60>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 f9b1 	bl	80092dc <strtok>
 8000f7a:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f7ff fba4 	bl	80006cc <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800ad24 	.word	0x0800ad24
 8000f94:	0800ad28 	.word	0x0800ad28

08000f98 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4949      	ldr	r1, [pc, #292]	@ (80010d8 <ES_WIFI_StartServerSingleConn+0x140>)
 8000fb4:	f008 f822 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fd12 	bl	80009f0 <AT_ExecuteCommand>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	e079      	b.n	80010ce <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d016      	beq.n	8001010 <ES_WIFI_StartServerSingleConn+0x78>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d012      	beq.n	8001010 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000ff0:	493a      	ldr	r1, [pc, #232]	@ (80010dc <ES_WIFI_StartServerSingleConn+0x144>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 f802 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001004:	461a      	mov	r2, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fcf2 	bl	80009f0 <AT_ExecuteCommand>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d15a      	bne.n	80010cc <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	492f      	ldr	r1, [pc, #188]	@ (80010e0 <ES_WIFI_StartServerSingleConn+0x148>)
 8001024:	f007 ffea 	bl	8008ffc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001034:	461a      	mov	r2, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fcda 	bl	80009f0 <AT_ExecuteCommand>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d142      	bne.n	80010cc <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	7c1b      	ldrb	r3, [r3, #16]
 8001050:	461a      	mov	r2, r3
 8001052:	4924      	ldr	r1, [pc, #144]	@ (80010e4 <ES_WIFI_StartServerSingleConn+0x14c>)
 8001054:	f007 ffd2 	bl	8008ffc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001064:	461a      	mov	r2, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fcc2 	bl	80009f0 <AT_ExecuteCommand>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d12a      	bne.n	80010cc <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	461a      	mov	r2, r3
 8001082:	4919      	ldr	r1, [pc, #100]	@ (80010e8 <ES_WIFI_StartServerSingleConn+0x150>)
 8001084:	f007 ffba 	bl	8008ffc <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001094:	461a      	mov	r2, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fcaa 	bl	80009f0 <AT_ExecuteCommand>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d112      	bne.n	80010cc <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80010ac:	490f      	ldr	r1, [pc, #60]	@ (80010ec <ES_WIFI_StartServerSingleConn+0x154>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 ffa4 	bl	8008ffc <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80010c0:	461a      	mov	r2, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fc94 	bl	80009f0 <AT_ExecuteCommand>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800ad8c 	.word	0x0800ad8c
 80010dc:	0800add4 	.word	0x0800add4
 80010e0:	0800ad94 	.word	0x0800ad94
 80010e4:	0800ade0 	.word	0x0800ade0
 80010e8:	0800ad9c 	.word	0x0800ad9c
 80010ec:	0800ade8 	.word	0x0800ade8

080010f0 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 8001102:	f002 fd4f 	bl	8003ba4 <HAL_GetTick>
 8001106:	6278      	str	r0, [r7, #36]	@ 0x24
  tlast=tstart+timeout;
 8001108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	429a      	cmp	r2, r3
 8001116:	d201      	bcs.n	800111c <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001122:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 f89b 	bl	8009264 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001134:	4972      	ldr	r1, [pc, #456]	@ (8001300 <ES_WIFI_WaitServerConnection+0x210>)
 8001136:	4618      	mov	r0, r3
 8001138:	f007 ff60 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001148:	461a      	mov	r2, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fc50 	bl	80009f0 <AT_ExecuteCommand>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8001156:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800115a:	2b00      	cmp	r3, #0
 800115c:	d136      	bne.n	80011cc <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001164:	4967      	ldr	r1, [pc, #412]	@ (8001304 <ES_WIFI_WaitServerConnection+0x214>)
 8001166:	4618      	mov	r0, r3
 8001168:	f008 f914 	bl	8009394 <strstr>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d03b      	beq.n	80011ea <ES_WIFI_WaitServerConnection+0xfa>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001178:	4963      	ldr	r1, [pc, #396]	@ (8001308 <ES_WIFI_WaitServerConnection+0x218>)
 800117a:	4618      	mov	r0, r3
 800117c:	f008 f90a 	bl	8009394 <strstr>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d031      	beq.n	80011ea <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800118c:	495f      	ldr	r1, [pc, #380]	@ (800130c <ES_WIFI_WaitServerConnection+0x21c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f008 f900 	bl	8009394 <strstr>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d127      	bne.n	80011ea <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011a0:	495b      	ldr	r1, [pc, #364]	@ (8001310 <ES_WIFI_WaitServerConnection+0x220>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 f8f6 	bl	8009394 <strstr>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11d      	bne.n	80011ea <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 80011ae:	f240 724c 	movw	r2, #1868	@ 0x74c
 80011b2:	4958      	ldr	r1, [pc, #352]	@ (8001314 <ES_WIFI_WaitServerConnection+0x224>)
 80011b4:	4858      	ldr	r0, [pc, #352]	@ (8001318 <ES_WIFI_WaitServerConnection+0x228>)
 80011b6:	f007 feb1 	bl	8008f1c <iprintf>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011c0:	4619      	mov	r1, r3
 80011c2:	4856      	ldr	r0, [pc, #344]	@ (800131c <ES_WIFI_WaitServerConnection+0x22c>)
 80011c4:	f007 feaa 	bl	8008f1c <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e095      	b.n	80012f8 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 80011cc:	f240 7254 	movw	r2, #1876	@ 0x754
 80011d0:	4950      	ldr	r1, [pc, #320]	@ (8001314 <ES_WIFI_WaitServerConnection+0x224>)
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <ES_WIFI_WaitServerConnection+0x228>)
 80011d4:	f007 fea2 	bl	8008f1c <iprintf>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011de:	4619      	mov	r1, r3
 80011e0:	484f      	ldr	r0, [pc, #316]	@ (8001320 <ES_WIFI_WaitServerConnection+0x230>)
 80011e2:	f007 fe9b 	bl	8008f1c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80011e6:	2302      	movs	r3, #2
 80011e8:	e086      	b.n	80012f8 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80011f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f008 f834 	bl	8009264 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001202:	4948      	ldr	r1, [pc, #288]	@ (8001324 <ES_WIFI_WaitServerConnection+0x234>)
 8001204:	4618      	mov	r0, r3
 8001206:	f007 fef9 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001216:	461a      	mov	r2, r3
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fbe9 	bl	80009f0 <AT_ExecuteCommand>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8001224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001228:	2b00      	cmp	r3, #0
 800122a:	d13f      	bne.n	80012ac <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001232:	220c      	movs	r2, #12
 8001234:	493c      	ldr	r1, [pc, #240]	@ (8001328 <ES_WIFI_WaitServerConnection+0x238>)
 8001236:	4618      	mov	r0, r3
 8001238:	f008 f82b 	bl	8009292 <strncmp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d043      	beq.n	80012ca <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001248:	3302      	adds	r3, #2
 800124a:	4938      	ldr	r1, [pc, #224]	@ (800132c <ES_WIFI_WaitServerConnection+0x23c>)
 800124c:	4618      	mov	r0, r3
 800124e:	f008 f845 	bl	80092dc <strtok>
 8001252:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 8001254:	4935      	ldr	r1, [pc, #212]	@ (800132c <ES_WIFI_WaitServerConnection+0x23c>)
 8001256:	2000      	movs	r0, #0
 8001258:	f008 f840 	bl	80092dc <strtok>
 800125c:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3306      	adds	r3, #6
 8001262:	4619      	mov	r1, r3
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff fa5c 	bl	8000722 <ParseIP>
        ptr = strtok(0, ","); //port
 800126a:	4930      	ldr	r1, [pc, #192]	@ (800132c <ES_WIFI_WaitServerConnection+0x23c>)
 800126c:	2000      	movs	r0, #0
 800126e:	f008 f835 	bl	80092dc <strtok>
 8001272:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8001274:	2100      	movs	r1, #0
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff f9e4 	bl	8000644 <ParseNumber>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 8001284:	4929      	ldr	r1, [pc, #164]	@ (800132c <ES_WIFI_WaitServerConnection+0x23c>)
 8001286:	2000      	movs	r0, #0
 8001288:	f008 f828 	bl	80092dc <strtok>
 800128c:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 800128e:	4927      	ldr	r1, [pc, #156]	@ (800132c <ES_WIFI_WaitServerConnection+0x23c>)
 8001290:	2000      	movs	r0, #0
 8001292:	f008 f823 	bl	80092dc <strtok>
 8001296:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8001298:	2100      	movs	r1, #0
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff f9d2 	bl	8000644 <ParseNumber>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e025      	b.n	80012f8 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 80012ac:	f240 726f 	movw	r2, #1903	@ 0x76f
 80012b0:	4918      	ldr	r1, [pc, #96]	@ (8001314 <ES_WIFI_WaitServerConnection+0x224>)
 80012b2:	4819      	ldr	r0, [pc, #100]	@ (8001318 <ES_WIFI_WaitServerConnection+0x228>)
 80012b4:	f007 fe32 	bl	8008f1c <iprintf>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80012be:	4619      	mov	r1, r3
 80012c0:	481b      	ldr	r0, [pc, #108]	@ (8001330 <ES_WIFI_WaitServerConnection+0x240>)
 80012c2:	f007 fe2b 	bl	8008f1c <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80012c6:	2302      	movs	r3, #2
 80012c8:	e016      	b.n	80012f8 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80012d0:	2064      	movs	r0, #100	@ 0x64
 80012d2:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 80012d4:	f002 fc66 	bl	8003ba4 <HAL_GetTick>
 80012d8:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f43f af1d 	beq.w	800111c <ES_WIFI_WaitServerConnection+0x2c>
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	f4ff af18 	bcc.w	800111c <ES_WIFI_WaitServerConnection+0x2c>
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f4ff af13 	bcc.w	800111c <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3728      	adds	r7, #40	@ 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800aca8 	.word	0x0800aca8
 8001304:	0800adf0 	.word	0x0800adf0
 8001308:	0800adf8 	.word	0x0800adf8
 800130c:	0800ae00 	.word	0x0800ae00
 8001310:	0800ae0c 	.word	0x0800ae0c
 8001314:	0800ae1c 	.word	0x0800ae1c
 8001318:	0800ae34 	.word	0x0800ae34
 800131c:	0800ae3c 	.word	0x0800ae3c
 8001320:	0800ae54 	.word	0x0800ae54
 8001324:	0800ae6c 	.word	0x0800ae6c
 8001328:	0800ae70 	.word	0x0800ae70
 800132c:	0800ac68 	.word	0x0800ac68
 8001330:	0800ae80 	.word	0x0800ae80

08001334 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4925      	ldr	r1, [pc, #148]	@ (80013dc <ES_WIFI_CloseServerConnection+0xa8>)
 8001348:	4618      	mov	r0, r3
 800134a:	f007 fe57 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800135a:	461a      	mov	r2, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fb47 	bl	80009f0 <AT_ExecuteCommand>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00e      	beq.n	800138a <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 800136c:	f240 728b 	movw	r2, #1931	@ 0x78b
 8001370:	491b      	ldr	r1, [pc, #108]	@ (80013e0 <ES_WIFI_CloseServerConnection+0xac>)
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <ES_WIFI_CloseServerConnection+0xb0>)
 8001374:	f007 fdd2 	bl	8008f1c <iprintf>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800137e:	4619      	mov	r1, r3
 8001380:	4819      	ldr	r0, [pc, #100]	@ (80013e8 <ES_WIFI_CloseServerConnection+0xb4>)
 8001382:	f007 fdcb 	bl	8008f1c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	e023      	b.n	80013d2 <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001390:	4916      	ldr	r1, [pc, #88]	@ (80013ec <ES_WIFI_CloseServerConnection+0xb8>)
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fe32 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80013a4:	461a      	mov	r2, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb22 	bl	80009f0 <AT_ExecuteCommand>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 80013b6:	f240 7294 	movw	r2, #1940	@ 0x794
 80013ba:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <ES_WIFI_CloseServerConnection+0xac>)
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <ES_WIFI_CloseServerConnection+0xb0>)
 80013be:	f007 fdad 	bl	8008f1c <iprintf>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80013c8:	4619      	mov	r1, r3
 80013ca:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <ES_WIFI_CloseServerConnection+0xbc>)
 80013cc:	f007 fda6 	bl	8008f1c <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800ad8c 	.word	0x0800ad8c
 80013e0:	0800ae1c 	.word	0x0800ae1c
 80013e4:	0800ae34 	.word	0x0800ae34
 80013e8:	0800ae98 	.word	0x0800ae98
 80013ec:	0800aeb4 	.word	0x0800aeb4
 80013f0:	0800aebc 	.word	0x0800aebc

080013f4 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4926      	ldr	r1, [pc, #152]	@ (80014a0 <ES_WIFI_StopServerSingleConn+0xac>)
 8001408:	4618      	mov	r0, r3
 800140a:	f007 fdf7 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800141a:	461a      	mov	r2, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fae7 	bl	80009f0 <AT_ExecuteCommand>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00e      	beq.n	800144a <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 800142c:	f240 72aa 	movw	r2, #1962	@ 0x7aa
 8001430:	491c      	ldr	r1, [pc, #112]	@ (80014a4 <ES_WIFI_StopServerSingleConn+0xb0>)
 8001432:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001434:	f007 fd72 	bl	8008f1c <iprintf>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800143e:	4619      	mov	r1, r3
 8001440:	481a      	ldr	r0, [pc, #104]	@ (80014ac <ES_WIFI_StopServerSingleConn+0xb8>)
 8001442:	f007 fd6b 	bl	8008f1c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	e025      	b.n	8001496 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001450:	4917      	ldr	r1, [pc, #92]	@ (80014b0 <ES_WIFI_StopServerSingleConn+0xbc>)
 8001452:	4618      	mov	r0, r3
 8001454:	f007 fdd2 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001464:	461a      	mov	r2, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fac2 	bl	80009f0 <AT_ExecuteCommand>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8001476:	f240 72b3 	movw	r2, #1971	@ 0x7b3
 800147a:	490a      	ldr	r1, [pc, #40]	@ (80014a4 <ES_WIFI_StopServerSingleConn+0xb0>)
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <ES_WIFI_StopServerSingleConn+0xb4>)
 800147e:	f007 fd4d 	bl	8008f1c <iprintf>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001488:	4619      	mov	r1, r3
 800148a:	480a      	ldr	r0, [pc, #40]	@ (80014b4 <ES_WIFI_StopServerSingleConn+0xc0>)
 800148c:	f007 fd46 	bl	8008f1c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	e000      	b.n	8001496 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  UNLOCK_WIFI();
  return ret;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800ad8c 	.word	0x0800ad8c
 80014a4:	0800ae1c 	.word	0x0800ae1c
 80014a8:	0800ae34 	.word	0x0800ae34
 80014ac:	0800aed4 	.word	0x0800aed4
 80014b0:	0800aef4 	.word	0x0800aef4
 80014b4:	0800aefc 	.word	0x0800aefc

080014b8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	72fb      	strb	r3, [r7, #11]
 80014c8:	4613      	mov	r3, r2
 80014ca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80014cc:	2302      	movs	r3, #2
 80014ce:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e001      	b.n	80014e0 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80014e0:	893b      	ldrh	r3, [r7, #8]
 80014e2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80014e6:	d302      	bcc.n	80014ee <ES_WIFI_SendData+0x36>
 80014e8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80014ec:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	893a      	ldrh	r2, [r7, #8]
 80014f2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80014fa:	7afa      	ldrb	r2, [r7, #11]
 80014fc:	4942      	ldr	r1, [pc, #264]	@ (8001608 <ES_WIFI_SendData+0x150>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 fd7c 	bl	8008ffc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001510:	461a      	mov	r2, r3
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff fa6c 	bl	80009f0 <AT_ExecuteCommand>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d15e      	bne.n	80015e0 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4938      	ldr	r1, [pc, #224]	@ (800160c <ES_WIFI_SendData+0x154>)
 800152c:	4618      	mov	r0, r3
 800152e:	f007 fd65 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800153e:	461a      	mov	r2, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fa55 	bl	80009f0 <AT_ExecuteCommand>
 8001546:	4603      	mov	r3, r0
 8001548:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800154a:	7cfb      	ldrb	r3, [r7, #19]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d13d      	bne.n	80015cc <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001556:	893a      	ldrh	r2, [r7, #8]
 8001558:	492d      	ldr	r1, [pc, #180]	@ (8001610 <ES_WIFI_SendData+0x158>)
 800155a:	4618      	mov	r0, r3
 800155c:	f007 fd4e 	bl	8008ffc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800156c:	893a      	ldrh	r2, [r7, #8]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff faa1 	bl	8000abc <AT_RequestSendData>
 800157a:	4603      	mov	r3, r0
 800157c:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800157e:	7cfb      	ldrb	r3, [r7, #19]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d119      	bne.n	80015b8 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800158a:	4922      	ldr	r1, [pc, #136]	@ (8001614 <ES_WIFI_SendData+0x15c>)
 800158c:	4618      	mov	r0, r3
 800158e:	f007 ff01 	bl	8009394 <strstr>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d02c      	beq.n	80015f2 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001598:	f640 0267 	movw	r2, #2151	@ 0x867
 800159c:	491e      	ldr	r1, [pc, #120]	@ (8001618 <ES_WIFI_SendData+0x160>)
 800159e:	481f      	ldr	r0, [pc, #124]	@ (800161c <ES_WIFI_SendData+0x164>)
 80015a0:	f007 fcbc 	bl	8008f1c <iprintf>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80015aa:	4619      	mov	r1, r3
 80015ac:	481c      	ldr	r0, [pc, #112]	@ (8001620 <ES_WIFI_SendData+0x168>)
 80015ae:	f007 fcb5 	bl	8008f1c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80015b2:	2302      	movs	r3, #2
 80015b4:	74fb      	strb	r3, [r7, #19]
 80015b6:	e01c      	b.n	80015f2 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80015b8:	f640 026d 	movw	r2, #2157	@ 0x86d
 80015bc:	4916      	ldr	r1, [pc, #88]	@ (8001618 <ES_WIFI_SendData+0x160>)
 80015be:	4817      	ldr	r0, [pc, #92]	@ (800161c <ES_WIFI_SendData+0x164>)
 80015c0:	f007 fcac 	bl	8008f1c <iprintf>
 80015c4:	4817      	ldr	r0, [pc, #92]	@ (8001624 <ES_WIFI_SendData+0x16c>)
 80015c6:	f007 fd11 	bl	8008fec <puts>
 80015ca:	e012      	b.n	80015f2 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80015cc:	f640 0272 	movw	r2, #2162	@ 0x872
 80015d0:	4911      	ldr	r1, [pc, #68]	@ (8001618 <ES_WIFI_SendData+0x160>)
 80015d2:	4812      	ldr	r0, [pc, #72]	@ (800161c <ES_WIFI_SendData+0x164>)
 80015d4:	f007 fca2 	bl	8008f1c <iprintf>
 80015d8:	4813      	ldr	r0, [pc, #76]	@ (8001628 <ES_WIFI_SendData+0x170>)
 80015da:	f007 fd07 	bl	8008fec <puts>
 80015de:	e008      	b.n	80015f2 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80015e0:	f640 0277 	movw	r2, #2167	@ 0x877
 80015e4:	490c      	ldr	r1, [pc, #48]	@ (8001618 <ES_WIFI_SendData+0x160>)
 80015e6:	480d      	ldr	r0, [pc, #52]	@ (800161c <ES_WIFI_SendData+0x164>)
 80015e8:	f007 fc98 	bl	8008f1c <iprintf>
 80015ec:	480f      	ldr	r0, [pc, #60]	@ (800162c <ES_WIFI_SendData+0x174>)
 80015ee:	f007 fcfd 	bl	8008fec <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d102      	bne.n	80015fe <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800ad8c 	.word	0x0800ad8c
 800160c:	0800af40 	.word	0x0800af40
 8001610:	0800af48 	.word	0x0800af48
 8001614:	0800af54 	.word	0x0800af54
 8001618:	0800ae1c 	.word	0x0800ae1c
 800161c:	0800ae34 	.word	0x0800ae34
 8001620:	0800af5c 	.word	0x0800af5c
 8001624:	0800af78 	.word	0x0800af78
 8001628:	0800af94 	.word	0x0800af94
 800162c:	0800afa8 	.word	0x0800afa8

08001630 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	72fb      	strb	r3, [r7, #11]
 8001640:	4613      	mov	r3, r2
 8001642:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001644:	2302      	movs	r3, #2
 8001646:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800164e:	2301      	movs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e001      	b.n	8001658 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001658:	893b      	ldrh	r3, [r7, #8]
 800165a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800165e:	f200 808b 	bhi.w	8001778 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001668:	7afa      	ldrb	r2, [r7, #11]
 800166a:	4946      	ldr	r1, [pc, #280]	@ (8001784 <ES_WIFI_ReceiveData+0x154>)
 800166c:	4618      	mov	r0, r3
 800166e:	f007 fcc5 	bl	8008ffc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800167e:	461a      	mov	r2, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff f9b5 	bl	80009f0 <AT_ExecuteCommand>
 8001686:	4603      	mov	r3, r0
 8001688:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d165      	bne.n	800175c <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001696:	893a      	ldrh	r2, [r7, #8]
 8001698:	493b      	ldr	r1, [pc, #236]	@ (8001788 <ES_WIFI_ReceiveData+0x158>)
 800169a:	4618      	mov	r0, r3
 800169c:	f007 fcae 	bl	8008ffc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016ac:	461a      	mov	r2, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff f99e 	bl	80009f0 <AT_ExecuteCommand>
 80016b4:	4603      	mov	r3, r0
 80016b6:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d141      	bne.n	8001742 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4931      	ldr	r1, [pc, #196]	@ (800178c <ES_WIFI_ReceiveData+0x15c>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 fc97 	bl	8008ffc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016da:	461a      	mov	r2, r3
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff f987 	bl	80009f0 <AT_ExecuteCommand>
 80016e2:	4603      	mov	r3, r0
 80016e4:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d120      	bne.n	800172e <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016f2:	4927      	ldr	r1, [pc, #156]	@ (8001790 <ES_WIFI_ReceiveData+0x160>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 fc81 	bl	8008ffc <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001700:	893a      	ldrh	r2, [r7, #8]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fa4c 	bl	8000ba8 <AT_RequestReceiveData>
 8001710:	4603      	mov	r3, r0
 8001712:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001714:	7cfb      	ldrb	r3, [r7, #19]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02e      	beq.n	8001778 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800171a:	f640 1208 	movw	r2, #2312	@ 0x908
 800171e:	491d      	ldr	r1, [pc, #116]	@ (8001794 <ES_WIFI_ReceiveData+0x164>)
 8001720:	481d      	ldr	r0, [pc, #116]	@ (8001798 <ES_WIFI_ReceiveData+0x168>)
 8001722:	f007 fbfb 	bl	8008f1c <iprintf>
 8001726:	481d      	ldr	r0, [pc, #116]	@ (800179c <ES_WIFI_ReceiveData+0x16c>)
 8001728:	f007 fc60 	bl	8008fec <puts>
 800172c:	e024      	b.n	8001778 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800172e:	f640 120d 	movw	r2, #2317	@ 0x90d
 8001732:	4918      	ldr	r1, [pc, #96]	@ (8001794 <ES_WIFI_ReceiveData+0x164>)
 8001734:	4818      	ldr	r0, [pc, #96]	@ (8001798 <ES_WIFI_ReceiveData+0x168>)
 8001736:	f007 fbf1 	bl	8008f1c <iprintf>
 800173a:	4819      	ldr	r0, [pc, #100]	@ (80017a0 <ES_WIFI_ReceiveData+0x170>)
 800173c:	f007 fc56 	bl	8008fec <puts>
 8001740:	e01a      	b.n	8001778 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8001742:	f640 1212 	movw	r2, #2322	@ 0x912
 8001746:	4913      	ldr	r1, [pc, #76]	@ (8001794 <ES_WIFI_ReceiveData+0x164>)
 8001748:	4813      	ldr	r0, [pc, #76]	@ (8001798 <ES_WIFI_ReceiveData+0x168>)
 800174a:	f007 fbe7 	bl	8008f1c <iprintf>
 800174e:	4815      	ldr	r0, [pc, #84]	@ (80017a4 <ES_WIFI_ReceiveData+0x174>)
 8001750:	f007 fc4c 	bl	8008fec <puts>
        *Receivedlen = 0;
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	e00d      	b.n	8001778 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800175c:	f640 1218 	movw	r2, #2328	@ 0x918
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <ES_WIFI_ReceiveData+0x164>)
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <ES_WIFI_ReceiveData+0x168>)
 8001764:	f007 fbda 	bl	8008f1c <iprintf>
 8001768:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <ES_WIFI_ReceiveData+0x178>)
 800176a:	f007 fc3f 	bl	8008fec <puts>
      issue15++;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <ES_WIFI_ReceiveData+0x17c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <ES_WIFI_ReceiveData+0x17c>)
 8001776:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001778:	7cfb      	ldrb	r3, [r7, #19]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	0800ad8c 	.word	0x0800ad8c
 8001788:	0800afcc 	.word	0x0800afcc
 800178c:	0800afd4 	.word	0x0800afd4
 8001790:	0800afdc 	.word	0x0800afdc
 8001794:	0800ae1c 	.word	0x0800ae1c
 8001798:	0800ae34 	.word	0x0800ae34
 800179c:	0800afe0 	.word	0x0800afe0
 80017a0:	0800b000 	.word	0x0800b000
 80017a4:	0800b018 	.word	0x0800b018
 80017a8:	0800b038 	.word	0x0800b038
 80017ac:	200000a4 	.word	0x200000a4

080017b0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80017b8:	4b56      	ldr	r3, [pc, #344]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	4a55      	ldr	r2, [pc, #340]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c4:	4b53      	ldr	r3, [pc, #332]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ec:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f4:	4b47      	ldr	r3, [pc, #284]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001800:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	4a43      	ldr	r2, [pc, #268]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180c:	4b41      	ldr	r3, [pc, #260]	@ (8001914 <SPI_WIFI_MspInit+0x164>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181e:	483e      	ldr	r0, [pc, #248]	@ (8001918 <SPI_WIFI_MspInit+0x168>)
 8001820:	f002 fd04 	bl	800422c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001824:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4836      	ldr	r0, [pc, #216]	@ (8001918 <SPI_WIFI_MspInit+0x168>)
 800183e:	f002 fb33 	bl	8003ea8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001842:	2302      	movs	r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <SPI_WIFI_MspInit+0x16c>)
 8001848:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4831      	ldr	r0, [pc, #196]	@ (8001920 <SPI_WIFI_MspInit+0x170>)
 800185a:	f002 fb25 	bl	8003ea8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800185e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4829      	ldr	r0, [pc, #164]	@ (8001920 <SPI_WIFI_MspInit+0x170>)
 800187c:	f002 fb14 	bl	8003ea8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001880:	2201      	movs	r2, #1
 8001882:	2101      	movs	r1, #1
 8001884:	4826      	ldr	r0, [pc, #152]	@ (8001920 <SPI_WIFI_MspInit+0x170>)
 8001886:	f002 fcd1 	bl	800422c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	481f      	ldr	r0, [pc, #124]	@ (8001920 <SPI_WIFI_MspInit+0x170>)
 80018a2:	f002 fb01 	bl	8003ea8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80018a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80018b8:	2306      	movs	r3, #6
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4818      	ldr	r0, [pc, #96]	@ (8001924 <SPI_WIFI_MspInit+0x174>)
 80018c4:	f002 faf0 	bl	8003ea8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80018da:	2306      	movs	r3, #6
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	@ (8001924 <SPI_WIFI_MspInit+0x174>)
 80018e6:	f002 fadf 	bl	8003ea8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80018ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80018fc:	2306      	movs	r3, #6
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	@ (8001924 <SPI_WIFI_MspInit+0x174>)
 8001908:	f002 face 	bl	8003ea8 <HAL_GPIO_Init>
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	@ 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400
 800191c:	10110000 	.word	0x10110000
 8001920:	48001000 	.word	0x48001000
 8001924:	48000800 	.word	0x48000800

08001928 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d145      	bne.n	80019c8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 800193e:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <SPI_WIFI_Init+0xb8>)
 8001940:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001942:	4826      	ldr	r0, [pc, #152]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001944:	f7ff ff34 	bl	80017b0 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 800194a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800194e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001958:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800195c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 800196c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001970:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001974:	2210      	movs	r2, #16
 8001976:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 800198c:	2200      	movs	r2, #0
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001990:	4812      	ldr	r0, [pc, #72]	@ (80019dc <SPI_WIFI_Init+0xb4>)
 8001992:	f003 ffdf 	bl	8005954 <HAL_SPI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e018      	b.n	80019d4 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2007      	movs	r0, #7
 80019a8:	f002 fa07 	bl	8003dba <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80019ac:	2007      	movs	r0, #7
 80019ae:	f002 fa20 	bl	8003df2 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2033      	movs	r0, #51	@ 0x33
 80019b8:	f002 f9ff 	bl	8003dba <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80019bc:	2033      	movs	r0, #51	@ 0x33
 80019be:	f002 fa18 	bl	8003df2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80019c2:	200a      	movs	r0, #10
 80019c4:	f000 f9fe 	bl	8001dc4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80019c8:	f000 f80c 	bl	80019e4 <SPI_WIFI_ResetModule>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]

  return rc;
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200000a8 	.word	0x200000a8
 80019e0:	40003c00 	.word	0x40003c00

080019e4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80019ea:	f002 f8db 	bl	8003ba4 <HAL_GetTick>
 80019ee:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019fa:	4830      	ldr	r0, [pc, #192]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 80019fc:	f002 fc16 	bl	800422c <HAL_GPIO_WritePin>
 8001a00:	200a      	movs	r0, #10
 8001a02:	f002 f8db 	bl	8003bbc <HAL_Delay>
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0c:	482b      	ldr	r0, [pc, #172]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 8001a0e:	f002 fc0d 	bl	800422c <HAL_GPIO_WritePin>
 8001a12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a16:	f002 f8d1 	bl	8003bbc <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4827      	ldr	r0, [pc, #156]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 8001a20:	f002 fc04 	bl	800422c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001a24:	200f      	movs	r0, #15
 8001a26:	f000 f9cd 	bl	8001dc4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001a2a:	e020      	b.n	8001a6e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	463a      	mov	r2, r7
 8001a30:	18d1      	adds	r1, r2, r3
 8001a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a36:	2201      	movs	r2, #1
 8001a38:	4821      	ldr	r0, [pc, #132]	@ (8001ac0 <SPI_WIFI_ResetModule+0xdc>)
 8001a3a:	f004 f893 	bl	8005b64 <HAL_SPI_Receive>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3302      	adds	r3, #2
 8001a46:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001a48:	f002 f8ac 	bl	8003ba4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a56:	d202      	bcs.n	8001a5e <SPI_WIFI_ResetModule+0x7a>
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2101      	movs	r1, #1
 8001a62:	4816      	ldr	r0, [pc, #88]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 8001a64:	f002 fbe2 	bl	800422c <HAL_GPIO_WritePin>
      return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	e021      	b.n	8001ab2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4812      	ldr	r0, [pc, #72]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 8001a72:	f002 fbc3 	bl	80041fc <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d0d7      	beq.n	8001a2c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2101      	movs	r1, #1
 8001a80:	480e      	ldr	r0, [pc, #56]	@ (8001abc <SPI_WIFI_ResetModule+0xd8>)
 8001a82:	f002 fbd3 	bl	800422c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001a86:	783b      	ldrb	r3, [r7, #0]
 8001a88:	2b15      	cmp	r3, #21
 8001a8a:	d10e      	bne.n	8001aaa <SPI_WIFI_ResetModule+0xc6>
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b15      	cmp	r3, #21
 8001a90:	d10b      	bne.n	8001aaa <SPI_WIFI_ResetModule+0xc6>
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	2b0d      	cmp	r3, #13
 8001a96:	d108      	bne.n	8001aaa <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001a98:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d105      	bne.n	8001aaa <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aa2:	d102      	bne.n	8001aaa <SPI_WIFI_ResetModule+0xc6>
 8001aa4:	797b      	ldrb	r3, [r7, #5]
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d002      	beq.n	8001ab0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e000      	b.n	8001ab2 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	48001000 	.word	0x48001000
 8001ac0:	200000a8 	.word	0x200000a8

08001ac4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <SPI_WIFI_DeInit+0x10>)
 8001aca:	f004 f80f 	bl	8005aec <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000a8 	.word	0x200000a8

08001ad8 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001ae0:	f002 f860 	bl	8003ba4 <HAL_GetTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001ae8:	e00a      	b.n	8001b00 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001aea:	f002 f85b 	bl	8003ba4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d902      	bls.n	8001b00 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e007      	b.n	8001b10 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001b00:	2102      	movs	r1, #2
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <wait_cmddata_rdy_high+0x40>)
 8001b04:	f002 fb7a 	bl	80041fc <HAL_GPIO_ReadPin>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d1ed      	bne.n	8001aea <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	48001000 	.word	0x48001000

08001b1c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001b24:	f002 f83e 	bl	8003ba4 <HAL_GetTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001b2c:	e00a      	b.n	8001b44 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b2e:	f002 f839 	bl	8003ba4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad2      	subs	r2, r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d902      	bls.n	8001b44 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e004      	b.n	8001b4e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001b44:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <wait_cmddata_rdy_rising_event+0x3c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d0f0      	beq.n	8001b2e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001b4c:	2300      	movs	r3, #0
#endif
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000114 	.word	0x20000114

08001b5c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001b64:	f002 f81e 	bl	8003ba4 <HAL_GetTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001b6c:	e00a      	b.n	8001b84 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b6e:	f002 f819 	bl	8003ba4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d902      	bls.n	8001b84 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e004      	b.n	8001b8e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <wait_spi_rx_event+0x3c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d0f0      	beq.n	8001b6e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001b8c:	2300      	movs	r3, #0
#endif
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000010c 	.word	0x2000010c

08001b9c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ba4:	f001 fffe 	bl	8003ba4 <HAL_GetTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001bac:	e00a      	b.n	8001bc4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001bae:	f001 fff9 	bl	8003ba4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d902      	bls.n	8001bc4 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <wait_spi_tx_event+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d0f0      	beq.n	8001bae <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001bcc:	2300      	movs	r3, #0
#endif
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000110 	.word	0x20000110

08001bdc <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4834      	ldr	r0, [pc, #208]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001bf4:	f002 fb1a 	bl	800422c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f8e3 	bl	8001dc4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff8b 	bl	8001b1c <wait_cmddata_rdy_rising_event>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da02      	bge.n	8001c12 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001c0c:	f06f 0302 	mvn.w	r3, #2
 8001c10:	e054      	b.n	8001cbc <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001c12:	2200      	movs	r2, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	482b      	ldr	r0, [pc, #172]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001c18:	f002 fb08 	bl	800422c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001c1c:	200f      	movs	r0, #15
 8001c1e:	f000 f8d1 	bl	8001dc4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001c22:	e03d      	b.n	8001ca0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001c24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	db02      	blt.n	8001c34 <SPI_WIFI_ReceiveData+0x58>
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13c      	bne.n	8001cae <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <SPI_WIFI_ReceiveData+0xec>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4619      	mov	r1, r3
 8001c42:	4822      	ldr	r0, [pc, #136]	@ (8001ccc <SPI_WIFI_ReceiveData+0xf0>)
 8001c44:	f004 fcf0 	bl	8006628 <HAL_SPI_Receive_IT>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	481c      	ldr	r0, [pc, #112]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001c54:	f002 faea 	bl	800422c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	e02e      	b.n	8001cbc <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff7b 	bl	8001b5c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001c66:	7d3a      	ldrb	r2, [r7, #20]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	7d7a      	ldrb	r2, [r7, #21]
 8001c72:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001c74:	8afb      	ldrh	r3, [r7, #22]
 8001c76:	3302      	adds	r3, #2
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001c82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c86:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c8a:	db09      	blt.n	8001ca0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2101      	movs	r1, #1
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001c92:	f002 facb 	bl	800422c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001c96:	f7ff fea5 	bl	80019e4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001c9a:	f06f 0303 	mvn.w	r3, #3
 8001c9e:	e00d      	b.n	8001cbc <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4808      	ldr	r0, [pc, #32]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001ca4:	f002 faaa 	bl	80041fc <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d0ba      	beq.n	8001c24 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <SPI_WIFI_ReceiveData+0xe8>)
 8001cb4:	f002 faba 	bl	800422c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001cb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	48001000 	.word	0x48001000
 8001cc8:	2000010c 	.word	0x2000010c
 8001ccc:	200000a8 	.word	0x200000a8

08001cd0 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fef9 	bl	8001ad8 <wait_cmddata_rdy_high>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da02      	bge.n	8001cf2 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	e04f      	b.n	8001d92 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <SPI_WIFI_SendData+0xcc>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4828      	ldr	r0, [pc, #160]	@ (8001da0 <SPI_WIFI_SendData+0xd0>)
 8001cfe:	f002 fa95 	bl	800422c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 f85e 	bl	8001dc4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d919      	bls.n	8001d42 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <SPI_WIFI_SendData+0xd4>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4822      	ldr	r0, [pc, #136]	@ (8001da8 <SPI_WIFI_SendData+0xd8>)
 8001d20:	f004 fbe0 	bl	80064e4 <HAL_SPI_Transmit_IT>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	481c      	ldr	r0, [pc, #112]	@ (8001da0 <SPI_WIFI_SendData+0xd0>)
 8001d30:	f002 fa7c 	bl	800422c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e02b      	b.n	8001d92 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff2d 	bl	8001b9c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001d58:	230a      	movs	r3, #10
 8001d5a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <SPI_WIFI_SendData+0xd4>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2201      	movs	r2, #1
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480f      	ldr	r0, [pc, #60]	@ (8001da8 <SPI_WIFI_SendData+0xd8>)
 8001d6c:	f004 fbba 	bl	80064e4 <HAL_SPI_Transmit_IT>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001d76:	2201      	movs	r2, #1
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <SPI_WIFI_SendData+0xd0>)
 8001d7c:	f002 fa56 	bl	800422c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	e005      	b.n	8001d92 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff07 	bl	8001b9c <wait_spi_tx_event>
    
  }
  return len;
 8001d8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000114 	.word	0x20000114
 8001da0:	48001000 	.word	0x48001000
 8001da4:	20000110 	.word	0x20000110
 8001da8:	200000a8 	.word	0x200000a8

08001dac <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f001 ff01 	bl	8003bbc <HAL_Delay>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001dd4:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <SPI_WIFI_DelayUs+0x94>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d122      	bne.n	8001e22 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <SPI_WIFI_DelayUs+0x98>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e60 <SPI_WIFI_DelayUs+0x9c>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001df2:	f001 fed7 	bl	8003ba4 <HAL_GetTick>
 8001df6:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001df8:	e002      	b.n	8001e00 <SPI_WIFI_DelayUs+0x3c>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f9      	bne.n	8001dfa <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8001e06:	f001 fecd 	bl	8003ba4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <SPI_WIFI_DelayUs+0x94>)
 8001e12:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <SPI_WIFI_DelayUs+0x94>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <SPI_WIFI_DelayUs+0x5e>
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <SPI_WIFI_DelayUs+0x94>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <SPI_WIFI_DelayUs+0x98>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <SPI_WIFI_DelayUs+0xa0>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0c9a      	lsrs	r2, r3, #18
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <SPI_WIFI_DelayUs+0x94>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001e42:	e002      	b.n	8001e4a <SPI_WIFI_DelayUs+0x86>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <SPI_WIFI_DelayUs+0x80>
  return;
 8001e50:	bf00      	nop
}
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000118 	.word	0x20000118
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	10624dd3 	.word	0x10624dd3
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_SPI_RxCpltCallback+0x24>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_SPI_RxCpltCallback+0x24>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2000010c 	.word	0x2000010c

08001e90 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_SPI_TxCpltCallback+0x24>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <HAL_SPI_TxCpltCallback+0x24>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000110 	.word	0x20000110

08001eb8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SPI_WIFI_ISR+0x1c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <SPI_WIFI_ISR+0x1c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
   }
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20000114 	.word	0x20000114

08001ed8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001edc:	f001 fdfa 	bl	8003ad4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001ee0:	f000 fec0 	bl	8002c64 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f001 fb2b 	bl	8003540 <BSP_LED_Init>
  MX_GPIO_Init();
 8001eea:	f000 ff47 	bl	8002d7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001eee:	f000 fef5 	bl	8002cdc <MX_TIM2_Init>
  // Left PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4819      	ldr	r0, [pc, #100]	@ (8001f5c <main+0x84>)
 8001ef6:	f005 fc0d 	bl	8007714 <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);		//Pin 9
  // Right PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001efa:	2108      	movs	r1, #8
 8001efc:	4817      	ldr	r0, [pc, #92]	@ (8001f5c <main+0x84>)
 8001efe:	f005 fc09 	bl	8007714 <HAL_TIM_PWM_Start>
  //HAL_ADC_Start(&AdcHandle) ;

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <main+0x88>)
 8001f04:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <main+0x8c>)
 8001f06:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <main+0x88>)
 8001f0a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f0e:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <main+0x88>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <main+0x88>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <main+0x88>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <main+0x88>)
 8001f24:	220c      	movs	r2, #12
 8001f26:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <main+0x88>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <main+0x88>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <main+0x88>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <main+0x88>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <main+0x88>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	f001 fb2c 	bl	80035a0 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 8001f48:	f001 fce6 	bl	8003918 <BSP_TSENSOR_Init>

  printf("****** WIFI Web Server demonstration****** \n\n");
 8001f4c:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <main+0x90>)
 8001f4e:	f007 f84d 	bl	8008fec <puts>

#endif /* TERMINAL_USE */

  wifi_server();
 8001f52:	f000 f94b 	bl	80021ec <wifi_server>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000524 	.word	0x20000524
 8001f60:	200012c0 	.word	0x200012c0
 8001f64:	40013800 	.word	0x40013800
 8001f68:	0800b0ec 	.word	0x0800b0ec

08001f6c <L298n>:

// Control motor driver
int L298n(int direction, int width, int duration)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
	//change PWM width
	TIM2->CCR1 = width;
 8001f78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2->CCR3 = width;
 8001f80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	63d3      	str	r3, [r2, #60]	@ 0x3c
	switch (direction) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d876      	bhi.n	800207c <L298n+0x110>
 8001f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <L298n+0x28>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fdb 	.word	0x08001fdb
 8001f9c:	08002011 	.word	0x08002011
 8001fa0:	08002047 	.word	0x08002047
		// Forward
		case 0:
			// Move forward
			// Left Motor F
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);	//Pin 2
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001faa:	484d      	ldr	r0, [pc, #308]	@ (80020e0 <L298n+0x174>)
 8001fac:	f002 f93e 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//Pin 3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	484b      	ldr	r0, [pc, #300]	@ (80020e4 <L298n+0x178>)
 8001fb6:	f002 f939 	bl	800422c <HAL_GPIO_WritePin>
			// Right Motor F
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);		//Pin 4
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f002 f933 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	//Pin 5
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2110      	movs	r1, #16
 8001fca:	4846      	ldr	r0, [pc, #280]	@ (80020e4 <L298n+0x178>)
 8001fcc:	f002 f92e 	bl	800422c <HAL_GPIO_WritePin>
			HAL_Delay(duration);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fdf2 	bl	8003bbc <HAL_Delay>
			break;
 8001fd8:	e067      	b.n	80020aa <L298n+0x13e>
		// Backwards
		case 1:
			// Move backwards
			// Left Motor B
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//Pin 2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fe0:	483f      	ldr	r0, [pc, #252]	@ (80020e0 <L298n+0x174>)
 8001fe2:	f002 f923 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//Pin 3
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	483e      	ldr	r0, [pc, #248]	@ (80020e4 <L298n+0x178>)
 8001fec:	f002 f91e 	bl	800422c <HAL_GPIO_WritePin>
			// Right Motor B
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);	//Pin 4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff8:	f002 f918 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		//Pin 5
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2110      	movs	r1, #16
 8002000:	4838      	ldr	r0, [pc, #224]	@ (80020e4 <L298n+0x178>)
 8002002:	f002 f913 	bl	800422c <HAL_GPIO_WritePin>
			HAL_Delay(duration);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fdd7 	bl	8003bbc <HAL_Delay>
			break;
 800200e:	e04c      	b.n	80020aa <L298n+0x13e>
		// Left
		case 2:
			// Left Motor B
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//Pin 2
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002016:	4832      	ldr	r0, [pc, #200]	@ (80020e0 <L298n+0x174>)
 8002018:	f002 f908 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//Pin 3
 800201c:	2201      	movs	r2, #1
 800201e:	2101      	movs	r1, #1
 8002020:	4830      	ldr	r0, [pc, #192]	@ (80020e4 <L298n+0x178>)
 8002022:	f002 f903 	bl	800422c <HAL_GPIO_WritePin>
			// Right Motor F
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);		//Pin 4
 8002026:	2201      	movs	r2, #1
 8002028:	2108      	movs	r1, #8
 800202a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202e:	f002 f8fd 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	//Pin 5
 8002032:	2200      	movs	r2, #0
 8002034:	2110      	movs	r1, #16
 8002036:	482b      	ldr	r0, [pc, #172]	@ (80020e4 <L298n+0x178>)
 8002038:	f002 f8f8 	bl	800422c <HAL_GPIO_WritePin>
			HAL_Delay(duration);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fdbc 	bl	8003bbc <HAL_Delay>
			break;
 8002044:	e031      	b.n	80020aa <L298n+0x13e>
		// Right
		case 3:
			// Left Motor F
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);	//Pin 2
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800204c:	4824      	ldr	r0, [pc, #144]	@ (80020e0 <L298n+0x174>)
 800204e:	f002 f8ed 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//Pin 3
 8002052:	2200      	movs	r2, #0
 8002054:	2101      	movs	r1, #1
 8002056:	4823      	ldr	r0, [pc, #140]	@ (80020e4 <L298n+0x178>)
 8002058:	f002 f8e8 	bl	800422c <HAL_GPIO_WritePin>
			// Right Motor B
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);	//Pin 4
 800205c:	2200      	movs	r2, #0
 800205e:	2108      	movs	r1, #8
 8002060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002064:	f002 f8e2 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		//Pin 5
 8002068:	2201      	movs	r2, #1
 800206a:	2110      	movs	r1, #16
 800206c:	481d      	ldr	r0, [pc, #116]	@ (80020e4 <L298n+0x178>)
 800206e:	f002 f8dd 	bl	800422c <HAL_GPIO_WritePin>
			HAL_Delay(duration);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fda1 	bl	8003bbc <HAL_Delay>
			break;
 800207a:	e016      	b.n	80020aa <L298n+0x13e>
		// Brake
		case 'X':
		default:
			// Stop
			// Left Motor X
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//Pin 2
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002082:	4817      	ldr	r0, [pc, #92]	@ (80020e0 <L298n+0x174>)
 8002084:	f002 f8d2 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//Pin 3
 8002088:	2200      	movs	r2, #0
 800208a:	2101      	movs	r1, #1
 800208c:	4815      	ldr	r0, [pc, #84]	@ (80020e4 <L298n+0x178>)
 800208e:	f002 f8cd 	bl	800422c <HAL_GPIO_WritePin>
			// Right Motor X
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);	//Pin 4
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209a:	f002 f8c7 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	//Pin 5
 800209e:	2200      	movs	r2, #0
 80020a0:	2110      	movs	r1, #16
 80020a2:	4810      	ldr	r0, [pc, #64]	@ (80020e4 <L298n+0x178>)
 80020a4:	f002 f8c2 	bl	800422c <HAL_GPIO_WritePin>
			break;
 80020a8:	bf00      	nop
	}

	// Stop
	// Left Motor X
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//Pin 2
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020b0:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <L298n+0x174>)
 80020b2:	f002 f8bb 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//Pin 3
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	480a      	ldr	r0, [pc, #40]	@ (80020e4 <L298n+0x178>)
 80020bc:	f002 f8b6 	bl	800422c <HAL_GPIO_WritePin>
	// Right Motor X
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);	//Pin 4
 80020c0:	2200      	movs	r2, #0
 80020c2:	2108      	movs	r1, #8
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c8:	f002 f8b0 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	//Pin 5
 80020cc:	2200      	movs	r2, #0
 80020ce:	2110      	movs	r1, #16
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <L298n+0x178>)
 80020d2:	f002 f8ab 	bl	800422c <HAL_GPIO_WritePin>
	return 0;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	48000c00 	.word	0x48000c00
 80020e4:	48000400 	.word	0x48000400

080020e8 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80020ee:	f001 f897 	bl	8003220 <WIFI_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d123      	bne.n	8002140 <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 80020f8:	4814      	ldr	r0, [pc, #80]	@ (800214c <wifi_start+0x64>)
 80020fa:	f006 ff77 	bl	8008fec <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	4618      	mov	r0, r3
 8002102:	f001 f8db 	bl	80032bc <WIFI_GetMAC_Address>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <wifi_start+0x4c>
    {
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 800210c:	783b      	ldrb	r3, [r7, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	461c      	mov	r4, r3
 8002114:	78bb      	ldrb	r3, [r7, #2]
 8002116:	461d      	mov	r5, r3
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	793a      	ldrb	r2, [r7, #4]
 800211c:	7979      	ldrb	r1, [r7, #5]
 800211e:	9102      	str	r1, [sp, #8]
 8002120:	9201      	str	r2, [sp, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	462b      	mov	r3, r5
 8002126:	4622      	mov	r2, r4
 8002128:	4601      	mov	r1, r0
 800212a:	4809      	ldr	r0, [pc, #36]	@ (8002150 <wifi_start+0x68>)
 800212c:	f006 fef6 	bl	8008f1c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8002134:	4807      	ldr	r0, [pc, #28]	@ (8002154 <wifi_start+0x6c>)
 8002136:	f006 ff59 	bl	8008fec <puts>
      return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e001      	b.n	8002144 <wifi_start+0x5c>
    return -1;
 8002140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	0800b11c 	.word	0x0800b11c
 8002150:	0800b134 	.word	0x0800b134
 8002154:	0800b174 	.word	0x0800b174

08002158 <wifi_connect>:



int wifi_connect(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af02      	add	r7, sp, #8

  wifi_start();
 800215e:	f7ff ffc3 	bl	80020e8 <wifi_start>

  LOG(("\nConnecting to %s , %s\n","SSID","PASSWORD"));
 8002162:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <wifi_connect+0x70>)
 8002164:	4919      	ldr	r1, [pc, #100]	@ (80021cc <wifi_connect+0x74>)
 8002166:	481a      	ldr	r0, [pc, #104]	@ (80021d0 <wifi_connect+0x78>)
 8002168:	f006 fed8 	bl	8008f1c <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800216c:	2203      	movs	r2, #3
 800216e:	4919      	ldr	r1, [pc, #100]	@ (80021d4 <wifi_connect+0x7c>)
 8002170:	4819      	ldr	r0, [pc, #100]	@ (80021d8 <wifi_connect+0x80>)
 8002172:	f001 f881 	bl	8003278 <WIFI_Connect>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d11d      	bne.n	80021b8 <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800217c:	4817      	ldr	r0, [pc, #92]	@ (80021dc <wifi_connect+0x84>)
 800217e:	f001 f8b3 	bl	80032e8 <WIFI_GetIP_Address>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <wifi_connect+0x84>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <wifi_connect+0x84>)
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	461a      	mov	r2, r3
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <wifi_connect+0x84>)
 8002196:	789b      	ldrb	r3, [r3, #2]
 8002198:	4618      	mov	r0, r3
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <wifi_connect+0x84>)
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	480f      	ldr	r0, [pc, #60]	@ (80021e0 <wifi_connect+0x88>)
 80021a4:	f006 feba 	bl	8008f1c <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e00a      	b.n	80021c2 <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 80021ac:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <wifi_connect+0x8c>)
 80021ae:	f006 ff1d 	bl	8008fec <puts>
      return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e004      	b.n	80021c2 <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <wifi_connect+0x90>)
 80021ba:	f006 ff17 	bl	8008fec <puts>
     return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800b198 	.word	0x0800b198
 80021cc:	0800b1a4 	.word	0x0800b1a4
 80021d0:	0800b1ac 	.word	0x0800b1ac
 80021d4:	0800b1c4 	.word	0x0800b1c4
 80021d8:	0800b1d0 	.word	0x0800b1d0
 80021dc:	2000051c 	.word	0x2000051c
 80021e0:	0800b1d8 	.word	0x0800b1d8
 80021e4:	0800b214 	.word	0x0800b214
 80021e8:	0800b244 	.word	0x0800b244

080021ec <wifi_server>:

int wifi_server(void)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af02      	add	r7, sp, #8
  bool StopServer = false;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 80021f6:	483d      	ldr	r0, [pc, #244]	@ (80022ec <wifi_server+0x100>)
 80021f8:	f006 fef8 	bl	8008fec <puts>
  if (wifi_connect()!=0) return -1;
 80021fc:	f7ff ffac 	bl	8002158 <wifi_connect>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <wifi_server+0x20>
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e06b      	b.n	80022e4 <wifi_server+0xf8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 800220c:	2350      	movs	r3, #80	@ 0x50
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <wifi_server+0x104>)
 8002212:	2201      	movs	r2, #1
 8002214:	2100      	movs	r1, #0
 8002216:	2000      	movs	r0, #0
 8002218:	f001 f882 	bl	8003320 <WIFI_StartServer>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8002222:	4834      	ldr	r0, [pc, #208]	@ (80022f4 <wifi_server+0x108>)
 8002224:	f006 fee2 	bl	8008fec <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002228:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <wifi_server+0x10c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	4b32      	ldr	r3, [pc, #200]	@ (80022f8 <wifi_server+0x10c>)
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	461a      	mov	r2, r3
 8002234:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <wifi_server+0x10c>)
 8002236:	789b      	ldrb	r3, [r3, #2]
 8002238:	4618      	mov	r0, r3
 800223a:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <wifi_server+0x10c>)
 800223c:	78db      	ldrb	r3, [r3, #3]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4603      	mov	r3, r0
 8002242:	482e      	ldr	r0, [pc, #184]	@ (80022fc <wifi_server+0x110>)
 8002244:	f006 fe6a 	bl	8008f1c <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8002248:	e00f      	b.n	800226a <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <wifi_server+0x10c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <wifi_server+0x10c>)
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	461a      	mov	r2, r3
 8002256:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <wifi_server+0x10c>)
 8002258:	789b      	ldrb	r3, [r3, #2]
 800225a:	4618      	mov	r0, r3
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <wifi_server+0x10c>)
 800225e:	78db      	ldrb	r3, [r3, #3]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4603      	mov	r3, r0
 8002264:	4826      	ldr	r0, [pc, #152]	@ (8002300 <wifi_server+0x114>)
 8002266:	f006 fe59 	bl	8008f1c <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 800226a:	1dbb      	adds	r3, r7, #6
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002274:	2000      	movs	r0, #0
 8002276:	f001 f883 	bl	8003380 <WIFI_WaitServerConnection>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1e4      	bne.n	800224a <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 8002280:	7a3b      	ldrb	r3, [r7, #8]
 8002282:	4619      	mov	r1, r3
 8002284:	7a7b      	ldrb	r3, [r7, #9]
 8002286:	4618      	mov	r0, r3
 8002288:	7abb      	ldrb	r3, [r7, #10]
 800228a:	461c      	mov	r4, r3
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4623      	mov	r3, r4
 8002296:	4602      	mov	r2, r0
 8002298:	481a      	ldr	r0, [pc, #104]	@ (8002304 <wifi_server+0x118>)
 800229a:	f006 fe3f 	bl	8008f1c <iprintf>

    StopServer=WebServerProcess();
 800229e:	f000 f839 	bl	8002314 <WebServerProcess>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80022a6:	2000      	movs	r0, #0
 80022a8:	f001 f8ae 	bl	8003408 <WIFI_CloseServerConnection>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <wifi_server+0xd2>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 80022b2:	4815      	ldr	r0, [pc, #84]	@ (8002308 <wifi_server+0x11c>)
 80022b4:	f006 fe9a 	bl	8008fec <puts>
      return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e012      	b.n	80022e4 <wifi_server+0xf8>
    }
  }
  while(StopServer == false);
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	f083 0301 	eor.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cf      	bne.n	800226a <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 80022ca:	2000      	movs	r0, #0
 80022cc:	f001 f8b2 	bl	8003434 <WIFI_StopServer>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <wifi_server+0xf0>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 80022d6:	480d      	ldr	r0, [pc, #52]	@ (800230c <wifi_server+0x120>)
 80022d8:	f006 fe88 	bl	8008fec <puts>
  }

  LOG(("Server is stop\n"));
 80022dc:	480c      	ldr	r0, [pc, #48]	@ (8002310 <wifi_server+0x124>)
 80022de:	f006 fe85 	bl	8008fec <puts>
  return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	0800b26c 	.word	0x0800b26c
 80022f0:	0800b288 	.word	0x0800b288
 80022f4:	0800b28c 	.word	0x0800b28c
 80022f8:	2000051c 	.word	0x2000051c
 80022fc:	0800b2a8 	.word	0x0800b2a8
 8002300:	0800b2f8 	.word	0x0800b2f8
 8002304:	0800b31c 	.word	0x0800b31c
 8002308:	0800b340 	.word	0x0800b340
 800230c:	0800b374 	.word	0x0800b374
 8002310:	0800b390 	.word	0x0800b390

08002314 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b08b      	sub	sp, #44	@ 0x2c
 8002318:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 800231a:	2300      	movs	r3, #0
 800231c:	77fb      	strb	r3, [r7, #31]
  char* mypointer;
  int a =0, b = 0, c = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002338:	4971      	ldr	r1, [pc, #452]	@ (8002500 <WebServerProcess+0x1ec>)
 800233a:	2000      	movs	r0, #0
 800233c:	f001 f8b4 	bl	80034a8 <WIFI_ReceiveData>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 80d3 	bne.w	80024ee <WebServerProcess+0x1da>
  {
   LOG(("get %d byte from server\n",respLen));
 8002348:	8abb      	ldrh	r3, [r7, #20]
 800234a:	4619      	mov	r1, r3
 800234c:	486d      	ldr	r0, [pc, #436]	@ (8002504 <WebServerProcess+0x1f0>)
 800234e:	f006 fde5 	bl	8008f1c <iprintf>

   if( respLen > 0)
 8002352:	8abb      	ldrh	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80cd 	beq.w	80024f4 <WebServerProcess+0x1e0>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 800235a:	496b      	ldr	r1, [pc, #428]	@ (8002508 <WebServerProcess+0x1f4>)
 800235c:	4868      	ldr	r0, [pc, #416]	@ (8002500 <WebServerProcess+0x1ec>)
 800235e:	f007 f819 	bl	8009394 <strstr>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <WebServerProcess+0x8e>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 8002368:	f001 faf2 	bl	8003950 <BSP_TSENSOR_ReadTemp>
 800236c:	eef0 7a40 	vmov.f32	s15, s0
 8002370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002374:	edc7 7a01 	vstr	s15, [r7, #4]
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	75fb      	strb	r3, [r7, #23]
        if(SendWebPage(MotorState, temp) != WIFI_STATUS_OK)
 800237c:	4b63      	ldr	r3, [pc, #396]	@ (800250c <WebServerProcess+0x1f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	7dfa      	ldrb	r2, [r7, #23]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f8e6 	bl	8002558 <SendWebPage>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <WebServerProcess+0x86>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 8002392:	485f      	ldr	r0, [pc, #380]	@ (8002510 <WebServerProcess+0x1fc>)
 8002394:	f006 fe2a 	bl	8008fec <puts>
 8002398:	e0ac      	b.n	80024f4 <WebServerProcess+0x1e0>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 800239a:	485e      	ldr	r0, [pc, #376]	@ (8002514 <WebServerProcess+0x200>)
 800239c:	f006 fe26 	bl	8008fec <puts>
 80023a0:	e0a8      	b.n	80024f4 <WebServerProcess+0x1e0>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80023a2:	495d      	ldr	r1, [pc, #372]	@ (8002518 <WebServerProcess+0x204>)
 80023a4:	4856      	ldr	r0, [pc, #344]	@ (8002500 <WebServerProcess+0x1ec>)
 80023a6:	f006 fff5 	bl	8009394 <strstr>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a1 	beq.w	80024f4 <WebServerProcess+0x1e0>
       {
         LOG(("Post request\n"));
 80023b2:	485a      	ldr	r0, [pc, #360]	@ (800251c <WebServerProcess+0x208>)
 80023b4:	f006 fe1a 	bl	8008fec <puts>

         if(strstr((char *)resp, "radio"))
 80023b8:	4959      	ldr	r1, [pc, #356]	@ (8002520 <WebServerProcess+0x20c>)
 80023ba:	4851      	ldr	r0, [pc, #324]	@ (8002500 <WebServerProcess+0x1ec>)
 80023bc:	f006 ffea 	bl	8009394 <strstr>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d05c      	beq.n	8002480 <WebServerProcess+0x16c>
         {
           if(strstr((char *)resp, "radio=0"))
 80023c6:	4957      	ldr	r1, [pc, #348]	@ (8002524 <WebServerProcess+0x210>)
 80023c8:	484d      	ldr	r0, [pc, #308]	@ (8002500 <WebServerProcess+0x1ec>)
 80023ca:	f006 ffe3 	bl	8009394 <strstr>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <WebServerProcess+0xc6>
           {
             MotorState = 0;
 80023d4:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <WebServerProcess+0x1f8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
           }
           if(strstr((char *)resp, "radio=1"))
 80023da:	4953      	ldr	r1, [pc, #332]	@ (8002528 <WebServerProcess+0x214>)
 80023dc:	4848      	ldr	r0, [pc, #288]	@ (8002500 <WebServerProcess+0x1ec>)
 80023de:	f006 ffd9 	bl	8009394 <strstr>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <WebServerProcess+0xda>
           {
             MotorState = 1;
 80023e8:	4b48      	ldr	r3, [pc, #288]	@ (800250c <WebServerProcess+0x1f8>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
           }
           if(strstr((char *)resp, "radio=2"))
 80023ee:	494f      	ldr	r1, [pc, #316]	@ (800252c <WebServerProcess+0x218>)
 80023f0:	4843      	ldr	r0, [pc, #268]	@ (8002500 <WebServerProcess+0x1ec>)
 80023f2:	f006 ffcf 	bl	8009394 <strstr>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <WebServerProcess+0xee>
		   {
			 MotorState = 2;
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <WebServerProcess+0x1f8>)
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
		   }
		   if(strstr((char *)resp, "radio=3"))
 8002402:	494b      	ldr	r1, [pc, #300]	@ (8002530 <WebServerProcess+0x21c>)
 8002404:	483e      	ldr	r0, [pc, #248]	@ (8002500 <WebServerProcess+0x1ec>)
 8002406:	f006 ffc5 	bl	8009394 <strstr>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <WebServerProcess+0x102>
		   {
			 MotorState = 3;
 8002410:	4b3e      	ldr	r3, [pc, #248]	@ (800250c <WebServerProcess+0x1f8>)
 8002412:	2203      	movs	r2, #3
 8002414:	601a      	str	r2, [r3, #0]
		   }

		   // read in values for pulse width and duration
		   // read in int width
		   mypointer = strstr((char *)resp, "range1=");
 8002416:	4947      	ldr	r1, [pc, #284]	@ (8002534 <WebServerProcess+0x220>)
 8002418:	4839      	ldr	r0, [pc, #228]	@ (8002500 <WebServerProcess+0x1ec>)
 800241a:	f006 ffbb 	bl	8009394 <strstr>
 800241e:	61b8      	str	r0, [r7, #24]
		   sscanf(mypointer+7, "%d", &a);
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3307      	adds	r3, #7
 8002424:	f107 0210 	add.w	r2, r7, #16
 8002428:	4943      	ldr	r1, [pc, #268]	@ (8002538 <WebServerProcess+0x224>)
 800242a:	4618      	mov	r0, r3
 800242c:	f006 fe06 	bl	800903c <siscanf>
		   // read in float duration
		   mypointer = strstr((char *)resp, "range2=");
 8002430:	4942      	ldr	r1, [pc, #264]	@ (800253c <WebServerProcess+0x228>)
 8002432:	4833      	ldr	r0, [pc, #204]	@ (8002500 <WebServerProcess+0x1ec>)
 8002434:	f006 ffae 	bl	8009394 <strstr>
 8002438:	61b8      	str	r0, [r7, #24]
		   sscanf(mypointer+7, "%d.%d", &b, &c);
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1dd8      	adds	r0, r3, #7
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	493e      	ldr	r1, [pc, #248]	@ (8002540 <WebServerProcess+0x22c>)
 8002448:	f006 fdf8 	bl	800903c <siscanf>
		   // Use motor driver
           L298n(MotorState, a, b*1000 + c*100);
 800244c:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <WebServerProcess+0x1f8>)
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	6939      	ldr	r1, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002458:	fb03 f202 	mul.w	r2, r3, r2
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2464      	movs	r4, #100	@ 0x64
 8002460:	fb04 f303 	mul.w	r3, r4, r3
 8002464:	4413      	add	r3, r2
 8002466:	461a      	mov	r2, r3
 8002468:	f7ff fd80 	bl	8001f6c <L298n>

           temp = (int) BSP_TSENSOR_ReadTemp();
 800246c:	f001 fa70 	bl	8003950 <BSP_TSENSOR_ReadTemp>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002478:	edc7 7a01 	vstr	s15, [r7, #4]
 800247c:	793b      	ldrb	r3, [r7, #4]
 800247e:	75fb      	strb	r3, [r7, #23]
         }
         if(strstr((char *)resp, "stop_server"))
 8002480:	4930      	ldr	r1, [pc, #192]	@ (8002544 <WebServerProcess+0x230>)
 8002482:	481f      	ldr	r0, [pc, #124]	@ (8002500 <WebServerProcess+0x1ec>)
 8002484:	f006 ff86 	bl	8009394 <strstr>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <WebServerProcess+0x1a0>
         {
           if(strstr((char *)resp, "stop_server=0"))
 800248e:	492e      	ldr	r1, [pc, #184]	@ (8002548 <WebServerProcess+0x234>)
 8002490:	481b      	ldr	r0, [pc, #108]	@ (8002500 <WebServerProcess+0x1ec>)
 8002492:	f006 ff7f 	bl	8009394 <strstr>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <WebServerProcess+0x18e>
           {
             stopserver = false;
 800249c:	2300      	movs	r3, #0
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e008      	b.n	80024b4 <WebServerProcess+0x1a0>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 80024a2:	492a      	ldr	r1, [pc, #168]	@ (800254c <WebServerProcess+0x238>)
 80024a4:	4816      	ldr	r0, [pc, #88]	@ (8002500 <WebServerProcess+0x1ec>)
 80024a6:	f006 ff75 	bl	8009394 <strstr>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <WebServerProcess+0x1a0>
           {
             stopserver = true;
 80024b0:	2301      	movs	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 80024b4:	f001 fa4c 	bl	8003950 <BSP_TSENSOR_ReadTemp>
 80024b8:	eef0 7a40 	vmov.f32	s15, s0
 80024bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80024c4:	793b      	ldrb	r3, [r7, #4]
 80024c6:	75fb      	strb	r3, [r7, #23]
         if(SendWebPage(MotorState, temp) != WIFI_STATUS_OK)
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <WebServerProcess+0x1f8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	7dfa      	ldrb	r2, [r7, #23]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f840 	bl	8002558 <SendWebPage>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <WebServerProcess+0x1d2>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 80024de:	480c      	ldr	r0, [pc, #48]	@ (8002510 <WebServerProcess+0x1fc>)
 80024e0:	f006 fd84 	bl	8008fec <puts>
 80024e4:	e006      	b.n	80024f4 <WebServerProcess+0x1e0>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 80024e6:	481a      	ldr	r0, [pc, #104]	@ (8002550 <WebServerProcess+0x23c>)
 80024e8:	f006 fd80 	bl	8008fec <puts>
 80024ec:	e002      	b.n	80024f4 <WebServerProcess+0x1e0>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 80024ee:	4819      	ldr	r0, [pc, #100]	@ (8002554 <WebServerProcess+0x240>)
 80024f0:	f006 fd7c 	bl	8008fec <puts>
  }
  return stopserver;
 80024f4:	7ffb      	ldrb	r3, [r7, #31]

 }
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000570 	.word	0x20000570
 8002504:	0800b3a0 	.word	0x0800b3a0
 8002508:	0800b3bc 	.word	0x0800b3bc
 800250c:	20000520 	.word	0x20000520
 8002510:	0800b3c0 	.word	0x0800b3c0
 8002514:	0800b3e0 	.word	0x0800b3e0
 8002518:	0800b400 	.word	0x0800b400
 800251c:	0800b408 	.word	0x0800b408
 8002520:	0800b418 	.word	0x0800b418
 8002524:	0800b420 	.word	0x0800b420
 8002528:	0800b428 	.word	0x0800b428
 800252c:	0800b430 	.word	0x0800b430
 8002530:	0800b438 	.word	0x0800b438
 8002534:	0800b440 	.word	0x0800b440
 8002538:	0800b448 	.word	0x0800b448
 800253c:	0800b44c 	.word	0x0800b44c
 8002540:	0800b454 	.word	0x0800b454
 8002544:	0800b45c 	.word	0x0800b45c
 8002548:	0800b468 	.word	0x0800b468
 800254c:	0800b478 	.word	0x0800b478
 8002550:	0800b488 	.word	0x0800b488
 8002554:	0800b4a8 	.word	0x0800b4a8

08002558 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t MoveDir, uint8_t temperature)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b093      	sub	sp, #76	@ 0x4c
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	460a      	mov	r2, r1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8002568:	4aca      	ldr	r2, [pc, #808]	@ (8002894 <SendWebPage+0x33c>)
 800256a:	4bcb      	ldr	r3, [pc, #812]	@ (8002898 <SendWebPage+0x340>)
 800256c:	4614      	mov	r4, r2
 800256e:	461d      	mov	r5, r3
 8002570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800257c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002580:	c407      	stmia	r4!, {r0, r1, r2}
 8002582:	8023      	strh	r3, [r4, #0]
 8002584:	3402      	adds	r4, #2
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 800258a:	48c2      	ldr	r0, [pc, #776]	@ (8002894 <SendWebPage+0x33c>)
 800258c:	f7fd fe20 	bl	80001d0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4bbf      	ldr	r3, [pc, #764]	@ (8002894 <SendWebPage+0x33c>)
 8002596:	4413      	add	r3, r2
 8002598:	4ac0      	ldr	r2, [pc, #768]	@ (800289c <SendWebPage+0x344>)
 800259a:	461d      	mov	r5, r3
 800259c:	4614      	mov	r4, r2
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	6028      	str	r0, [r5, #0]
 80025a2:	6069      	str	r1, [r5, #4]
 80025a4:	60aa      	str	r2, [r5, #8]
 80025a6:	60eb      	str	r3, [r5, #12]
 80025a8:	7823      	ldrb	r3, [r4, #0]
 80025aa:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Wifi Rover</title>\r\n");
 80025ac:	48b9      	ldr	r0, [pc, #740]	@ (8002894 <SendWebPage+0x33c>)
 80025ae:	f7fd fe0f 	bl	80001d0 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4bb7      	ldr	r3, [pc, #732]	@ (8002894 <SendWebPage+0x33c>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4ab9      	ldr	r2, [pc, #740]	@ (80028a0 <SendWebPage+0x348>)
 80025bc:	4614      	mov	r4, r2
 80025be:	469c      	mov	ip, r3
 80025c0:	f104 0e20 	add.w	lr, r4, #32
 80025c4:	4665      	mov	r5, ip
 80025c6:	4626      	mov	r6, r4
 80025c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025ca:	6028      	str	r0, [r5, #0]
 80025cc:	6069      	str	r1, [r5, #4]
 80025ce:	60aa      	str	r2, [r5, #8]
 80025d0:	60eb      	str	r3, [r5, #12]
 80025d2:	3410      	adds	r4, #16
 80025d4:	f10c 0c10 	add.w	ip, ip, #16
 80025d8:	4574      	cmp	r4, lr
 80025da:	d1f3      	bne.n	80025c4 <SendWebPage+0x6c>
 80025dc:	4662      	mov	r2, ip
 80025de:	4623      	mov	r3, r4
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>STM32 Wifi Rover</h2>\r\n");
 80025e4:	48ab      	ldr	r0, [pc, #684]	@ (8002894 <SendWebPage+0x33c>)
 80025e6:	f7fd fdf3 	bl	80001d0 <strlen>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4ba9      	ldr	r3, [pc, #676]	@ (8002894 <SendWebPage+0x33c>)
 80025f0:	4413      	add	r3, r2
 80025f2:	4aac      	ldr	r2, [pc, #688]	@ (80028a4 <SendWebPage+0x34c>)
 80025f4:	461d      	mov	r5, r3
 80025f6:	4614      	mov	r4, r2
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	6028      	str	r0, [r5, #0]
 80025fc:	6069      	str	r1, [r5, #4]
 80025fe:	60aa      	str	r2, [r5, #8]
 8002600:	60eb      	str	r3, [r5, #12]
 8002602:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002604:	6128      	str	r0, [r5, #16]
 8002606:	6169      	str	r1, [r5, #20]
 8002608:	61aa      	str	r2, [r5, #24]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 800260a:	48a2      	ldr	r0, [pc, #648]	@ (8002894 <SendWebPage+0x33c>)
 800260c:	f7fd fde0 	bl	80001d0 <strlen>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b9f      	ldr	r3, [pc, #636]	@ (8002894 <SendWebPage+0x33c>)
 8002616:	4413      	add	r3, r2
 8002618:	4aa3      	ldr	r2, [pc, #652]	@ (80028a8 <SendWebPage+0x350>)
 800261a:	461c      	mov	r4, r3
 800261c:	4613      	mov	r3, r2
 800261e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002620:	6020      	str	r0, [r4, #0]
 8002622:	6061      	str	r1, [r4, #4]
 8002624:	60a2      	str	r2, [r4, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 800262a:	489a      	ldr	r0, [pc, #616]	@ (8002894 <SendWebPage+0x33c>)
 800262c:	f7fd fdd0 	bl	80001d0 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	4b97      	ldr	r3, [pc, #604]	@ (8002894 <SendWebPage+0x33c>)
 8002636:	4413      	add	r3, r2
 8002638:	4a9c      	ldr	r2, [pc, #624]	@ (80028ac <SendWebPage+0x354>)
 800263a:	4614      	mov	r4, r2
 800263c:	469c      	mov	ip, r3
 800263e:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8002642:	4665      	mov	r5, ip
 8002644:	4626      	mov	r6, r4
 8002646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002648:	6028      	str	r0, [r5, #0]
 800264a:	6069      	str	r1, [r5, #4]
 800264c:	60aa      	str	r2, [r5, #8]
 800264e:	60eb      	str	r3, [r5, #12]
 8002650:	3410      	adds	r4, #16
 8002652:	f10c 0c10 	add.w	ip, ip, #16
 8002656:	4574      	cmp	r4, lr
 8002658:	d1f3      	bne.n	8002642 <SendWebPage+0xea>
  sprintf((char *)temp, "%d", temperature);
 800265a:	79ba      	ldrb	r2, [r7, #6]
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	4993      	ldr	r1, [pc, #588]	@ (80028b0 <SendWebPage+0x358>)
 8002662:	4618      	mov	r0, r3
 8002664:	f006 fcca 	bl	8008ffc <siprintf>
  strcat((char *)http, (char *)temp);
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	4619      	mov	r1, r3
 800266e:	4889      	ldr	r0, [pc, #548]	@ (8002894 <SendWebPage+0x33c>)
 8002670:	f006 fe00 	bl	8009274 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8002674:	4887      	ldr	r0, [pc, #540]	@ (8002894 <SendWebPage+0x33c>)
 8002676:	f7fd fdab 	bl	80001d0 <strlen>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b85      	ldr	r3, [pc, #532]	@ (8002894 <SendWebPage+0x33c>)
 8002680:	4413      	add	r3, r2
 8002682:	4a8c      	ldr	r2, [pc, #560]	@ (80028b4 <SendWebPage+0x35c>)
 8002684:	461d      	mov	r5, r3
 8002686:	4614      	mov	r4, r2
 8002688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268a:	6028      	str	r0, [r5, #0]
 800268c:	6069      	str	r1, [r5, #4]
 800268e:	60aa      	str	r2, [r5, #8]
 8002690:	60eb      	str	r3, [r5, #12]
 8002692:	7823      	ldrb	r3, [r4, #0]
 8002694:	742b      	strb	r3, [r5, #16]
  // Speed input
  strcat((char *)http, (char *)"<p><label for=\"range1\">Duty cycle (speed) 50 to 100%:</label>");
 8002696:	487f      	ldr	r0, [pc, #508]	@ (8002894 <SendWebPage+0x33c>)
 8002698:	f7fd fd9a 	bl	80001d0 <strlen>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <SendWebPage+0x33c>)
 80026a2:	4413      	add	r3, r2
 80026a4:	4a84      	ldr	r2, [pc, #528]	@ (80028b8 <SendWebPage+0x360>)
 80026a6:	4614      	mov	r4, r2
 80026a8:	469c      	mov	ip, r3
 80026aa:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80026ae:	4665      	mov	r5, ip
 80026b0:	4626      	mov	r6, r4
 80026b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026b4:	6028      	str	r0, [r5, #0]
 80026b6:	6069      	str	r1, [r5, #4]
 80026b8:	60aa      	str	r2, [r5, #8]
 80026ba:	60eb      	str	r3, [r5, #12]
 80026bc:	3410      	adds	r4, #16
 80026be:	f10c 0c10 	add.w	ip, ip, #16
 80026c2:	4574      	cmp	r4, lr
 80026c4:	d1f3      	bne.n	80026ae <SendWebPage+0x156>
 80026c6:	4665      	mov	r5, ip
 80026c8:	4623      	mov	r3, r4
 80026ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026cc:	6028      	str	r0, [r5, #0]
 80026ce:	6069      	str	r1, [r5, #4]
 80026d0:	60aa      	str	r2, [r5, #8]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	81ab      	strh	r3, [r5, #12]
  strcat((char *)http, (char *)"<input type=\"range\" name=\"range1\" min=\"50\" max=\"100\" step=\"5\" oninput=\"this.nextElementSibling.value = this.value\"><output>75</output>");
 80026d6:	486f      	ldr	r0, [pc, #444]	@ (8002894 <SendWebPage+0x33c>)
 80026d8:	f7fd fd7a 	bl	80001d0 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002894 <SendWebPage+0x33c>)
 80026e2:	4413      	add	r3, r2
 80026e4:	4a75      	ldr	r2, [pc, #468]	@ (80028bc <SendWebPage+0x364>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	4611      	mov	r1, r2
 80026ea:	2387      	movs	r3, #135	@ 0x87
 80026ec:	461a      	mov	r2, r3
 80026ee:	f006 feda 	bl	80094a6 <memcpy>
  // Duration input
  strcat((char *)http, (char *)"<p><label for=\"range2\">Duration in seconds 0.3 to 2s:</label>");
 80026f2:	4868      	ldr	r0, [pc, #416]	@ (8002894 <SendWebPage+0x33c>)
 80026f4:	f7fd fd6c 	bl	80001d0 <strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <SendWebPage+0x33c>)
 80026fe:	4413      	add	r3, r2
 8002700:	4a6f      	ldr	r2, [pc, #444]	@ (80028c0 <SendWebPage+0x368>)
 8002702:	4614      	mov	r4, r2
 8002704:	469c      	mov	ip, r3
 8002706:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800270a:	4665      	mov	r5, ip
 800270c:	4626      	mov	r6, r4
 800270e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002710:	6028      	str	r0, [r5, #0]
 8002712:	6069      	str	r1, [r5, #4]
 8002714:	60aa      	str	r2, [r5, #8]
 8002716:	60eb      	str	r3, [r5, #12]
 8002718:	3410      	adds	r4, #16
 800271a:	f10c 0c10 	add.w	ip, ip, #16
 800271e:	4574      	cmp	r4, lr
 8002720:	d1f3      	bne.n	800270a <SendWebPage+0x1b2>
 8002722:	4665      	mov	r5, ip
 8002724:	4623      	mov	r3, r4
 8002726:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002728:	6028      	str	r0, [r5, #0]
 800272a:	6069      	str	r1, [r5, #4]
 800272c:	60aa      	str	r2, [r5, #8]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	81ab      	strh	r3, [r5, #12]
  strcat((char *)http, (char *)"<input type=\"range\" name=\"range2\" min=\"0.3\" max=\"2\" step=\"0.1\" oninput=\"this.nextElementSibling.value = this.value\"><output>1</output>");
 8002732:	4858      	ldr	r0, [pc, #352]	@ (8002894 <SendWebPage+0x33c>)
 8002734:	f7fd fd4c 	bl	80001d0 <strlen>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	4b55      	ldr	r3, [pc, #340]	@ (8002894 <SendWebPage+0x33c>)
 800273e:	4413      	add	r3, r2
 8002740:	4a60      	ldr	r2, [pc, #384]	@ (80028c4 <SendWebPage+0x36c>)
 8002742:	4618      	mov	r0, r3
 8002744:	4611      	mov	r1, r2
 8002746:	2387      	movs	r3, #135	@ 0x87
 8002748:	461a      	mov	r2, r3
 800274a:	f006 feac 	bl	80094a6 <memcpy>
  // Direction Input
  strcat((char *)http, (char *)"<p>Select direction: </p>");
 800274e:	4851      	ldr	r0, [pc, #324]	@ (8002894 <SendWebPage+0x33c>)
 8002750:	f7fd fd3e 	bl	80001d0 <strlen>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <SendWebPage+0x33c>)
 800275a:	4413      	add	r3, r2
 800275c:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <SendWebPage+0x370>)
 800275e:	461d      	mov	r5, r3
 8002760:	4614      	mov	r4, r2
 8002762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002764:	6028      	str	r0, [r5, #0]
 8002766:	6069      	str	r1, [r5, #4]
 8002768:	60aa      	str	r2, [r5, #8]
 800276a:	60eb      	str	r3, [r5, #12]
 800276c:	cc03      	ldmia	r4!, {r0, r1}
 800276e:	6128      	str	r0, [r5, #16]
 8002770:	6169      	str	r1, [r5, #20]
 8002772:	8823      	ldrh	r3, [r4, #0]
 8002774:	832b      	strh	r3, [r5, #24]
  switch (MoveDir) {
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2b03      	cmp	r3, #3
 800277a:	f200 8212 	bhi.w	8002ba2 <SendWebPage+0x64a>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <SendWebPage+0x22c>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	080028dd 	.word	0x080028dd
 800278c:	080029cf 	.word	0x080029cf
 8002790:	08002ac9 	.word	0x08002ac9
  	// Forward
	case 0:
		strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>Forward");
 8002794:	483f      	ldr	r0, [pc, #252]	@ (8002894 <SendWebPage+0x33c>)
 8002796:	f7fd fd1b 	bl	80001d0 <strlen>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <SendWebPage+0x33c>)
 80027a0:	4413      	add	r3, r2
 80027a2:	4a4a      	ldr	r2, [pc, #296]	@ (80028cc <SendWebPage+0x374>)
 80027a4:	4614      	mov	r4, r2
 80027a6:	469c      	mov	ip, r3
 80027a8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80027ac:	4665      	mov	r5, ip
 80027ae:	4626      	mov	r6, r4
 80027b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027b2:	6028      	str	r0, [r5, #0]
 80027b4:	6069      	str	r1, [r5, #4]
 80027b6:	60aa      	str	r2, [r5, #8]
 80027b8:	60eb      	str	r3, [r5, #12]
 80027ba:	3410      	adds	r4, #16
 80027bc:	f10c 0c10 	add.w	ip, ip, #16
 80027c0:	4574      	cmp	r4, lr
 80027c2:	d1f3      	bne.n	80027ac <SendWebPage+0x254>
 80027c4:	4665      	mov	r5, ip
 80027c6:	4623      	mov	r3, r4
 80027c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027ca:	6028      	str	r0, [r5, #0]
 80027cc:	6069      	str	r1, [r5, #4]
 80027ce:	60aa      	str	r2, [r5, #8]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	81ab      	strh	r3, [r5, #12]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >Backward");
 80027d4:	482f      	ldr	r0, [pc, #188]	@ (8002894 <SendWebPage+0x33c>)
 80027d6:	f7fd fcfb 	bl	80001d0 <strlen>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <SendWebPage+0x33c>)
 80027e0:	4413      	add	r3, r2
 80027e2:	4a3b      	ldr	r2, [pc, #236]	@ (80028d0 <SendWebPage+0x378>)
 80027e4:	4614      	mov	r4, r2
 80027e6:	469c      	mov	ip, r3
 80027e8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80027ec:	4665      	mov	r5, ip
 80027ee:	4626      	mov	r6, r4
 80027f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027f2:	6028      	str	r0, [r5, #0]
 80027f4:	6069      	str	r1, [r5, #4]
 80027f6:	60aa      	str	r2, [r5, #8]
 80027f8:	60eb      	str	r3, [r5, #12]
 80027fa:	3410      	adds	r4, #16
 80027fc:	f10c 0c10 	add.w	ip, ip, #16
 8002800:	4574      	cmp	r4, lr
 8002802:	d1f3      	bne.n	80027ec <SendWebPage+0x294>
 8002804:	4662      	mov	r2, ip
 8002806:	4623      	mov	r3, r4
 8002808:	cb03      	ldmia	r3!, {r0, r1}
 800280a:	6010      	str	r0, [r2, #0]
 800280c:	6051      	str	r1, [r2, #4]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	7213      	strb	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2\" >Turn Left");
 8002812:	4820      	ldr	r0, [pc, #128]	@ (8002894 <SendWebPage+0x33c>)
 8002814:	f7fd fcdc 	bl	80001d0 <strlen>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <SendWebPage+0x33c>)
 800281e:	4413      	add	r3, r2
 8002820:	4a2c      	ldr	r2, [pc, #176]	@ (80028d4 <SendWebPage+0x37c>)
 8002822:	4614      	mov	r4, r2
 8002824:	469c      	mov	ip, r3
 8002826:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800282a:	4665      	mov	r5, ip
 800282c:	4626      	mov	r6, r4
 800282e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002830:	6028      	str	r0, [r5, #0]
 8002832:	6069      	str	r1, [r5, #4]
 8002834:	60aa      	str	r2, [r5, #8]
 8002836:	60eb      	str	r3, [r5, #12]
 8002838:	3410      	adds	r4, #16
 800283a:	f10c 0c10 	add.w	ip, ip, #16
 800283e:	4574      	cmp	r4, lr
 8002840:	d1f3      	bne.n	800282a <SendWebPage+0x2d2>
 8002842:	4662      	mov	r2, ip
 8002844:	4623      	mov	r3, r4
 8002846:	cb03      	ldmia	r3!, {r0, r1}
 8002848:	6010      	str	r0, [r2, #0]
 800284a:	6051      	str	r1, [r2, #4]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	8113      	strh	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"3\" >Turn Right");
 8002850:	4810      	ldr	r0, [pc, #64]	@ (8002894 <SendWebPage+0x33c>)
 8002852:	f7fd fcbd 	bl	80001d0 <strlen>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <SendWebPage+0x33c>)
 800285c:	4413      	add	r3, r2
 800285e:	4a1e      	ldr	r2, [pc, #120]	@ (80028d8 <SendWebPage+0x380>)
 8002860:	4614      	mov	r4, r2
 8002862:	469c      	mov	ip, r3
 8002864:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002868:	4665      	mov	r5, ip
 800286a:	4626      	mov	r6, r4
 800286c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800286e:	6028      	str	r0, [r5, #0]
 8002870:	6069      	str	r1, [r5, #4]
 8002872:	60aa      	str	r2, [r5, #8]
 8002874:	60eb      	str	r3, [r5, #12]
 8002876:	3410      	adds	r4, #16
 8002878:	f10c 0c10 	add.w	ip, ip, #16
 800287c:	4574      	cmp	r4, lr
 800287e:	d1f3      	bne.n	8002868 <SendWebPage+0x310>
 8002880:	4662      	mov	r2, ip
 8002882:	4623      	mov	r3, r4
 8002884:	cb03      	ldmia	r3!, {r0, r1}
 8002886:	6010      	str	r0, [r2, #0]
 8002888:	6051      	str	r1, [r2, #4]
 800288a:	8819      	ldrh	r1, [r3, #0]
 800288c:	789b      	ldrb	r3, [r3, #2]
 800288e:	8111      	strh	r1, [r2, #8]
 8002890:	7293      	strb	r3, [r2, #10]
		break;
 8002892:	e186      	b.n	8002ba2 <SendWebPage+0x64a>
 8002894:	2000011c 	.word	0x2000011c
 8002898:	0800b4c0 	.word	0x0800b4c0
 800289c:	0800b500 	.word	0x0800b500
 80028a0:	0800b514 	.word	0x0800b514
 80028a4:	0800b538 	.word	0x0800b538
 80028a8:	0800b554 	.word	0x0800b554
 80028ac:	0800b564 	.word	0x0800b564
 80028b0:	0800b448 	.word	0x0800b448
 80028b4:	0800b5a4 	.word	0x0800b5a4
 80028b8:	0800b5b8 	.word	0x0800b5b8
 80028bc:	0800b5f8 	.word	0x0800b5f8
 80028c0:	0800b680 	.word	0x0800b680
 80028c4:	0800b6c0 	.word	0x0800b6c0
 80028c8:	0800b748 	.word	0x0800b748
 80028cc:	0800b764 	.word	0x0800b764
 80028d0:	0800b7a4 	.word	0x0800b7a4
 80028d4:	0800b7e0 	.word	0x0800b7e0
 80028d8:	0800b81c 	.word	0x0800b81c
	// Backwards
	case 1:
		strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >Forward");
 80028dc:	4873      	ldr	r0, [pc, #460]	@ (8002aac <SendWebPage+0x554>)
 80028de:	f7fd fc77 	bl	80001d0 <strlen>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b71      	ldr	r3, [pc, #452]	@ (8002aac <SendWebPage+0x554>)
 80028e8:	4413      	add	r3, r2
 80028ea:	4a71      	ldr	r2, [pc, #452]	@ (8002ab0 <SendWebPage+0x558>)
 80028ec:	4614      	mov	r4, r2
 80028ee:	469c      	mov	ip, r3
 80028f0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80028f4:	4665      	mov	r5, ip
 80028f6:	4626      	mov	r6, r4
 80028f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028fa:	6028      	str	r0, [r5, #0]
 80028fc:	6069      	str	r1, [r5, #4]
 80028fe:	60aa      	str	r2, [r5, #8]
 8002900:	60eb      	str	r3, [r5, #12]
 8002902:	3410      	adds	r4, #16
 8002904:	f10c 0c10 	add.w	ip, ip, #16
 8002908:	4574      	cmp	r4, lr
 800290a:	d1f3      	bne.n	80028f4 <SendWebPage+0x39c>
 800290c:	4663      	mov	r3, ip
 800290e:	4622      	mov	r2, r4
 8002910:	6810      	ldr	r0, [r2, #0]
 8002912:	6018      	str	r0, [r3, #0]
 8002914:	8891      	ldrh	r1, [r2, #4]
 8002916:	7992      	ldrb	r2, [r2, #6]
 8002918:	8099      	strh	r1, [r3, #4]
 800291a:	719a      	strb	r2, [r3, #6]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>Backward");
 800291c:	4863      	ldr	r0, [pc, #396]	@ (8002aac <SendWebPage+0x554>)
 800291e:	f7fd fc57 	bl	80001d0 <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b61      	ldr	r3, [pc, #388]	@ (8002aac <SendWebPage+0x554>)
 8002928:	4413      	add	r3, r2
 800292a:	4a62      	ldr	r2, [pc, #392]	@ (8002ab4 <SendWebPage+0x55c>)
 800292c:	4614      	mov	r4, r2
 800292e:	469c      	mov	ip, r3
 8002930:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8002934:	4665      	mov	r5, ip
 8002936:	4626      	mov	r6, r4
 8002938:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800293a:	6028      	str	r0, [r5, #0]
 800293c:	6069      	str	r1, [r5, #4]
 800293e:	60aa      	str	r2, [r5, #8]
 8002940:	60eb      	str	r3, [r5, #12]
 8002942:	3410      	adds	r4, #16
 8002944:	f10c 0c10 	add.w	ip, ip, #16
 8002948:	4574      	cmp	r4, lr
 800294a:	d1f3      	bne.n	8002934 <SendWebPage+0x3dc>
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2\" >Turn Left");
 800294c:	4857      	ldr	r0, [pc, #348]	@ (8002aac <SendWebPage+0x554>)
 800294e:	f7fd fc3f 	bl	80001d0 <strlen>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	4b55      	ldr	r3, [pc, #340]	@ (8002aac <SendWebPage+0x554>)
 8002958:	4413      	add	r3, r2
 800295a:	4a57      	ldr	r2, [pc, #348]	@ (8002ab8 <SendWebPage+0x560>)
 800295c:	4614      	mov	r4, r2
 800295e:	469c      	mov	ip, r3
 8002960:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002964:	4665      	mov	r5, ip
 8002966:	4626      	mov	r6, r4
 8002968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800296a:	6028      	str	r0, [r5, #0]
 800296c:	6069      	str	r1, [r5, #4]
 800296e:	60aa      	str	r2, [r5, #8]
 8002970:	60eb      	str	r3, [r5, #12]
 8002972:	3410      	adds	r4, #16
 8002974:	f10c 0c10 	add.w	ip, ip, #16
 8002978:	4574      	cmp	r4, lr
 800297a:	d1f3      	bne.n	8002964 <SendWebPage+0x40c>
 800297c:	4662      	mov	r2, ip
 800297e:	4623      	mov	r3, r4
 8002980:	cb03      	ldmia	r3!, {r0, r1}
 8002982:	6010      	str	r0, [r2, #0]
 8002984:	6051      	str	r1, [r2, #4]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	8113      	strh	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"3\" >Turn Right");
 800298a:	4848      	ldr	r0, [pc, #288]	@ (8002aac <SendWebPage+0x554>)
 800298c:	f7fd fc20 	bl	80001d0 <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b45      	ldr	r3, [pc, #276]	@ (8002aac <SendWebPage+0x554>)
 8002996:	4413      	add	r3, r2
 8002998:	4a48      	ldr	r2, [pc, #288]	@ (8002abc <SendWebPage+0x564>)
 800299a:	4614      	mov	r4, r2
 800299c:	469c      	mov	ip, r3
 800299e:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80029a2:	4665      	mov	r5, ip
 80029a4:	4626      	mov	r6, r4
 80029a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029a8:	6028      	str	r0, [r5, #0]
 80029aa:	6069      	str	r1, [r5, #4]
 80029ac:	60aa      	str	r2, [r5, #8]
 80029ae:	60eb      	str	r3, [r5, #12]
 80029b0:	3410      	adds	r4, #16
 80029b2:	f10c 0c10 	add.w	ip, ip, #16
 80029b6:	4574      	cmp	r4, lr
 80029b8:	d1f3      	bne.n	80029a2 <SendWebPage+0x44a>
 80029ba:	4662      	mov	r2, ip
 80029bc:	4623      	mov	r3, r4
 80029be:	cb03      	ldmia	r3!, {r0, r1}
 80029c0:	6010      	str	r0, [r2, #0]
 80029c2:	6051      	str	r1, [r2, #4]
 80029c4:	8819      	ldrh	r1, [r3, #0]
 80029c6:	789b      	ldrb	r3, [r3, #2]
 80029c8:	8111      	strh	r1, [r2, #8]
 80029ca:	7293      	strb	r3, [r2, #10]
		break;
 80029cc:	e0e9      	b.n	8002ba2 <SendWebPage+0x64a>
	// Left
	case 2:
		strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >Forward");
 80029ce:	4837      	ldr	r0, [pc, #220]	@ (8002aac <SendWebPage+0x554>)
 80029d0:	f7fd fbfe 	bl	80001d0 <strlen>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <SendWebPage+0x554>)
 80029da:	4413      	add	r3, r2
 80029dc:	4a34      	ldr	r2, [pc, #208]	@ (8002ab0 <SendWebPage+0x558>)
 80029de:	4614      	mov	r4, r2
 80029e0:	469c      	mov	ip, r3
 80029e2:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80029e6:	4665      	mov	r5, ip
 80029e8:	4626      	mov	r6, r4
 80029ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029ec:	6028      	str	r0, [r5, #0]
 80029ee:	6069      	str	r1, [r5, #4]
 80029f0:	60aa      	str	r2, [r5, #8]
 80029f2:	60eb      	str	r3, [r5, #12]
 80029f4:	3410      	adds	r4, #16
 80029f6:	f10c 0c10 	add.w	ip, ip, #16
 80029fa:	4574      	cmp	r4, lr
 80029fc:	d1f3      	bne.n	80029e6 <SendWebPage+0x48e>
 80029fe:	4663      	mov	r3, ip
 8002a00:	4622      	mov	r2, r4
 8002a02:	6810      	ldr	r0, [r2, #0]
 8002a04:	6018      	str	r0, [r3, #0]
 8002a06:	8891      	ldrh	r1, [r2, #4]
 8002a08:	7992      	ldrb	r2, [r2, #6]
 8002a0a:	8099      	strh	r1, [r3, #4]
 8002a0c:	719a      	strb	r2, [r3, #6]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >Backward");
 8002a0e:	4827      	ldr	r0, [pc, #156]	@ (8002aac <SendWebPage+0x554>)
 8002a10:	f7fd fbde 	bl	80001d0 <strlen>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <SendWebPage+0x554>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <SendWebPage+0x568>)
 8002a1e:	4614      	mov	r4, r2
 8002a20:	469c      	mov	ip, r3
 8002a22:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002a26:	4665      	mov	r5, ip
 8002a28:	4626      	mov	r6, r4
 8002a2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a2c:	6028      	str	r0, [r5, #0]
 8002a2e:	6069      	str	r1, [r5, #4]
 8002a30:	60aa      	str	r2, [r5, #8]
 8002a32:	60eb      	str	r3, [r5, #12]
 8002a34:	3410      	adds	r4, #16
 8002a36:	f10c 0c10 	add.w	ip, ip, #16
 8002a3a:	4574      	cmp	r4, lr
 8002a3c:	d1f3      	bne.n	8002a26 <SendWebPage+0x4ce>
 8002a3e:	4662      	mov	r2, ip
 8002a40:	4623      	mov	r3, r4
 8002a42:	cb03      	ldmia	r3!, {r0, r1}
 8002a44:	6010      	str	r0, [r2, #0]
 8002a46:	6051      	str	r1, [r2, #4]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	7213      	strb	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2\" checked>Turn Left");
 8002a4c:	4817      	ldr	r0, [pc, #92]	@ (8002aac <SendWebPage+0x554>)
 8002a4e:	f7fd fbbf 	bl	80001d0 <strlen>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <SendWebPage+0x554>)
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac4 <SendWebPage+0x56c>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4611      	mov	r1, r2
 8002a60:	2341      	movs	r3, #65	@ 0x41
 8002a62:	461a      	mov	r2, r3
 8002a64:	f006 fd1f 	bl	80094a6 <memcpy>
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"3\" >Turn Right");
 8002a68:	4810      	ldr	r0, [pc, #64]	@ (8002aac <SendWebPage+0x554>)
 8002a6a:	f7fd fbb1 	bl	80001d0 <strlen>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <SendWebPage+0x554>)
 8002a74:	4413      	add	r3, r2
 8002a76:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <SendWebPage+0x564>)
 8002a78:	4614      	mov	r4, r2
 8002a7a:	469c      	mov	ip, r3
 8002a7c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002a80:	4665      	mov	r5, ip
 8002a82:	4626      	mov	r6, r4
 8002a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a86:	6028      	str	r0, [r5, #0]
 8002a88:	6069      	str	r1, [r5, #4]
 8002a8a:	60aa      	str	r2, [r5, #8]
 8002a8c:	60eb      	str	r3, [r5, #12]
 8002a8e:	3410      	adds	r4, #16
 8002a90:	f10c 0c10 	add.w	ip, ip, #16
 8002a94:	4574      	cmp	r4, lr
 8002a96:	d1f3      	bne.n	8002a80 <SendWebPage+0x528>
 8002a98:	4662      	mov	r2, ip
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	cb03      	ldmia	r3!, {r0, r1}
 8002a9e:	6010      	str	r0, [r2, #0]
 8002aa0:	6051      	str	r1, [r2, #4]
 8002aa2:	8819      	ldrh	r1, [r3, #0]
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	8111      	strh	r1, [r2, #8]
 8002aa8:	7293      	strb	r3, [r2, #10]
		break;
 8002aaa:	e07a      	b.n	8002ba2 <SendWebPage+0x64a>
 8002aac:	2000011c 	.word	0x2000011c
 8002ab0:	0800b858 	.word	0x0800b858
 8002ab4:	0800b890 	.word	0x0800b890
 8002ab8:	0800b7e0 	.word	0x0800b7e0
 8002abc:	0800b81c 	.word	0x0800b81c
 8002ac0:	0800b7a4 	.word	0x0800b7a4
 8002ac4:	0800b8d0 	.word	0x0800b8d0
	// Right
	case 3:
		strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >Forward");
 8002ac8:	485f      	ldr	r0, [pc, #380]	@ (8002c48 <SendWebPage+0x6f0>)
 8002aca:	f7fd fb81 	bl	80001d0 <strlen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <SendWebPage+0x6f0>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c4c <SendWebPage+0x6f4>)
 8002ad8:	4614      	mov	r4, r2
 8002ada:	469c      	mov	ip, r3
 8002adc:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002ae0:	4665      	mov	r5, ip
 8002ae2:	4626      	mov	r6, r4
 8002ae4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ae6:	6028      	str	r0, [r5, #0]
 8002ae8:	6069      	str	r1, [r5, #4]
 8002aea:	60aa      	str	r2, [r5, #8]
 8002aec:	60eb      	str	r3, [r5, #12]
 8002aee:	3410      	adds	r4, #16
 8002af0:	f10c 0c10 	add.w	ip, ip, #16
 8002af4:	4574      	cmp	r4, lr
 8002af6:	d1f3      	bne.n	8002ae0 <SendWebPage+0x588>
 8002af8:	4663      	mov	r3, ip
 8002afa:	4622      	mov	r2, r4
 8002afc:	6810      	ldr	r0, [r2, #0]
 8002afe:	6018      	str	r0, [r3, #0]
 8002b00:	8891      	ldrh	r1, [r2, #4]
 8002b02:	7992      	ldrb	r2, [r2, #6]
 8002b04:	8099      	strh	r1, [r3, #4]
 8002b06:	719a      	strb	r2, [r3, #6]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >Backward");
 8002b08:	484f      	ldr	r0, [pc, #316]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b0a:	f7fd fb61 	bl	80001d0 <strlen>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b14:	4413      	add	r3, r2
 8002b16:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <SendWebPage+0x6f8>)
 8002b18:	4614      	mov	r4, r2
 8002b1a:	469c      	mov	ip, r3
 8002b1c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002b20:	4665      	mov	r5, ip
 8002b22:	4626      	mov	r6, r4
 8002b24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b26:	6028      	str	r0, [r5, #0]
 8002b28:	6069      	str	r1, [r5, #4]
 8002b2a:	60aa      	str	r2, [r5, #8]
 8002b2c:	60eb      	str	r3, [r5, #12]
 8002b2e:	3410      	adds	r4, #16
 8002b30:	f10c 0c10 	add.w	ip, ip, #16
 8002b34:	4574      	cmp	r4, lr
 8002b36:	d1f3      	bne.n	8002b20 <SendWebPage+0x5c8>
 8002b38:	4662      	mov	r2, ip
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	cb03      	ldmia	r3!, {r0, r1}
 8002b3e:	6010      	str	r0, [r2, #0]
 8002b40:	6051      	str	r1, [r2, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	7213      	strb	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2\" >Turn Left");
 8002b46:	4840      	ldr	r0, [pc, #256]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b48:	f7fd fb42 	bl	80001d0 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b3d      	ldr	r3, [pc, #244]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b52:	4413      	add	r3, r2
 8002b54:	4a3f      	ldr	r2, [pc, #252]	@ (8002c54 <SendWebPage+0x6fc>)
 8002b56:	4614      	mov	r4, r2
 8002b58:	469c      	mov	ip, r3
 8002b5a:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002b5e:	4665      	mov	r5, ip
 8002b60:	4626      	mov	r6, r4
 8002b62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b64:	6028      	str	r0, [r5, #0]
 8002b66:	6069      	str	r1, [r5, #4]
 8002b68:	60aa      	str	r2, [r5, #8]
 8002b6a:	60eb      	str	r3, [r5, #12]
 8002b6c:	3410      	adds	r4, #16
 8002b6e:	f10c 0c10 	add.w	ip, ip, #16
 8002b72:	4574      	cmp	r4, lr
 8002b74:	d1f3      	bne.n	8002b5e <SendWebPage+0x606>
 8002b76:	4662      	mov	r2, ip
 8002b78:	4623      	mov	r3, r4
 8002b7a:	cb03      	ldmia	r3!, {r0, r1}
 8002b7c:	6010      	str	r0, [r2, #0]
 8002b7e:	6051      	str	r1, [r2, #4]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	8113      	strh	r3, [r2, #8]
		strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"3\" checked>Turn Right");
 8002b84:	4830      	ldr	r0, [pc, #192]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b86:	f7fd fb23 	bl	80001d0 <strlen>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <SendWebPage+0x6f0>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4a31      	ldr	r2, [pc, #196]	@ (8002c58 <SendWebPage+0x700>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	4611      	mov	r1, r2
 8002b98:	2342      	movs	r3, #66	@ 0x42
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f006 fc83 	bl	80094a6 <memcpy>
		break;
 8002ba0:	bf00      	nop
  }



  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8002ba2:	4829      	ldr	r0, [pc, #164]	@ (8002c48 <SendWebPage+0x6f0>)
 8002ba4:	f7fd fb14 	bl	80001d0 <strlen>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b26      	ldr	r3, [pc, #152]	@ (8002c48 <SendWebPage+0x6f0>)
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c5c <SendWebPage+0x704>)
 8002bb2:	4614      	mov	r4, r2
 8002bb4:	469c      	mov	ip, r3
 8002bb6:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8002bba:	4665      	mov	r5, ip
 8002bbc:	4626      	mov	r6, r4
 8002bbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bc0:	6028      	str	r0, [r5, #0]
 8002bc2:	6069      	str	r1, [r5, #4]
 8002bc4:	60aa      	str	r2, [r5, #8]
 8002bc6:	60eb      	str	r3, [r5, #12]
 8002bc8:	3410      	adds	r4, #16
 8002bca:	f10c 0c10 	add.w	ip, ip, #16
 8002bce:	4574      	cmp	r4, lr
 8002bd0:	d1f3      	bne.n	8002bba <SendWebPage+0x662>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8002bd2:	481d      	ldr	r0, [pc, #116]	@ (8002c48 <SendWebPage+0x6f0>)
 8002bd4:	f7fd fafc 	bl	80001d0 <strlen>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <SendWebPage+0x6f0>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <SendWebPage+0x708>)
 8002be2:	461d      	mov	r5, r3
 8002be4:	4614      	mov	r4, r2
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	6028      	str	r0, [r5, #0]
 8002bea:	6069      	str	r1, [r5, #4]
 8002bec:	60aa      	str	r2, [r5, #8]
 8002bee:	60eb      	str	r3, [r5, #12]
 8002bf0:	8823      	ldrh	r3, [r4, #0]
 8002bf2:	78a2      	ldrb	r2, [r4, #2]
 8002bf4:	822b      	strh	r3, [r5, #16]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8002bfa:	4813      	ldr	r0, [pc, #76]	@ (8002c48 <SendWebPage+0x6f0>)
 8002bfc:	f7fd fae8 	bl	80001d0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f107 030a 	add.w	r3, r7, #10
 8002c08:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002c0c:	9100      	str	r1, [sp, #0]
 8002c0e:	490e      	ldr	r1, [pc, #56]	@ (8002c48 <SendWebPage+0x6f0>)
 8002c10:	2000      	movs	r0, #0
 8002c12:	f000 fc27 	bl	8003464 <WIFI_SendData>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8002c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <SendWebPage+0x6e2>
 8002c24:	897b      	ldrh	r3, [r7, #10]
 8002c26:	461c      	mov	r4, r3
 8002c28:	4807      	ldr	r0, [pc, #28]	@ (8002c48 <SendWebPage+0x6f0>)
 8002c2a:	f7fd fad1 	bl	80001d0 <strlen>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	429c      	cmp	r4, r3
 8002c32:	d002      	beq.n	8002c3a <SendWebPage+0x6e2>
  {
    ret = WIFI_STATUS_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return ret;
 8002c3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3744      	adds	r7, #68	@ 0x44
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000011c 	.word	0x2000011c
 8002c4c:	0800b858 	.word	0x0800b858
 8002c50:	0800b7a4 	.word	0x0800b7a4
 8002c54:	0800b7e0 	.word	0x0800b7e0
 8002c58:	0800b914 	.word	0x0800b914
 8002c5c:	0800b958 	.word	0x0800b958
 8002c60:	0800b988 	.word	0x0800b988

08002c64 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b096      	sub	sp, #88	@ 0x58
 8002c68:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c72:	2360      	movs	r3, #96	@ 0x60
 8002c74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002c86:	2328      	movs	r3, #40	@ 0x28
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c92:	2304      	movs	r3, #4
 8002c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c96:	463b      	mov	r3, r7
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f86d 	bl	8004d78 <HAL_RCC_OscConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002ca8:	230f      	movs	r3, #15
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cac:	2303      	movs	r3, #3
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 fc40 	bl	8005548 <HAL_RCC_ClockConfig>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <SystemClock_Config+0x6a>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3758      	adds	r7, #88	@ 0x58
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	@ 0x28
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cee:	463b      	mov	r3, r7
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	615a      	str	r2, [r3, #20]
 8002cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d0a:	224f      	movs	r2, #79	@ 0x4f
 8002d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d14:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d16:	2263      	movs	r2, #99	@ 0x63
 8002d18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d20:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d26:	4814      	ldr	r0, [pc, #80]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d28:	f004 fc9d 	bl	8007666 <HAL_TIM_PWM_Init>
  {
    //Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480f      	ldr	r0, [pc, #60]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d3c:	f005 fa96 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
  {
    //Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d40:	2360      	movs	r3, #96	@ 0x60
 8002d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 80-1;
 8002d44:	234f      	movs	r3, #79	@ 0x4f
 8002d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d58:	f004 fde2 	bl	8007920 <HAL_TIM_PWM_ConfigChannel>
  {
    //Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d64:	f004 fddc 	bl	8007920 <HAL_TIM_PWM_ConfigChannel>
    //Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d68:	4803      	ldr	r0, [pc, #12]	@ (8002d78 <MX_TIM2_Init+0x9c>)
 8002d6a:	f000 f8ed 	bl	8002f48 <HAL_TIM_MspPostInit>

}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	@ 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000524 	.word	0x20000524

08002d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d9e:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	4b2d      	ldr	r3, [pc, #180]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	4a2c      	ldr	r2, [pc, #176]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc2:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	4a26      	ldr	r2, [pc, #152]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dce:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <MX_GPIO_Init+0xe4>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f248 010c 	movw	r1, #32780	@ 0x800c
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de4:	f001 fa22 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2111      	movs	r1, #17
 8002dec:	481d      	ldr	r0, [pc, #116]	@ (8002e64 <MX_GPIO_Init+0xe8>)
 8002dee:	f001 fa1d 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002df8:	481b      	ldr	r0, [pc, #108]	@ (8002e68 <MX_GPIO_Init+0xec>)
 8002dfa:	f001 fa17 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002dfe:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e1a:	f001 f845 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002e1e:	2311      	movs	r3, #17
 8002e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	4619      	mov	r1, r3
 8002e34:	480b      	ldr	r0, [pc, #44]	@ (8002e64 <MX_GPIO_Init+0xe8>)
 8002e36:	f001 f837 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <MX_GPIO_Init+0xec>)
 8002e54:	f001 f828 	bl	8003ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	48000400 	.word	0x48000400
 8002e68:	48000c00 	.word	0x48000c00

08002e6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002e74:	1d39      	adds	r1, r7, #4
 8002e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4803      	ldr	r0, [pc, #12]	@ (8002e8c <__io_putchar+0x20>)
 8002e7e:	f005 fad5 	bl	800842c <HAL_UART_Transmit>

  return ch;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200012c0 	.word	0x200012c0

08002e90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002ea0:	f7ff f80a 	bl	8001eb8 <SPI_WIFI_ISR>
      break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8002ea6:	bf00      	nop
    }
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002eb4:	4802      	ldr	r0, [pc, #8]	@ (8002ec0 <SPI3_IRQHandler+0x10>)
 8002eb6:	f003 fd67 	bl	8006988 <HAL_SPI_IRQHandler>
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000a8 	.word	0x200000a8

08002ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	4a0e      	ldr	r2, [pc, #56]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000

08002f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1c:	d10b      	bne.n	8002f36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x38>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x38>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x38>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d11d      	bne.n	8002fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a10      	ldr	r2, [pc, #64]	@ (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002f82:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa2:	f000 ff81 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <HardFault_Handler+0x4>

08002fca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <MemManage_Handler+0x4>

08002fd2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <BusFault_Handler+0x4>

08002fda <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <UsageFault_Handler+0x4>

08002fe2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003010:	f000 fdb4 	bl	8003b7c <HAL_IncTick>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800301c:	2002      	movs	r0, #2
 800301e:	f001 f91d 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}

08003026 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
	return 1;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <_kill>:

int _kill(int pid, int sig)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003040:	f006 fa04 	bl	800944c <__errno>
 8003044:	4603      	mov	r3, r0
 8003046:	2216      	movs	r2, #22
 8003048:	601a      	str	r2, [r3, #0]
	return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_exit>:

void _exit (int status)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800305e:	f04f 31ff 	mov.w	r1, #4294967295
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffe7 	bl	8003036 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <_exit+0x12>

0800306c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e00a      	b.n	8003094 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800307e:	f3af 8000 	nop.w
 8003082:	4601      	mov	r1, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	b2ca      	uxtb	r2, r1
 800308c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3301      	adds	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbf0      	blt.n	800307e <_read+0x12>
	}

return len;
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e009      	b.n	80030cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fed3 	bl	8002e6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dbf1      	blt.n	80030b8 <_write+0x12>
	}
	return len;
 80030d4:	687b      	ldr	r3, [r7, #4]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_close>:

int _close(int file)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	return -1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003106:	605a      	str	r2, [r3, #4]
	return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <_isatty>:

int _isatty(int file)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
	return 1;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
	return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003150:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <_sbrk+0x5c>)
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <_sbrk+0x60>)
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <_sbrk+0x64>)
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <_sbrk+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d207      	bcs.n	8003188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003178:	f006 f968 	bl	800944c <__errno>
 800317c:	4603      	mov	r3, r0
 800317e:	220c      	movs	r2, #12
 8003180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e009      	b.n	800319c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003188:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <_sbrk+0x64>)
 8003198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20018000 	.word	0x20018000
 80031a8:	00000400 	.word	0x00000400
 80031ac:	20000970 	.word	0x20000970
 80031b0:	20001498 	.word	0x20001498

080031b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b8:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <SystemInit+0x64>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <SystemInit+0x64>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <SystemInit+0x68>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <SystemInit+0x68>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <SystemInit+0x68>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <SystemInit+0x68>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0f      	ldr	r2, [pc, #60]	@ (800321c <SystemInit+0x68>)
 80031e0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80031e4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80031e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <SystemInit+0x68>)
 80031ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <SystemInit+0x68>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a09      	ldr	r2, [pc, #36]	@ (800321c <SystemInit+0x68>)
 80031f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <SystemInit+0x68>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <SystemInit+0x64>)
 8003206:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800320a:	609a      	str	r2, [r3, #8]
#endif
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00
 800321c:	40021000 	.word	0x40021000

08003220 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <WIFI_Init+0x40>)
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <WIFI_Init+0x44>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <WIFI_Init+0x48>)
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <WIFI_Init+0x4c>)
 8003236:	490e      	ldr	r1, [pc, #56]	@ (8003270 <WIFI_Init+0x50>)
 8003238:	480e      	ldr	r0, [pc, #56]	@ (8003274 <WIFI_Init+0x54>)
 800323a:	f7fd fd79 	bl	8000d30 <ES_WIFI_RegisterBusIO>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003244:	480b      	ldr	r0, [pc, #44]	@ (8003274 <WIFI_Init+0x54>)
 8003246:	f7fd fd45 	bl	8000cd4 <ES_WIFI_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003254:	79fb      	ldrb	r3, [r7, #7]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	08001bdd 	.word	0x08001bdd
 8003264:	08001cd1 	.word	0x08001cd1
 8003268:	08001dad 	.word	0x08001dad
 800326c:	08001ac5 	.word	0x08001ac5
 8003270:	08001929 	.word	0x08001929
 8003274:	20000974 	.word	0x20000974

08003278 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	68f9      	ldr	r1, [r7, #12]
 8003290:	4809      	ldr	r0, [pc, #36]	@ (80032b8 <WIFI_Connect+0x40>)
 8003292:	f7fd fd81 	bl	8000d98 <ES_WIFI_Connect>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800329c:	4806      	ldr	r0, [pc, #24]	@ (80032b8 <WIFI_Connect+0x40>)
 800329e:	f7fd fe1f 	bl	8000ee0 <ES_WIFI_GetNetworkSettings>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000974 	.word	0x20000974

080032bc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4806      	ldr	r0, [pc, #24]	@ (80032e4 <WIFI_GetMAC_Address+0x28>)
 80032cc:	f7fd fe32 	bl	8000f34 <ES_WIFI_GetMACAddress>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000974 	.word	0x20000974

080032e8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80032f4:	4809      	ldr	r0, [pc, #36]	@ (800331c <WIFI_GetIP_Address+0x34>)
 80032f6:	f7fd fdc7 	bl	8000e88 <ES_WIFI_IsConnected>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d107      	bne.n	8003310 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <WIFI_GetIP_Address+0x34>)
 8003302:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000974 	.word	0x20000974

08003320 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	72fb      	strb	r3, [r7, #11]
 800332e:	4613      	mov	r3, r2
 8003330:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 800333e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003340:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4619      	mov	r1, r3
 800335e:	4807      	ldr	r0, [pc, #28]	@ (800337c <WIFI_StartServer+0x5c>)
 8003360:	f7fd fe1a 	bl	8000f98 <ES_WIFI_StartServerSingleConn>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	@ 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000974 	.word	0x20000974

08003380 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	461a      	mov	r2, r3
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	4819      	ldr	r0, [pc, #100]	@ (8003404 <WIFI_WaitServerConnection+0x84>)
 800339e:	f7fd fea7 	bl	80010f0 <ES_WIFI_WaitServerConnection>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ES_WIFI_STATUS_OK == ret)
 80033a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <WIFI_WaitServerConnection+0x3c>
 80033b6:	8a7a      	ldrh	r2, [r7, #18]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <WIFI_WaitServerConnection+0x4c>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 80033c2:	f8d7 3016 	ldr.w	r3, [r7, #22]
 80033c6:	461a      	mov	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e014      	b.n	80033fa <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 80033d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d10f      	bne.n	80033f8 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <WIFI_WaitServerConnection+0x64>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 80033ea:	2204      	movs	r2, #4
 80033ec:	2100      	movs	r1, #0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f005 ff38 	bl	8009264 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 80033f4:	2305      	movs	r3, #5
 80033f6:	e000      	b.n	80033fa <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 80033f8:	2301      	movs	r3, #1
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3728      	adds	r7, #40	@ 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000974 	.word	0x20000974

08003408 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4806      	ldr	r0, [pc, #24]	@ (8003430 <WIFI_CloseServerConnection+0x28>)
 8003418:	f7fd ff8c 	bl	8001334 <ES_WIFI_CloseServerConnection>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000974 	.word	0x20000974

08003434 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4619      	mov	r1, r3
 8003444:	4806      	ldr	r0, [pc, #24]	@ (8003460 <WIFI_StopServer+0x2c>)
 8003446:	f7fd ffd5 	bl	80013f4 <ES_WIFI_StopServerSingleConn>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000974 	.word	0x20000974

08003464 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	4613      	mov	r3, r2
 8003474:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800347a:	89ba      	ldrh	r2, [r7, #12]
 800347c:	7bf9      	ldrb	r1, [r7, #15]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4806      	ldr	r0, [pc, #24]	@ (80034a4 <WIFI_SendData+0x40>)
 800348c:	f7fe f814 	bl	80014b8 <ES_WIFI_SendData>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000974 	.word	0x20000974

080034a8 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	4613      	mov	r3, r2
 80034b8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80034be:	89ba      	ldrh	r2, [r7, #12]
 80034c0:	7bf9      	ldrb	r1, [r7, #15]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	4806      	ldr	r0, [pc, #24]	@ (80034e8 <WIFI_ReceiveData+0x40>)
 80034d0:	f7fe f8ae 	bl	8001630 <ES_WIFI_ReceiveData>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80034de:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000974 	.word	0x20000974

080034ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003524 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f0:	f7ff fe60 	bl	80031b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034f4:	480c      	ldr	r0, [pc, #48]	@ (8003528 <LoopForever+0x6>)
  ldr r1, =_edata
 80034f6:	490d      	ldr	r1, [pc, #52]	@ (800352c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <LoopForever+0xe>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034fc:	e002      	b.n	8003504 <LoopCopyDataInit>

080034fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003502:	3304      	adds	r3, #4

08003504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003508:	d3f9      	bcc.n	80034fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800350c:	4c0a      	ldr	r4, [pc, #40]	@ (8003538 <LoopForever+0x16>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003510:	e001      	b.n	8003516 <LoopFillZerobss>

08003512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003514:	3204      	adds	r2, #4

08003516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003518:	d3fb      	bcc.n	8003512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800351a:	f005 ff9d 	bl	8009458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800351e:	f7fe fcdb 	bl	8001ed8 <main>

08003522 <LoopForever>:

LoopForever:
    b LoopForever
 8003522:	e7fe      	b.n	8003522 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003524:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800352c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003530:	0800bbfc 	.word	0x0800bbfc
  ldr r2, =_sbss
 8003534:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003538:	20001498 	.word	0x20001498

0800353c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800353c:	e7fe      	b.n	800353c <ADC1_2_IRQHandler>
	...

08003540 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <BSP_LED_Init+0x28>
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <BSP_LED_Init+0x58>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	4a10      	ldr	r2, [pc, #64]	@ (8003598 <BSP_LED_Init+0x58>)
 8003556:	f043 0302 	orr.w	r3, r3, #2
 800355a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355c:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <BSP_LED_Init+0x58>)
 800355e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003568:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800356c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800356e:	2301      	movs	r3, #1
 8003570:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003576:	2302      	movs	r3, #2
 8003578:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <BSP_LED_Init+0x5c>)
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	f107 020c 	add.w	r2, r7, #12
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fc8d 	bl	8003ea8 <HAL_GPIO_Init>
}
 800358e:	bf00      	nop
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	20000004 	.word	0x20000004

080035a0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <BSP_COM_Init+0x2a>
 80035b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035be:	4b2a      	ldr	r3, [pc, #168]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <BSP_COM_Init+0x48>
 80035d0:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d4:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035dc:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <BSP_COM_Init+0x66>
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80035fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <BSP_COM_Init+0xc8>)
 80035fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003606:	2340      	movs	r3, #64	@ 0x40
 8003608:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800360e:	2302      	movs	r3, #2
 8003610:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003616:	2307      	movs	r3, #7
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	4a13      	ldr	r2, [pc, #76]	@ (800366c <BSP_COM_Init+0xcc>)
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	f107 0214 	add.w	r2, r7, #20
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fc3d 	bl	8003ea8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003636:	2307      	movs	r3, #7
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	4a0c      	ldr	r2, [pc, #48]	@ (8003670 <BSP_COM_Init+0xd0>)
 800363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003642:	f107 0214 	add.w	r2, r7, #20
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fc2d 	bl	8003ea8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <BSP_COM_Init+0xd4>)
 8003652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800365a:	6838      	ldr	r0, [r7, #0]
 800365c:	f004 fe8e 	bl	800837c <HAL_UART_Init>
}
 8003660:	bf00      	nop
 8003662:	3728      	adds	r7, #40	@ 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	2000000c 	.word	0x2000000c
 8003670:	20000010 	.word	0x20000010
 8003674:	20000008 	.word	0x20000008

08003678 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003680:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <I2Cx_MspInit+0xa8>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	4a26      	ldr	r2, [pc, #152]	@ (8003720 <I2Cx_MspInit+0xa8>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800368c:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <I2Cx_MspInit+0xa8>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003698:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800369c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800369e:	2312      	movs	r3, #18
 80036a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a6:	2303      	movs	r3, #3
 80036a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80036aa:	2304      	movs	r3, #4
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	481b      	ldr	r0, [pc, #108]	@ (8003724 <I2Cx_MspInit+0xac>)
 80036b6:	f000 fbf7 	bl	8003ea8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4818      	ldr	r0, [pc, #96]	@ (8003724 <I2Cx_MspInit+0xac>)
 80036c2:	f000 fbf1 	bl	8003ea8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80036c6:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	4a15      	ldr	r2, [pc, #84]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d2:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036e8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <I2Cx_MspInit+0xa8>)
 80036f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80036f6:	2200      	movs	r2, #0
 80036f8:	210f      	movs	r1, #15
 80036fa:	2021      	movs	r0, #33	@ 0x21
 80036fc:	f000 fb5d 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003700:	2021      	movs	r0, #33	@ 0x21
 8003702:	f000 fb76 	bl	8003df2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	210f      	movs	r1, #15
 800370a:	2022      	movs	r0, #34	@ 0x22
 800370c:	f000 fb55 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003710:	2022      	movs	r0, #34	@ 0x22
 8003712:	f000 fb6e 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	@ 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	48000400 	.word	0x48000400

08003728 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a12      	ldr	r2, [pc, #72]	@ (800377c <I2Cx_Init+0x54>)
 8003734:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <I2Cx_Init+0x58>)
 800373a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff89 	bl	8003678 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fd90 	bl	800428c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800376c:	2100      	movs	r1, #0
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 faa8 	bl	8004cc4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40005800 	.word	0x40005800
 8003780:	00702681 	.word	0x00702681

08003784 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af04      	add	r7, sp, #16
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	72fb      	strb	r3, [r7, #11]
 8003796:	460b      	mov	r3, r1
 8003798:	813b      	strh	r3, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	b299      	uxth	r1, r3
 80037a6:	88f8      	ldrh	r0, [r7, #6]
 80037a8:	893a      	ldrh	r2, [r7, #8]
 80037aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ae:	9302      	str	r3, [sp, #8]
 80037b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4603      	mov	r3, r0
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 ff4c 	bl	8004658 <HAL_I2C_Mem_Read>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	4619      	mov	r1, r3
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f832 	bl	8003838 <I2Cx_Error>
  }
  return status;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	@ 0x28
 80037e2:	af04      	add	r7, sp, #16
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	4608      	mov	r0, r1
 80037e8:	4611      	mov	r1, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	4603      	mov	r3, r0
 80037ee:	72fb      	strb	r3, [r7, #11]
 80037f0:	460b      	mov	r3, r1
 80037f2:	813b      	strh	r3, [r7, #8]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	b299      	uxth	r1, r3
 8003800:	88f8      	ldrh	r0, [r7, #6]
 8003802:	893a      	ldrh	r2, [r7, #8]
 8003804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4603      	mov	r3, r0
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fe0b 	bl	8004430 <HAL_I2C_Mem_Write>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	4619      	mov	r1, r3
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f805 	bl	8003838 <I2Cx_Error>
  }
  return status;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fdb0 	bl	80043aa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ff6c 	bl	8003728 <I2Cx_Init>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800385c:	4802      	ldr	r0, [pc, #8]	@ (8003868 <SENSOR_IO_Init+0x10>)
 800385e:	f7ff ff63 	bl	8003728 <I2Cx_Init>
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20001274 	.word	0x20001274

0800386c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af02      	add	r7, sp, #8
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	460b      	mov	r3, r1
 8003878:	71bb      	strb	r3, [r7, #6]
 800387a:	4613      	mov	r3, r2
 800387c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800387e:	79bb      	ldrb	r3, [r7, #6]
 8003880:	b29a      	uxth	r2, r3
 8003882:	79f9      	ldrb	r1, [r7, #7]
 8003884:	2301      	movs	r3, #1
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	1d7b      	adds	r3, r7, #5
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	4803      	ldr	r0, [pc, #12]	@ (800389c <SENSOR_IO_Write+0x30>)
 8003890:	f7ff ffa5 	bl	80037de <I2Cx_WriteMultiple>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20001274 	.word	0x20001274

080038a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	4603      	mov	r3, r0
 80038a8:	460a      	mov	r2, r1
 80038aa:	71fb      	strb	r3, [r7, #7]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80038b4:	79bb      	ldrb	r3, [r7, #6]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	79f9      	ldrb	r1, [r7, #7]
 80038ba:	2301      	movs	r3, #1
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f107 030f 	add.w	r3, r7, #15
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	4804      	ldr	r0, [pc, #16]	@ (80038d8 <SENSOR_IO_Read+0x38>)
 80038c8:	f7ff ff5c 	bl	8003784 <I2Cx_ReadMultiple>

  return read_value;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20001274 	.word	0x20001274

080038dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	603a      	str	r2, [r7, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	460b      	mov	r3, r1
 80038ec:	71bb      	strb	r3, [r7, #6]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	79f9      	ldrb	r1, [r7, #7]
 80038f8:	88bb      	ldrh	r3, [r7, #4]
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	4804      	ldr	r0, [pc, #16]	@ (8003914 <SENSOR_IO_ReadMultiple+0x38>)
 8003904:	f7ff ff3e 	bl	8003784 <I2Cx_ReadMultiple>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20001274 	.word	0x20001274

08003918 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <BSP_TSENSOR_Init+0x30>)
 8003924:	4a09      	ldr	r2, [pc, #36]	@ (800394c <BSP_TSENSOR_Init+0x34>)
 8003926:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003928:	f7ff ff96 	bl	8003858 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <BSP_TSENSOR_Init+0x30>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	20be      	movs	r0, #190	@ 0xbe
 8003936:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800393c:	79fb      	ldrb	r3, [r7, #7]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20001344 	.word	0x20001344
 800394c:	20000014 	.word	0x20000014

08003950 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <BSP_TSENSOR_ReadTemp+0x18>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	20be      	movs	r0, #190	@ 0xbe
 800395c:	4798      	blx	r3
 800395e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003962:	eeb0 0a67 	vmov.f32	s0, s15
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20001344 	.word	0x20001344

0800396c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2120      	movs	r1, #32
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff8e 	bl	80038a0 <SENSOR_IO_Read>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	f023 0304 	bic.w	r3, r3, #4
 800398e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039ae:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	2120      	movs	r1, #32
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff57 	bl	800386c <SENSOR_IO_Write>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b088      	sub	sp, #32
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	b2d8      	uxtb	r0, r3
 80039d4:	f107 0208 	add.w	r2, r7, #8
 80039d8:	2302      	movs	r3, #2
 80039da:	21b2      	movs	r1, #178	@ 0xb2
 80039dc:	f7ff ff7e 	bl	80038dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2135      	movs	r1, #53	@ 0x35
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff5a 	bl	80038a0 <SENSOR_IO_Read>
 80039ec:	4603      	mov	r3, r0
 80039ee:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80039f0:	7ffb      	ldrb	r3, [r7, #31]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	b21a      	sxth	r2, r3
 80039fc:	7a3b      	ldrb	r3, [r7, #8]
 80039fe:	b21b      	sxth	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	019b      	lsls	r3, r3, #6
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	7a7b      	ldrb	r3, [r7, #9]
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	4313      	orrs	r3, r2
 8003a16:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003a18:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a1c:	10db      	asrs	r3, r3, #3
 8003a1e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003a20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a24:	10db      	asrs	r3, r3, #3
 8003a26:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	b2d8      	uxtb	r0, r3
 8003a2c:	f107 0208 	add.w	r2, r7, #8
 8003a30:	2304      	movs	r3, #4
 8003a32:	21bc      	movs	r1, #188	@ 0xbc
 8003a34:	f7ff ff52 	bl	80038dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	7a3b      	ldrb	r3, [r7, #8]
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	4313      	orrs	r3, r2
 8003a44:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	7abb      	ldrb	r3, [r7, #10]
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4313      	orrs	r3, r2
 8003a52:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	b2d8      	uxtb	r0, r3
 8003a58:	f107 0208 	add.w	r2, r7, #8
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	21aa      	movs	r1, #170	@ 0xaa
 8003a60:	f7ff ff3c 	bl	80038dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003a64:	7a7b      	ldrb	r3, [r7, #9]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	b21a      	sxth	r2, r3
 8003a6a:	7a3b      	ldrb	r3, [r7, #8]
 8003a6c:	b21b      	sxth	r3, r3
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003a72:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003a88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	ee07 3a90 	vmov	s15, r3
}
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ade:	2003      	movs	r0, #3
 8003ae0:	f000 f960 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ae4:	200f      	movs	r0, #15
 8003ae6:	f000 f80d 	bl	8003b04 <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	e001      	b.n	8003afa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003af6:	f7ff f9e5 	bl	8002ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003afa:	79fb      	ldrb	r3, [r7, #7]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b10:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <HAL_InitTick+0x6c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d023      	beq.n	8003b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b18:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HAL_InitTick+0x70>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <HAL_InitTick+0x6c>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f96d 	bl	8003e0e <HAL_SYSTICK_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d809      	bhi.n	8003b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f000 f937 	bl	8003dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <HAL_InitTick+0x74>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e007      	b.n	8003b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	e004      	b.n	8003b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e001      	b.n	8003b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000028 	.word	0x20000028
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000024 	.word	0x20000024

08003b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_IncTick+0x20>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_IncTick+0x24>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <HAL_IncTick+0x24>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000028 	.word	0x20000028
 8003ba0:	20001348 	.word	0x20001348

08003ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <HAL_GetTick+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20001348 	.word	0x20001348

08003bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc4:	f7ff ffee 	bl	8003ba4 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d005      	beq.n	8003be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <HAL_Delay+0x44>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003be2:	bf00      	nop
 8003be4:	f7ff ffde 	bl	8003ba4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d8f7      	bhi.n	8003be4 <HAL_Delay+0x28>
  {
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000028 	.word	0x20000028

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dcc:	f7ff ff3e 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff8e 	bl	8003cf8 <NVIC_EncodePriority>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff31 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffa2 	bl	8003d60 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d005      	beq.n	8003e4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	e029      	b.n	8003e9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 020e 	bic.w	r2, r2, #14
 8003e58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f003 021c 	and.w	r2, r3, #28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
    }
  }
  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb6:	e17f      	b.n	80041b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8171 	beq.w	80041b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_GPIO_Init+0x48>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d007      	beq.n	8003ef0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ee4:	2b11      	cmp	r3, #17
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b12      	cmp	r3, #18
 8003eee:	d130      	bne.n	8003f52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f26:	2201      	movs	r2, #1
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 0201 	and.w	r2, r3, #1
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d118      	bne.n	8003f90 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f64:	2201      	movs	r2, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f003 0201 	and.w	r2, r3, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x128>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b12      	cmp	r3, #18
 8003fce:	d123      	bne.n	8004018 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	08da      	lsrs	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3208      	adds	r2, #8
 8003fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	08da      	lsrs	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3208      	adds	r2, #8
 8004012:	6939      	ldr	r1, [r7, #16]
 8004014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0203 	and.w	r2, r3, #3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80ac 	beq.w	80041b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405a:	4b5f      	ldr	r3, [pc, #380]	@ (80041d8 <HAL_GPIO_Init+0x330>)
 800405c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405e:	4a5e      	ldr	r2, [pc, #376]	@ (80041d8 <HAL_GPIO_Init+0x330>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6613      	str	r3, [r2, #96]	@ 0x60
 8004066:	4b5c      	ldr	r3, [pc, #368]	@ (80041d8 <HAL_GPIO_Init+0x330>)
 8004068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004072:	4a5a      	ldr	r2, [pc, #360]	@ (80041dc <HAL_GPIO_Init+0x334>)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800409c:	d025      	beq.n	80040ea <HAL_GPIO_Init+0x242>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4f      	ldr	r2, [pc, #316]	@ (80041e0 <HAL_GPIO_Init+0x338>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <HAL_GPIO_Init+0x23e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4e      	ldr	r2, [pc, #312]	@ (80041e4 <HAL_GPIO_Init+0x33c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d019      	beq.n	80040e2 <HAL_GPIO_Init+0x23a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4d      	ldr	r2, [pc, #308]	@ (80041e8 <HAL_GPIO_Init+0x340>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_GPIO_Init+0x236>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4c      	ldr	r2, [pc, #304]	@ (80041ec <HAL_GPIO_Init+0x344>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00d      	beq.n	80040da <HAL_GPIO_Init+0x232>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4b      	ldr	r2, [pc, #300]	@ (80041f0 <HAL_GPIO_Init+0x348>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <HAL_GPIO_Init+0x22e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4a      	ldr	r2, [pc, #296]	@ (80041f4 <HAL_GPIO_Init+0x34c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_GPIO_Init+0x22a>
 80040ce:	2306      	movs	r3, #6
 80040d0:	e00c      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040d2:	2307      	movs	r3, #7
 80040d4:	e00a      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040d6:	2305      	movs	r3, #5
 80040d8:	e008      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040da:	2304      	movs	r3, #4
 80040dc:	e006      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040de:	2303      	movs	r3, #3
 80040e0:	e004      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e002      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_GPIO_Init+0x244>
 80040ea:	2300      	movs	r3, #0
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	f002 0203 	and.w	r2, r2, #3
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	4093      	lsls	r3, r2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040fc:	4937      	ldr	r1, [pc, #220]	@ (80041dc <HAL_GPIO_Init+0x334>)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	3302      	adds	r3, #2
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800410a:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800412e:	4a32      	ldr	r2, [pc, #200]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004134:	4b30      	ldr	r3, [pc, #192]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43db      	mvns	r3, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004158:	4a27      	ldr	r2, [pc, #156]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800415e:	4b26      	ldr	r3, [pc, #152]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004182:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004188:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ac:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3301      	adds	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f ae78 	bne.w	8003eb8 <HAL_GPIO_Init+0x10>
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40010000 	.word	0x40010000
 80041e0:	48000400 	.word	0x48000400
 80041e4:	48000800 	.word	0x48000800
 80041e8:	48000c00 	.word	0x48000c00
 80041ec:	48001000 	.word	0x48001000
 80041f0:	48001400 	.word	0x48001400
 80041f4:	48001800 	.word	0x48001800
 80041f8:	40010400 	.word	0x40010400

080041fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	887b      	ldrh	r3, [r7, #2]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e001      	b.n	800421e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
 8004238:	4613      	mov	r3, r2
 800423a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800423c:	787b      	ldrb	r3, [r7, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004248:	e002      	b.n	8004250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fe08 	bl	8002e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e081      	b.n	80043a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8a8 	bl	8004408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	@ 0x24
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	e006      	b.n	8004314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d104      	bne.n	8004326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	ea42 0103 	orr.w	r1, r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e021      	b.n	8004400 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	@ 0x24
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f821 	bl	800441c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 80f9 	bne.w	800464a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_I2C_Mem_Write+0x34>
 800445e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800446a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0ed      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_I2C_Mem_Write+0x4e>
 800447a:	2302      	movs	r3, #2
 800447c:	e0e6      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004486:	f7ff fb8d 	bl	8003ba4 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2319      	movs	r3, #25
 8004492:	2201      	movs	r2, #1
 8004494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fac3 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d1      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2221      	movs	r2, #33	@ 0x21
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d0:	88f8      	ldrh	r0, [r7, #6]
 80044d2:	893a      	ldrh	r2, [r7, #8]
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4603      	mov	r3, r0
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f9d3 	bl	800488c <I2C_RequestMemoryWrite>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0a9      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2bff      	cmp	r3, #255	@ 0xff
 8004500:	d90e      	bls.n	8004520 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	b2da      	uxtb	r2, r3
 800450e:	8979      	ldrh	r1, [r7, #10]
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fba5 	bl	8004c68 <I2C_TransferConfig>
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	b2da      	uxtb	r2, r3
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fb94 	bl	8004c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 faad 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e07b      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d034      	beq.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d130      	bne.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	2200      	movs	r2, #0
 800459e:	2180      	movs	r1, #128	@ 0x80
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa3f 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e04d      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2bff      	cmp	r3, #255	@ 0xff
 80045b8:	d90e      	bls.n	80045d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	@ 0xff
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	8979      	ldrh	r1, [r7, #10]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fb49 	bl	8004c68 <I2C_TransferConfig>
 80045d6:	e00f      	b.n	80045f8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	8979      	ldrh	r1, [r7, #10]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fb38 	bl	8004c68 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d19e      	bne.n	8004540 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fa8c 	bl	8004b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e01a      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <HAL_I2C_Mem_Write+0x224>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800464a:	2302      	movs	r3, #2
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	fe00e800 	.word	0xfe00e800

08004658 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4608      	mov	r0, r1
 8004662:	4611      	mov	r1, r2
 8004664:	461a      	mov	r2, r3
 8004666:	4603      	mov	r3, r0
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	460b      	mov	r3, r1
 800466c:	813b      	strh	r3, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	f040 80fd 	bne.w	800487a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_I2C_Mem_Read+0x34>
 8004686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0f1      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_Mem_Read+0x4e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e0ea      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ae:	f7ff fa79 	bl	8003ba4 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2319      	movs	r3, #25
 80046ba:	2201      	movs	r2, #1
 80046bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f9af 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0d5      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2222      	movs	r2, #34	@ 0x22
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2240      	movs	r2, #64	@ 0x40
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f8:	88f8      	ldrh	r0, [r7, #6]
 80046fa:	893a      	ldrh	r2, [r7, #8]
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4603      	mov	r3, r0
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f913 	bl	8004934 <I2C_RequestMemoryRead>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0ad      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2bff      	cmp	r3, #255	@ 0xff
 8004728:	d90e      	bls.n	8004748 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	@ 0xff
 800472e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	4b52      	ldr	r3, [pc, #328]	@ (8004884 <HAL_I2C_Mem_Read+0x22c>)
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fa91 	bl	8004c68 <I2C_TransferConfig>
 8004746:	e00f      	b.n	8004768 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	4b4a      	ldr	r3, [pc, #296]	@ (8004884 <HAL_I2C_Mem_Read+0x22c>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa80 	bl	8004c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	2104      	movs	r1, #4
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f956 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07c      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d034      	beq.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d130      	bne.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	@ 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f927 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04d      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2bff      	cmp	r3, #255	@ 0xff
 80047e8:	d90e      	bls.n	8004808 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	@ 0xff
 80047ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	8979      	ldrh	r1, [r7, #10]
 80047f8:	2300      	movs	r3, #0
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fa31 	bl	8004c68 <I2C_TransferConfig>
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004816:	b2da      	uxtb	r2, r3
 8004818:	8979      	ldrh	r1, [r7, #10]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa20 	bl	8004c68 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d19a      	bne.n	8004768 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f974 	bl	8004b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e01a      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2220      	movs	r2, #32
 800484c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_I2C_Mem_Read+0x230>)
 800485a:	400b      	ands	r3, r1
 800485c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	80002400 	.word	0x80002400
 8004888:	fe00e800 	.word	0xfe00e800

0800488c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	460b      	mov	r3, r1
 80048a0:	813b      	strh	r3, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8979      	ldrh	r1, [r7, #10]
 80048ac:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <I2C_RequestMemoryWrite+0xa4>)
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9d7 	bl	8004c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8f0 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e02c      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048d4:	893b      	ldrh	r3, [r7, #8]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80048de:	e015      	b.n	800490c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8d6 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e012      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	893b      	ldrh	r3, [r7, #8]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2200      	movs	r2, #0
 8004914:	2180      	movs	r1, #128	@ 0x80
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f884 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	80002000 	.word	0x80002000

08004934 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4603      	mov	r3, r0
 8004944:	817b      	strh	r3, [r7, #10]
 8004946:	460b      	mov	r3, r1
 8004948:	813b      	strh	r3, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	8979      	ldrh	r1, [r7, #10]
 8004954:	4b20      	ldr	r3, [pc, #128]	@ (80049d8 <I2C_RequestMemoryRead+0xa4>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f984 	bl	8004c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	69b9      	ldr	r1, [r7, #24]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f89d 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e02c      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28
 8004984:	e015      	b.n	80049b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	b29b      	uxth	r3, r3
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f883 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e012      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2140      	movs	r1, #64	@ 0x40
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f831 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	80002000 	.word	0x80002000

080049dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d103      	bne.n	80049fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d007      	beq.n	8004a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	619a      	str	r2, [r3, #24]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a34:	e022      	b.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d01e      	beq.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7ff f8b1 	bl	8003ba4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d113      	bne.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00f      	b.n	8004a9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d0cd      	beq.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab0:	e02c      	b.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f870 	bl	8004b9c <I2C_IsAcknowledgeFailed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02a      	b.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d01e      	beq.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7ff f869 	bl	8003ba4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d1cb      	bne.n	8004ab2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b30:	e028      	b.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f830 	bl	8004b9c <I2C_IsAcknowledgeFailed>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e026      	b.n	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7ff f82d 	bl	8003ba4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d1cf      	bne.n	8004b32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d151      	bne.n	8004c5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb6:	e022      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d01e      	beq.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fe fff0 	bl	8003ba4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_IsAcknowledgeFailed+0x3a>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02e      	b.n	8004c5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d1d5      	bne.n	8004bb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2210      	movs	r2, #16
 8004c12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fedd 	bl	80049dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c2e:	400b      	ands	r3, r1
 8004c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	fe00e800 	.word	0xfe00e800

08004c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	4613      	mov	r3, r2
 8004c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	0d5b      	lsrs	r3, r3, #21
 8004c84:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c88:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <I2C_TransferConfig+0x58>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	ea02 0103 	and.w	r1, r2, r3
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c98:	7a7b      	ldrb	r3, [r7, #9]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	03ff63ff 	.word	0x03ff63ff

08004cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d138      	bne.n	8004d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e032      	b.n	8004d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	@ 0x24
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d60:	4b04      	ldr	r3, [pc, #16]	@ (8004d74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40007000 	.word	0x40007000

08004d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e3d8      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8a:	4b97      	ldr	r3, [pc, #604]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d94:	4b94      	ldr	r3, [pc, #592]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80e4 	beq.w	8004f74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x4a>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	f040 808b 	bne.w	8004ed0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	f040 8087 	bne.w	8004ed0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dc2:	4b89      	ldr	r3, [pc, #548]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x62>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e3b0      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	4b82      	ldr	r3, [pc, #520]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_RCC_OscConfig+0x7c>
 8004dea:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df2:	e005      	b.n	8004e00 <HAL_RCC_OscConfig+0x88>
 8004df4:	4b7c      	ldr	r3, [pc, #496]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d223      	bcs.n	8004e4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fd43 	bl	8005894 <RCC_SetFlashLatencyFromMSIRange>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e391      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e18:	4b73      	ldr	r3, [pc, #460]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a72      	ldr	r2, [pc, #456]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	f043 0308 	orr.w	r3, r3, #8
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b70      	ldr	r3, [pc, #448]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	496d      	ldr	r1, [pc, #436]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e36:	4b6c      	ldr	r3, [pc, #432]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4968      	ldr	r1, [pc, #416]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 8004e4a:	e025      	b.n	8004e98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e4c:	4b66      	ldr	r3, [pc, #408]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a65      	ldr	r2, [pc, #404]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e52:	f043 0308 	orr.w	r3, r3, #8
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b63      	ldr	r3, [pc, #396]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	4960      	ldr	r1, [pc, #384]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	495b      	ldr	r1, [pc, #364]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fd03 	bl	8005894 <RCC_SetFlashLatencyFromMSIRange>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e351      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e98:	f000 fc38 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b52      	ldr	r3, [pc, #328]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	4950      	ldr	r1, [pc, #320]	@ (8004fec <HAL_RCC_OscConfig+0x274>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff0 <HAL_RCC_OscConfig+0x278>)
 8004eb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8004ff4 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fe21 	bl	8003b04 <HAL_InitTick>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d052      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	e335      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d032      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ed8:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a42      	ldr	r2, [pc, #264]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fe5e 	bl	8003ba4 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eec:	f7fe fe5a 	bl	8003ba4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e31e      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004efe:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f0a:	4b37      	ldr	r3, [pc, #220]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a36      	ldr	r2, [pc, #216]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f10:	f043 0308 	orr.w	r3, r3, #8
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b34      	ldr	r3, [pc, #208]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	4931      	ldr	r1, [pc, #196]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f28:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	492c      	ldr	r1, [pc, #176]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]
 8004f3c:	e01a      	b.n	8004f74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a29      	ldr	r2, [pc, #164]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f4a:	f7fe fe2b 	bl	8003ba4 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f52:	f7fe fe27 	bl	8003ba4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e2eb      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f64:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCC_OscConfig+0x1da>
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d074      	beq.n	800506a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x21a>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d10e      	bne.n	8004faa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d10b      	bne.n	8004faa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d064      	beq.n	8005068 <HAL_RCC_OscConfig+0x2f0>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d160      	bne.n	8005068 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e2c8      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x24a>
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e026      	b.n	8005010 <HAL_RCC_OscConfig+0x298>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fca:	d115      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x280>
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a05      	ldr	r2, [pc, #20]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b03      	ldr	r3, [pc, #12]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	@ (8004fe8 <HAL_RCC_OscConfig+0x270>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e014      	b.n	8005010 <HAL_RCC_OscConfig+0x298>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	0800b9a8 	.word	0x0800b9a8
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	20000024 	.word	0x20000024
 8004ff8:	4ba0      	ldr	r3, [pc, #640]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a9f      	ldr	r2, [pc, #636]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b9d      	ldr	r3, [pc, #628]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a9c      	ldr	r2, [pc, #624]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800500e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fe fdc4 	bl	8003ba4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005020:	f7fe fdc0 	bl	8003ba4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e284      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005032:	4b92      	ldr	r3, [pc, #584]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x2a8>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fe fdb0 	bl	8003ba4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe fdac 	bl	8003ba4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e270      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x2d0>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d060      	beq.n	8005138 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x310>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d119      	bne.n	80050b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d116      	bne.n	80050b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005088:	4b7c      	ldr	r3, [pc, #496]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_OscConfig+0x328>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e24d      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a0:	4b76      	ldr	r3, [pc, #472]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	4973      	ldr	r1, [pc, #460]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b4:	e040      	b.n	8005138 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d023      	beq.n	8005106 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050be:	4b6f      	ldr	r3, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fe fd6b 	bl	8003ba4 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fe fd67 	bl	8003ba4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e22b      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e4:	4b65      	ldr	r3, [pc, #404]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b62      	ldr	r3, [pc, #392]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	495f      	ldr	r1, [pc, #380]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
 8005104:	e018      	b.n	8005138 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b5d      	ldr	r3, [pc, #372]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a5c      	ldr	r2, [pc, #368]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fe fd47 	bl	8003ba4 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511a:	f7fe fd43 	bl	8003ba4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e207      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800512c:	4b53      	ldr	r3, [pc, #332]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03c      	beq.n	80051be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01c      	beq.n	8005186 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800514c:	4b4b      	ldr	r3, [pc, #300]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005152:	4a4a      	ldr	r2, [pc, #296]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fe fd22 	bl	8003ba4 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005164:	f7fe fd1e 	bl	8003ba4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1e2      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005176:	4b41      	ldr	r3, [pc, #260]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ef      	beq.n	8005164 <HAL_RCC_OscConfig+0x3ec>
 8005184:	e01b      	b.n	80051be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005186:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800518c:	4a3b      	ldr	r2, [pc, #236]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fe fd05 	bl	8003ba4 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519e:	f7fe fd01 	bl	8003ba4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e1c5      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b0:	4b32      	ldr	r3, [pc, #200]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ef      	bne.n	800519e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80a6 	beq.w	8005318 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051cc:	2300      	movs	r3, #0
 80051ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051d0:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051dc:	4b27      	ldr	r3, [pc, #156]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	4a26      	ldr	r2, [pc, #152]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e8:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f4:	2301      	movs	r3, #1
 80051f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f8:	4b21      	ldr	r3, [pc, #132]	@ (8005280 <HAL_RCC_OscConfig+0x508>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d118      	bne.n	8005236 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005204:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCC_OscConfig+0x508>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1d      	ldr	r2, [pc, #116]	@ (8005280 <HAL_RCC_OscConfig+0x508>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005210:	f7fe fcc8 	bl	8003ba4 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fe fcc4 	bl	8003ba4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e188      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522a:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <HAL_RCC_OscConfig+0x508>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d108      	bne.n	8005250 <HAL_RCC_OscConfig+0x4d8>
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005244:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800524e:	e029      	b.n	80052a4 <HAL_RCC_OscConfig+0x52c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b05      	cmp	r3, #5
 8005256:	d115      	bne.n	8005284 <HAL_RCC_OscConfig+0x50c>
 8005258:	4b08      	ldr	r3, [pc, #32]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a07      	ldr	r2, [pc, #28]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005268:	4b04      	ldr	r3, [pc, #16]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	4a03      	ldr	r2, [pc, #12]	@ (800527c <HAL_RCC_OscConfig+0x504>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005278:	e014      	b.n	80052a4 <HAL_RCC_OscConfig+0x52c>
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
 8005284:	4b91      	ldr	r3, [pc, #580]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528a:	4a90      	ldr	r2, [pc, #576]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005294:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529a:	4a8c      	ldr	r2, [pc, #560]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d016      	beq.n	80052da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fc7a 	bl	8003ba4 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fe fc76 	bl	8003ba4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e138      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ca:	4b80      	ldr	r3, [pc, #512]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ed      	beq.n	80052b4 <HAL_RCC_OscConfig+0x53c>
 80052d8:	e015      	b.n	8005306 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052da:	f7fe fc63 	bl	8003ba4 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fe fc5f 	bl	8003ba4 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e121      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052f8:	4b74      	ldr	r3, [pc, #464]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ed      	bne.n	80052e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005306:	7ffb      	ldrb	r3, [r7, #31]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d105      	bne.n	8005318 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530c:	4b6f      	ldr	r3, [pc, #444]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005310:	4a6e      	ldr	r2, [pc, #440]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005316:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 810c 	beq.w	800553a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	2b02      	cmp	r3, #2
 8005328:	f040 80d4 	bne.w	80054d4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800532c:	4b67      	ldr	r3, [pc, #412]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	429a      	cmp	r2, r3
 800533e:	d130      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	3b01      	subs	r3, #1
 800534c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d127      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d11f      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800536c:	2a07      	cmp	r2, #7
 800536e:	bf14      	ite	ne
 8005370:	2201      	movne	r2, #1
 8005372:	2200      	moveq	r2, #0
 8005374:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005376:	4293      	cmp	r3, r2
 8005378:	d113      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	3b01      	subs	r3, #1
 8005388:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	3b01      	subs	r3, #1
 800539c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d06e      	beq.n	8005480 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d069      	beq.n	800547c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053a8:	4b48      	ldr	r3, [pc, #288]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053b4:	4b45      	ldr	r3, [pc, #276]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0bb      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053c4:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a40      	ldr	r2, [pc, #256]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d0:	f7fe fbe8 	bl	8003ba4 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fe fbe4 	bl	8003ba4 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0a8      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ea:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f6:	4b35      	ldr	r3, [pc, #212]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	4b35      	ldr	r3, [pc, #212]	@ (80054d0 <HAL_RCC_OscConfig+0x758>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005406:	3a01      	subs	r2, #1
 8005408:	0112      	lsls	r2, r2, #4
 800540a:	4311      	orrs	r1, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005410:	0212      	lsls	r2, r2, #8
 8005412:	4311      	orrs	r1, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005418:	0852      	lsrs	r2, r2, #1
 800541a:	3a01      	subs	r2, #1
 800541c:	0552      	lsls	r2, r2, #21
 800541e:	4311      	orrs	r1, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005424:	0852      	lsrs	r2, r2, #1
 8005426:	3a01      	subs	r2, #1
 8005428:	0652      	lsls	r2, r2, #25
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005430:	0912      	lsrs	r2, r2, #4
 8005432:	0452      	lsls	r2, r2, #17
 8005434:	430a      	orrs	r2, r1
 8005436:	4925      	ldr	r1, [pc, #148]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005438:	4313      	orrs	r3, r2
 800543a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800543c:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a22      	ldr	r2, [pc, #136]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005446:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005448:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800544e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005452:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005454:	f7fe fba6 	bl	8003ba4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fe fba2 	bl	8003ba4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e066      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546e:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547a:	e05e      	b.n	800553a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e05d      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005480:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d156      	bne.n	800553a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800548c:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0e      	ldr	r2, [pc, #56]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 8005492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005498:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a0b      	ldr	r2, [pc, #44]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054a4:	f7fe fb7e 	bl	8003ba4 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fe fb7a 	bl	8003ba4 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e03e      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054be:	4b03      	ldr	r3, [pc, #12]	@ (80054cc <HAL_RCC_OscConfig+0x754>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x734>
 80054ca:	e036      	b.n	800553a <HAL_RCC_OscConfig+0x7c2>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d02d      	beq.n	8005536 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b1a      	ldr	r3, [pc, #104]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 80054e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80054e6:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d105      	bne.n	80054fe <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054f2:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4a13      	ldr	r2, [pc, #76]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 80054f8:	f023 0303 	bic.w	r3, r3, #3
 80054fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054fe:	4b11      	ldr	r3, [pc, #68]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 8005504:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fe fb49 	bl	8003ba4 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005516:	f7fe fb45 	bl	8003ba4 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e009      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005528:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_OscConfig+0x7cc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f0      	bne.n	8005516 <HAL_RCC_OscConfig+0x79e>
 8005534:	e001      	b.n	800553a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000

08005548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0c8      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800555c:	4b66      	ldr	r3, [pc, #408]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d910      	bls.n	800558c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556a:	4b63      	ldr	r3, [pc, #396]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 0207 	bic.w	r2, r3, #7
 8005572:	4961      	ldr	r1, [pc, #388]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	4b5f      	ldr	r3, [pc, #380]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b0      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04c      	beq.n	8005632 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a0:	4b56      	ldr	r3, [pc, #344]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d121      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e09e      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b8:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d115      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e092      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d0:	4b4a      	ldr	r3, [pc, #296]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e086      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e0:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e07e      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f0:	4b42      	ldr	r3, [pc, #264]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f023 0203 	bic.w	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	493f      	ldr	r1, [pc, #252]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005602:	f7fe facf 	bl	8003ba4 <HAL_GetTick>
 8005606:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005608:	e00a      	b.n	8005620 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560a:	f7fe facb 	bl	8003ba4 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e066      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005620:	4b36      	ldr	r3, [pc, #216]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 020c 	and.w	r2, r3, #12
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	429a      	cmp	r2, r3
 8005630:	d1eb      	bne.n	800560a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800563e:	4b2f      	ldr	r3, [pc, #188]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	492c      	ldr	r1, [pc, #176]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d210      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b26      	ldr	r3, [pc, #152]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 0207 	bic.w	r2, r3, #7
 8005666:	4924      	ldr	r1, [pc, #144]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b22      	ldr	r3, [pc, #136]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e036      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4918      	ldr	r1, [pc, #96]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056aa:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4910      	ldr	r1, [pc, #64]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056be:	f000 f825 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056c2:	4602      	mov	r2, r0
 80056c4:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	490c      	ldr	r1, [pc, #48]	@ (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	5ccb      	ldrb	r3, [r1, r3]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	4a0a      	ldr	r2, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056de:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fa0e 	bl	8003b04 <HAL_InitTick>
 80056e8:	4603      	mov	r3, r0
 80056ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800b9a8 	.word	0x0800b9a8
 8005704:	20000000 	.word	0x20000000
 8005708:	20000024 	.word	0x20000024

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	@ 0x24
 8005710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005724:	4b3b      	ldr	r3, [pc, #236]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d121      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d11e      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005740:	4b34      	ldr	r3, [pc, #208]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800574c:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800575c:	4b2d      	ldr	r3, [pc, #180]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005768:	4a2b      	ldr	r2, [pc, #172]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d102      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005784:	4b25      	ldr	r3, [pc, #148]	@ (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e004      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d101      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005790:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x114>)
 8005792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d134      	bne.n	8005804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579a:	4b1e      	ldr	r3, [pc, #120]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d003      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0xac>
 80057b0:	e005      	b.n	80057be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057b2:	4b1a      	ldr	r3, [pc, #104]	@ (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 80057b4:	617b      	str	r3, [r7, #20]
      break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057b8:	4b19      	ldr	r3, [pc, #100]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x114>)
 80057ba:	617b      	str	r3, [r7, #20]
      break;
 80057bc:	e002      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	617b      	str	r3, [r7, #20]
      break;
 80057c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c4:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	3301      	adds	r3, #1
 80057d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057d2:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	fb03 f202 	mul.w	r2, r3, r2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	0e5b      	lsrs	r3, r3, #25
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	3301      	adds	r3, #1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005804:	69bb      	ldr	r3, [r7, #24]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3724      	adds	r7, #36	@ 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	0800b9c0 	.word	0x0800b9c0
 800581c:	00f42400 	.word	0x00f42400
 8005820:	007a1200 	.word	0x007a1200

08005824 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005828:	4b03      	ldr	r3, [pc, #12]	@ (8005838 <HAL_RCC_GetHCLKFreq+0x14>)
 800582a:	681b      	ldr	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000000 	.word	0x20000000

0800583c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005840:	f7ff fff0 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4904      	ldr	r1, [pc, #16]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	0800b9b8 	.word	0x0800b9b8

08005868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800586c:	f7ff ffda 	bl	8005824 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0adb      	lsrs	r3, r3, #11
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4904      	ldr	r1, [pc, #16]	@ (8005890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	0800b9b8 	.word	0x0800b9b8

08005894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800589c:	2300      	movs	r3, #0
 800589e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058a0:	4b2a      	ldr	r3, [pc, #168]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058ac:	f7ff fa56 	bl	8004d5c <HAL_PWREx_GetVoltageRange>
 80058b0:	6178      	str	r0, [r7, #20]
 80058b2:	e014      	b.n	80058de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	4b25      	ldr	r3, [pc, #148]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	4a24      	ldr	r2, [pc, #144]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058be:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c0:	4b22      	ldr	r3, [pc, #136]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058cc:	f7ff fa46 	bl	8004d5c <HAL_PWREx_GetVoltageRange>
 80058d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4b1e      	ldr	r3, [pc, #120]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e4:	d10b      	bne.n	80058fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b80      	cmp	r3, #128	@ 0x80
 80058ea:	d919      	bls.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80058f0:	d902      	bls.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058f2:	2302      	movs	r3, #2
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e013      	b.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058f8:	2301      	movs	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	e010      	b.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b80      	cmp	r3, #128	@ 0x80
 8005902:	d902      	bls.n	800590a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005904:	2303      	movs	r3, #3
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e00a      	b.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b80      	cmp	r3, #128	@ 0x80
 800590e:	d102      	bne.n	8005916 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005910:	2302      	movs	r3, #2
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e004      	b.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b70      	cmp	r3, #112	@ 0x70
 800591a:	d101      	bne.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800591c:	2301      	movs	r3, #1
 800591e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 0207 	bic.w	r2, r3, #7
 8005928:	4909      	ldr	r1, [pc, #36]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d001      	beq.n	8005942 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40021000 	.word	0x40021000
 8005950:	40022000 	.word	0x40022000

08005954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e0be      	b.n	8005ae4 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005976:	d009      	beq.n	800598c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	61da      	str	r2, [r3, #28]
 800597e:	e005      	b.n	800598c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8cb 	bl	8005b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059c6:	d902      	bls.n	80059ce <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e002      	b.n	80059d4 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80059dc:	d007      	beq.n	80059ee <HAL_SPI_Init+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4c:	d11b      	bne.n	8005a86 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a5e:	d903      	bls.n	8005a68 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a66:	e002      	b.n	8005a6e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d107      	bne.n	8005a86 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	f003 0204 	and.w	r2, r3, #4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac6:	d105      	bne.n	8005ad4 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e01a      	b.n	8005b34 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f81a 	bl	8005b50 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b84:	d112      	bne.n	8005bac <HAL_SPI_Receive+0x48>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10e      	bne.n	8005bac <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2204      	movs	r2, #4
 8005b92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f9bb 	bl	8005f1e <HAL_SPI_TransmitReceive>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e1b4      	b.n	8005f16 <HAL_SPI_Receive+0x3b2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_SPI_Receive+0x56>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e1ad      	b.n	8005f16 <HAL_SPI_Receive+0x3b2>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc2:	f7fd ffef 	bl	8003ba4 <HAL_GetTick>
 8005bc6:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bd8:	e194      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Receive+0x82>
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bea:	e18b      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c36:	d118      	bne.n	8005c6a <HAL_SPI_Receive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c56:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c72:	d908      	bls.n	8005c86 <HAL_SPI_Receive+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c82:	605a      	str	r2, [r3, #4]
 8005c84:	e007      	b.n	8005c96 <HAL_SPI_Receive+0x132>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_SPI_Receive+0x15c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005cbe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	d007      	beq.n	8005cde <HAL_SPI_Receive+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ce6:	d867      	bhi.n	8005db8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ce8:	e030      	b.n	8005d4c <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d117      	bne.n	8005d28 <HAL_SPI_Receive+0x1c4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f103 020c 	add.w	r2, r3, #12
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005d26:	e011      	b.n	8005d4c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d28:	f7fd ff3c 	bl	8003ba4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d803      	bhi.n	8005d40 <HAL_SPI_Receive+0x1dc>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d102      	bne.n	8005d46 <HAL_SPI_Receive+0x1e2>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d4a:	e0db      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1c8      	bne.n	8005cea <HAL_SPI_Receive+0x186>
 8005d58:	e034      	b.n	8005dc4 <HAL_SPI_Receive+0x260>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d115      	bne.n	8005d94 <HAL_SPI_Receive+0x230>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	b292      	uxth	r2, r2
 8005d74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005d92:	e011      	b.n	8005db8 <HAL_SPI_Receive+0x254>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d94:	f7fd ff06 	bl	8003ba4 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d803      	bhi.n	8005dac <HAL_SPI_Receive+0x248>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d102      	bne.n	8005db2 <HAL_SPI_Receive+0x24e>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_SPI_Receive+0x254>
        {
          errorcode = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005db6:	e0a5      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ca      	bne.n	8005d5a <HAL_SPI_Receive+0x1f6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dcc:	d175      	bne.n	8005eba <HAL_SPI_Receive+0x356>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ddc:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	2101      	movs	r1, #1
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f001 f9a3 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_SPI_Receive+0x296>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	77fb      	strb	r3, [r7, #31]
      goto error;
 8005df8:	e084      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e02:	d907      	bls.n	8005e14 <HAL_SPI_Receive+0x2b0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e008      	b.n	8005e26 <HAL_SPI_Receive+0x2c2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f103 020c 	add.w	r2, r3, #12
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	2101      	movs	r1, #1
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f001 f97f 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_SPI_Receive+0x2ea>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	f043 0202 	orr.w	r2, r3, #2
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	77fb      	strb	r3, [r7, #31]
      goto error;
 8005e4c:	e05a      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e56:	d105      	bne.n	8005e64 <HAL_SPI_Receive+0x300>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	e02a      	b.n	8005eba <HAL_SPI_Receive+0x356>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005e70:	697b      	ldr	r3, [r7, #20]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e7a:	d11e      	bne.n	8005eba <HAL_SPI_Receive+0x356>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d11a      	bne.n	8005eba <HAL_SPI_Receive+0x356>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f001 f950 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_SPI_Receive+0x348>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	f043 0202 	orr.w	r2, r3, #2
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eaa:	e02b      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 8005eb8:	697b      	ldr	r3, [r7, #20]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f001 fa52 	bl	8007368 <SPI_EndRxTransaction>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Receive+0x36c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d10a      	bne.n	8005ef4 <HAL_SPI_Receive+0x390>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005ef2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Receive+0x39e>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e000      	b.n	8005f04 <HAL_SPI_Receive+0x3a0>
  }

error :
 8005f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b090      	sub	sp, #64	@ 0x40
 8005f22:	af02      	add	r7, sp, #8
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f30:	2301      	movs	r3, #1
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x2a>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e2c8      	b.n	80064da <HAL_SPI_TransmitReceive+0x5bc>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f50:	f7fd fe28 	bl	8003ba4 <HAL_GetTick>
 8005f54:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  tmp_mode            = hspi->Init.Mode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
  initial_TxXferCount = Size;
 8005f66:	887b      	ldrh	r3, [r7, #2]
 8005f68:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8005f6a:	887b      	ldrh	r3, [r7, #2]
 8005f6c:	843b      	strh	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	61fb      	str	r3, [r7, #28]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	61bb      	str	r3, [r7, #24]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d00f      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0x88>
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f8c:	d107      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x80>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x80>
 8005f96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d003      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    goto error;
 8005fa4:	e28f      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x9a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x9a>
 8005fb2:	887b      	ldrh	r3, [r7, #2]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    goto error;
 8005fbe:	e282      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d003      	beq.n	8005fd4 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2205      	movs	r2, #5
 8005fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006016:	d10f      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x11a>
  {
    SPI_RESET_CRC(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006036:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006040:	d802      	bhi.n	8006048 <HAL_SPI_TransmitReceive+0x12a>
 8006042:	8c3b      	ldrh	r3, [r7, #32]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d908      	bls.n	800605a <HAL_SPI_TransmitReceive+0x13c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	e007      	b.n	800606a <HAL_SPI_TransmitReceive+0x14c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d007      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x16a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006090:	f240 80a4 	bls.w	80061dc <HAL_SPI_TransmitReceive+0x2be>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x186>
 800609c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800609e:	2b01      	cmp	r3, #1
 80060a0:	f040 808e 	bne.w	80061c0 <HAL_SPI_TransmitReceive+0x2a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	881a      	ldrh	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	1c9a      	adds	r2, r3, #2
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c8:	e07a      	b.n	80061c0 <HAL_SPI_TransmitReceive+0x2a2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d13f      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03a      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
 80060e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d137      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11e      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006122:	d119      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x22a>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x22a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006146:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006156:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d11c      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x282>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x282>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	b292      	uxth	r2, r2
 800617e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800619c:	2301      	movs	r3, #1
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061a0:	f7fd fd00 	bl	8003ba4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d807      	bhi.n	80061c0 <HAL_SPI_TransmitReceive+0x2a2>
 80061b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d003      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x2a2>
      {
        errorcode = HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        goto error;
 80061be:	e182      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f47f af7f 	bne.w	80060ca <HAL_SPI_TransmitReceive+0x1ac>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f47f af78 	bne.w	80060ca <HAL_SPI_TransmitReceive+0x1ac>
 80061da:	e103      	b.n	80063e4 <HAL_SPI_TransmitReceive+0x4c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x2ce>
 80061e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	f040 80ef 	bne.w	80063ca <HAL_SPI_TransmitReceive+0x4ac>
    {
      if (hspi->TxXferCount > 1U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d912      	bls.n	800621c <HAL_SPI_TransmitReceive+0x2fe>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b02      	subs	r3, #2
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800621a:	e0d6      	b.n	80063ca <HAL_SPI_TransmitReceive+0x4ac>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006242:	e0c2      	b.n	80063ca <HAL_SPI_TransmitReceive+0x4ac>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d158      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x3e6>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d053      	beq.n	8006304 <HAL_SPI_TransmitReceive+0x3e6>
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	2b01      	cmp	r3, #1
 8006260:	d150      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x3e6>
      {
        if (hspi->TxXferCount > 1U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	d912      	bls.n	8006292 <HAL_SPI_TransmitReceive+0x374>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b02      	subs	r3, #2
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006290:	e012      	b.n	80062b8 <HAL_SPI_TransmitReceive+0x39a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d11e      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x3e6>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ce:	d119      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x3e6>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10c      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x3d6>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x3d6>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006302:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d148      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x486>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d042      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x486>
      {
        if (hspi->RxXferCount > 1U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	d923      	bls.n	8006372 <HAL_SPI_TransmitReceive+0x454>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b02      	subs	r3, #2
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d81f      	bhi.n	80063a0 <HAL_SPI_TransmitReceive+0x482>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	e016      	b.n	80063a0 <HAL_SPI_TransmitReceive+0x482>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f103 020c 	add.w	r2, r3, #12
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063a4:	f7fd fbfe 	bl	8003ba4 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d803      	bhi.n	80063bc <HAL_SPI_TransmitReceive+0x49e>
 80063b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x4a4>
 80063bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x4ac>
      {
        errorcode = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        goto error;
 80063c8:	e07d      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af37 	bne.w	8006244 <HAL_SPI_TransmitReceive+0x326>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f47f af30 	bne.w	8006244 <HAL_SPI_TransmitReceive+0x326>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ec:	d146      	bne.n	800647c <HAL_SPI_TransmitReceive+0x55e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f4:	2201      	movs	r2, #1
 80063f6:	2101      	movs	r1, #1
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fe9b 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <HAL_SPI_TransmitReceive+0x4fa>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006408:	f043 0202 	orr.w	r2, r3, #2
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      goto error;
 8006416:	e056      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006420:	d105      	bne.n	800642e <HAL_SPI_TransmitReceive+0x510>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	e026      	b.n	800647c <HAL_SPI_TransmitReceive+0x55e>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800643a:	697b      	ldr	r3, [r7, #20]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006440:	2b02      	cmp	r3, #2
 8006442:	d11b      	bne.n	800647c <HAL_SPI_TransmitReceive+0x55e>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644a:	2201      	movs	r2, #1
 800644c:	2101      	movs	r1, #1
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fe70 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_SPI_TransmitReceive+0x550>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645e:	f043 0202 	orr.w	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
          goto error;
 800646c:	e02b      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800647a:	697b      	ldr	r3, [r7, #20]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b10      	cmp	r3, #16
 8006488:	d10d      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x588>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800648e:	f043 0202 	orr.w	r2, r3, #2
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800649e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 ffb4 	bl	8007418 <SPI_EndRxTxTransaction>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d006      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x5a6>
  {
    errorcode = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80064c2:	e000      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x5a8>
  }

error :
 80064c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80064d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3738      	adds	r7, #56	@ 0x38
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_SPI_Transmit_IT+0x20>
 8006500:	2302      	movs	r3, #2
 8006502:	e087      	b.n	8006614 <HAL_SPI_Transmit_IT+0x130>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Transmit_IT+0x34>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651c:	e075      	b.n	800660a <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	d002      	beq.n	8006530 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800652a:	2302      	movs	r3, #2
 800652c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800652e:	e06c      	b.n	800660a <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2203      	movs	r2, #3
 8006534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	88fa      	ldrh	r2, [r7, #6]
 800654e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006574:	d903      	bls.n	800657e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a29      	ldr	r2, [pc, #164]	@ (8006620 <HAL_SPI_Transmit_IT+0x13c>)
 800657a:	651a      	str	r2, [r3, #80]	@ 0x50
 800657c:	e002      	b.n	8006584 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <HAL_SPI_Transmit_IT+0x140>)
 8006582:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658c:	d10f      	bne.n	80065ae <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800659c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ac:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b6:	d10f      	bne.n	80065d8 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065d6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80065e6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	d008      	beq.n	8006608 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e000      	b.n	800660a <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8006608:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	080070d5 	.word	0x080070d5
 8006624:	08007075 	.word	0x08007075

08006628 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d110      	bne.n	8006664 <HAL_SPI_Receive_IT+0x3c>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800664a:	d10b      	bne.n	8006664 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2204      	movs	r2, #4
 8006650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8bc 	bl	80067d8 <HAL_SPI_TransmitReceive_IT>
 8006660:	4603      	mov	r3, r0
 8006662:	e0b1      	b.n	80067c8 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_SPI_Receive_IT+0x4a>
 800666e:	2302      	movs	r3, #2
 8006670:	e0aa      	b.n	80067c8 <HAL_SPI_Receive_IT+0x1a0>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d002      	beq.n	800668c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006686:	2302      	movs	r3, #2
 8006688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800668a:	e098      	b.n	80067be <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_SPI_Receive_IT+0x70>
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800669c:	e08f      	b.n	80067be <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2204      	movs	r2, #4
 80066a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066e2:	d90b      	bls.n	80066fc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066f2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a36      	ldr	r2, [pc, #216]	@ (80067d0 <HAL_SPI_Receive_IT+0x1a8>)
 80066f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80066fa:	e00a      	b.n	8006712 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800670a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a31      	ldr	r2, [pc, #196]	@ (80067d4 <HAL_SPI_Receive_IT+0x1ac>)
 8006710:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671a:	d10f      	bne.n	800673c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800672a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800673a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006744:	d11f      	bne.n	8006786 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006754:	d806      	bhi.n	8006764 <HAL_SPI_Receive_IT+0x13c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675a:	2b02      	cmp	r3, #2
 800675c:	d102      	bne.n	8006764 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2202      	movs	r2, #2
 8006762:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e002      	b.n	800678c <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800679a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d008      	beq.n	80067bc <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e000      	b.n	80067be <HAL_SPI_Receive_IT+0x196>
  }

error :
 80067bc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	08006fed 	.word	0x08006fed
 80067d4:	08006f2d 	.word	0x08006f2d

080067d8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_SPI_TransmitReceive_IT+0x20>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e0b9      	b.n	800696c <HAL_SPI_TransmitReceive_IT+0x194>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006806:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800680e:	7dbb      	ldrb	r3, [r7, #22]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d00d      	beq.n	8006830 <HAL_SPI_TransmitReceive_IT+0x58>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800681a:	d106      	bne.n	800682a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <HAL_SPI_TransmitReceive_IT+0x52>
 8006824:	7dbb      	ldrb	r3, [r7, #22]
 8006826:	2b04      	cmp	r3, #4
 8006828:	d002      	beq.n	8006830 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800682a:	2302      	movs	r3, #2
 800682c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800682e:	e098      	b.n	8006962 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_TransmitReceive_IT+0x6a>
 800683c:	887b      	ldrh	r3, [r7, #2]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006846:	e08c      	b.n	8006962 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b04      	cmp	r3, #4
 8006852:	d003      	beq.n	800685c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2205      	movs	r2, #5
 8006858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	887a      	ldrh	r2, [r7, #2]
 8006872:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	887a      	ldrh	r2, [r7, #2]
 800687e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	887a      	ldrh	r2, [r7, #2]
 8006886:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006892:	d906      	bls.n	80068a2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a38      	ldr	r2, [pc, #224]	@ (8006978 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8006898:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a37      	ldr	r2, [pc, #220]	@ (800697c <HAL_SPI_TransmitReceive_IT+0x1a4>)
 800689e:	651a      	str	r2, [r3, #80]	@ 0x50
 80068a0:	e005      	b.n	80068ae <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a36      	ldr	r2, [pc, #216]	@ (8006980 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80068a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a36      	ldr	r2, [pc, #216]	@ (8006984 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 80068ac:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b6:	d11f      	bne.n	80068f8 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068c6:	d806      	bhi.n	80068d6 <HAL_SPI_TransmitReceive_IT+0xfe>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d102      	bne.n	80068d6 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2202      	movs	r2, #2
 80068d4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e002      	b.n	80068fe <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006906:	d802      	bhi.n	800690e <HAL_SPI_TransmitReceive_IT+0x136>
 8006908:	887b      	ldrh	r3, [r7, #2]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d908      	bls.n	8006920 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e007      	b.n	8006930 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800693e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694a:	2b40      	cmp	r3, #64	@ 0x40
 800694c:	d008      	beq.n	8006960 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e000      	b.n	8006962 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8006960:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	08006db9 	.word	0x08006db9
 800697c:	08006e69 	.word	0x08006e69
 8006980:	08006bc5 	.word	0x08006bc5
 8006984:	08006cfd 	.word	0x08006cfd

08006988 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10e      	bne.n	80069c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
    return;
 80069c6:	e0ce      	b.n	8006b66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_SPI_IRQHandler+0x5e>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
    return;
 80069e4:	e0bf      	b.n	8006b66 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <HAL_SPI_IRQHandler+0x7e>
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80b0 	beq.w	8006b66 <HAL_SPI_IRQHandler+0x1de>
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80aa 	beq.w	8006b66 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d011      	beq.n	8006a4c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a2c:	f043 0204 	orr.w	r2, r3, #4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	e00b      	b.n	8006a64 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
        return;
 8006a62:	e080      	b.n	8006b66 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d014      	beq.n	8006a98 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00c      	beq.n	8006abc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa6:	f043 0208 	orr.w	r2, r3, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d04f      	beq.n	8006b64 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ad2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <HAL_SPI_IRQHandler+0x168>
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d034      	beq.n	8006b5a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0203 	bic.w	r2, r2, #3
 8006afe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0c:	4a17      	ldr	r2, [pc, #92]	@ (8006b6c <HAL_SPI_IRQHandler+0x1e4>)
 8006b0e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd f986 	bl	8003e26 <HAL_DMA_Abort_IT>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d016      	beq.n	8006b62 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b38:	4a0c      	ldr	r2, [pc, #48]	@ (8006b6c <HAL_SPI_IRQHandler+0x1e4>)
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd f970 	bl	8003e26 <HAL_DMA_Abort_IT>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006b58:	e003      	b.n	8006b62 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f812 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b60:	e000      	b.n	8006b64 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006b62:	bf00      	nop
    return;
 8006b64:	bf00      	nop
  }
}
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	08006b99 	.word	0x08006b99

08006b70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff ffe5 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d923      	bls.n	8006c20 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	b292      	uxth	r2, r2
 8006be4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b02      	subs	r3, #2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11f      	bne.n	8006c4e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	e016      	b.n	8006c4e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f103 020c 	add.w	r2, r3, #12
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d120      	bne.n	8006c9c <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c62:	d10b      	bne.n	8006c7c <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c72:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0b      	ldr	r2, [pc, #44]	@ (8006ca4 <SPI_2linesRxISR_8BIT+0xe0>)
 8006c78:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006c7a:	e00f      	b.n	8006c9c <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc04 	bl	80074a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08006ca9 	.word	0x08006ca9

08006ca8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006cc0:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc6:	1e5a      	subs	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <SPI_2linesRxISR_8BITCRC+0x4c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ce2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <SPI_2linesRxISR_8BITCRC+0x4c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fbd8 	bl	80074a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d912      	bls.n	8006d34 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	1c9a      	adds	r2, r3, #2
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b02      	subs	r3, #2
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d32:	e012      	b.n	8006d5a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d126      	bne.n	8006db2 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d6c:	d110      	bne.n	8006d90 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d7c:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d8c:	605a      	str	r2, [r3, #4]
      return;
 8006d8e:	e010      	b.n	8006db2 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d9e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb79 	bl	80074a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	b292      	uxth	r2, r2
 8006dcc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d118      	bne.n	8006e28 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfe:	d103      	bne.n	8006e08 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a0b      	ldr	r2, [pc, #44]	@ (8006e30 <SPI_2linesRxISR_16BIT+0x78>)
 8006e04:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006e06:	e00f      	b.n	8006e28 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb3e 	bl	80074a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	08006e35 	.word	0x08006e35

08006e34 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8006e48:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e58:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fb22 	bl	80074a4 <SPI_CloseRxTx_ISR>
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	1c9a      	adds	r2, r3, #2
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d126      	bne.n	8006eec <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea6:	d110      	bne.n	8006eca <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006eb6:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ec6:	605a      	str	r2, [r3, #4]
      return;
 8006ec8:	e010      	b.n	8006eec <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ed8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fadc 	bl	80074a4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	330c      	adds	r3, #12
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006f0a:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <SPI_RxISR_8BITCRC+0x32>
  {
    SPI_CloseRx_ISR(hspi);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb1c 	bl	800755c <SPI_CloseRx_ISR>
  }
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f103 020c 	add.w	r2, r3, #12
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10c      	bne.n	8006f88 <SPI_RxISR_8BIT+0x5c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f76:	d107      	bne.n	8006f88 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f86:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9c:	d103      	bne.n	8006fa6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a04      	ldr	r2, [pc, #16]	@ (8006fb4 <SPI_RxISR_8BIT+0x88>)
 8006fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006fa4:	e002      	b.n	8006fac <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fad8 	bl	800755c <SPI_CloseRx_ISR>
  }
}
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08006ef3 	.word	0x08006ef3

08006fb8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006fcc:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fdc:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fabc 	bl	800755c <SPI_CloseRx_ISR>
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	b292      	uxth	r2, r2
 8007000:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10c      	bne.n	8007044 <SPI_RxISR_16BIT+0x58>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007032:	d107      	bne.n	8007044 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007042:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007058:	d103      	bne.n	8007062 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a04      	ldr	r2, [pc, #16]	@ (8007070 <SPI_RxISR_16BIT+0x84>)
 800705e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8007060:	e002      	b.n	8007068 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa7a 	bl	800755c <SPI_CloseRx_ISR>
  }
}
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	08006fb9 	.word	0x08006fb9

08007074 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10f      	bne.n	80070cc <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b4:	d107      	bne.n	80070c6 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070c4:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa8e 	bl	80075e8 <SPI_CloseTx_ISR>
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007112:	d107      	bne.n	8007124 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007122:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa5f 	bl	80075e8 <SPI_CloseTx_ISR>
  }
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007144:	f7fc fd2e 	bl	8003ba4 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4413      	add	r3, r2
 8007152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007154:	f7fc fd26 	bl	8003ba4 <HAL_GetTick>
 8007158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	015b      	lsls	r3, r3, #5
 8007160:	0d1b      	lsrs	r3, r3, #20
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800716a:	e054      	b.n	8007216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d050      	beq.n	8007216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007174:	f7fc fd16 	bl	8003ba4 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	429a      	cmp	r2, r3
 8007182:	d902      	bls.n	800718a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d13d      	bne.n	8007206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071a2:	d111      	bne.n	80071c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071ac:	d004      	beq.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b6:	d107      	bne.n	80071c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d0:	d10f      	bne.n	80071f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e017      	b.n	8007236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	3b01      	subs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	bf0c      	ite	eq
 8007226:	2301      	moveq	r3, #1
 8007228:	2300      	movne	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	429a      	cmp	r2, r3
 8007232:	d19b      	bne.n	800716c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000000 	.word	0x20000000

08007244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007252:	f7fc fca7 	bl	8003ba4 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	4413      	add	r3, r2
 8007260:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007262:	f7fc fc9f 	bl	8003ba4 <HAL_GetTick>
 8007266:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007268:	4b3e      	ldr	r3, [pc, #248]	@ (8007364 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	00da      	lsls	r2, r3, #3
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	0d1b      	lsrs	r3, r3, #20
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007280:	e062      	b.n	8007348 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007288:	d109      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800729c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d050      	beq.n	8007348 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072a6:	f7fc fc7d 	bl	8003ba4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d902      	bls.n	80072bc <SPI_WaitFifoStateUntilTimeout+0x78>
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d13d      	bne.n	8007338 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072d4:	d111      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072de:	d004      	beq.n	80072ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e8:	d107      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007302:	d10f      	bne.n	8007324 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007322:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e010      	b.n	800735a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3b01      	subs	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d194      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000000 	.word	0x20000000

08007368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737c:	d111      	bne.n	80073a2 <SPI_EndRxTransaction+0x3a>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007386:	d004      	beq.n	8007392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007390:	d107      	bne.n	80073a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	@ 0x80
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff fec1 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073bc:	f043 0220 	orr.w	r2, r3, #32
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e023      	b.n	8007410 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073d0:	d11d      	bne.n	800740e <SPI_EndRxTransaction+0xa6>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073da:	d004      	beq.n	80073e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e4:	d113      	bne.n	800740e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff ff26 	bl	8007244 <SPI_WaitFifoStateUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007402:	f043 0220 	orr.w	r2, r3, #32
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e000      	b.n	8007410 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff ff07 	bl	8007244 <SPI_WaitFifoStateUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e027      	b.n	800749c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	2180      	movs	r1, #128	@ 0x80
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff fe6c 	bl	8007134 <SPI_WaitFlagStateUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e014      	b.n	800749c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff fee0 	bl	8007244 <SPI_WaitFifoStateUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748e:	f043 0220 	orr.w	r2, r3, #32
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e000      	b.n	800749c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074ac:	f7fc fb7a 	bl	8003ba4 <HAL_GetTick>
 80074b0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0220 	bic.w	r2, r2, #32
 80074c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	2164      	movs	r1, #100	@ 0x64
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff ffa6 	bl	8007418 <SPI_EndRxTxTransaction>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d112      	bne.n	8007512 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f8:	f043 0202 	orr.w	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007508:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fb3a 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007510:	e020      	b.n	8007554 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007516:	2b00      	cmp	r3, #0
 8007518:	d115      	bne.n	8007546 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b04      	cmp	r3, #4
 8007524:	d107      	bne.n	8007536 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fa fc9a 	bl	8001e68 <HAL_SPI_RxCpltCallback>
}
 8007534:	e00e      	b.n	8007554 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fb16 	bl	8006b70 <HAL_SPI_TxRxCpltCallback>
}
 8007544:	e006      	b.n	8007554 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fb18 	bl	8006b84 <HAL_SPI_ErrorCallback>
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007572:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007574:	f7fc fb16 	bl	8003ba4 <HAL_GetTick>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	2164      	movs	r1, #100	@ 0x64
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fef2 	bl	8007368 <SPI_EndRxTransaction>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d10e      	bne.n	80075ca <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b0:	f043 0202 	orr.w	r2, r3, #2
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80075c0:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fade 	bl	8006b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075c8:	e00a      	b.n	80075e0 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fa fc48 	bl	8001e68 <HAL_SPI_RxCpltCallback>
}
 80075d8:	e002      	b.n	80075e0 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fad2 	bl	8006b84 <HAL_SPI_ErrorCallback>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075f0:	f7fc fad8 	bl	8003ba4 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007604:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	2164      	movs	r1, #100	@ 0x64
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff ff04 	bl	8007418 <SPI_EndRxTxTransaction>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff fa97 	bl	8006b84 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007656:	e002      	b.n	800765e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fa fc19 	bl	8001e90 <HAL_SPI_TxCpltCallback>
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e049      	b.n	800770c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7fb fc3d 	bl	8002f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f000 fa4b 	bl	8007b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_TIM_PWM_Start+0x24>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	bf14      	ite	ne
 8007730:	2301      	movne	r3, #1
 8007732:	2300      	moveq	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	e03c      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b04      	cmp	r3, #4
 800773c:	d109      	bne.n	8007752 <HAL_TIM_PWM_Start+0x3e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	bf14      	ite	ne
 800774a:	2301      	movne	r3, #1
 800774c:	2300      	moveq	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	e02f      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d109      	bne.n	800776c <HAL_TIM_PWM_Start+0x58>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
 8007766:	2300      	moveq	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e022      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b0c      	cmp	r3, #12
 8007770:	d109      	bne.n	8007786 <HAL_TIM_PWM_Start+0x72>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	bf14      	ite	ne
 800777e:	2301      	movne	r3, #1
 8007780:	2300      	moveq	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e015      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b10      	cmp	r3, #16
 800778a:	d109      	bne.n	80077a0 <HAL_TIM_PWM_Start+0x8c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e008      	b.n	80077b2 <HAL_TIM_PWM_Start+0x9e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e09c      	b.n	80078f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <HAL_TIM_PWM_Start+0xb6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c8:	e023      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d104      	bne.n	80077da <HAL_TIM_PWM_Start+0xc6>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077d8:	e01b      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d104      	bne.n	80077ea <HAL_TIM_PWM_Start+0xd6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077e8:	e013      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b0c      	cmp	r3, #12
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_PWM_Start+0xe6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077f8:	e00b      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xf6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007808:	e003      	b.n	8007812 <HAL_TIM_PWM_Start+0xfe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fd00 	bl	8008220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a35      	ldr	r2, [pc, #212]	@ (80078fc <HAL_TIM_PWM_Start+0x1e8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a34      	ldr	r2, [pc, #208]	@ (8007900 <HAL_TIM_PWM_Start+0x1ec>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a32      	ldr	r2, [pc, #200]	@ (8007904 <HAL_TIM_PWM_Start+0x1f0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a31      	ldr	r2, [pc, #196]	@ (8007908 <HAL_TIM_PWM_Start+0x1f4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_TIM_PWM_Start+0x13e>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2f      	ldr	r2, [pc, #188]	@ (800790c <HAL_TIM_PWM_Start+0x1f8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_Start+0x142>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_TIM_PWM_Start+0x144>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800786a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a22      	ldr	r2, [pc, #136]	@ (80078fc <HAL_TIM_PWM_Start+0x1e8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01d      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787e:	d018      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a22      	ldr	r2, [pc, #136]	@ (8007910 <HAL_TIM_PWM_Start+0x1fc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a21      	ldr	r2, [pc, #132]	@ (8007914 <HAL_TIM_PWM_Start+0x200>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00e      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1f      	ldr	r2, [pc, #124]	@ (8007918 <HAL_TIM_PWM_Start+0x204>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a17      	ldr	r2, [pc, #92]	@ (8007900 <HAL_TIM_PWM_Start+0x1ec>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_TIM_PWM_Start+0x19e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a15      	ldr	r2, [pc, #84]	@ (8007904 <HAL_TIM_PWM_Start+0x1f0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d115      	bne.n	80078de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	4b18      	ldr	r3, [pc, #96]	@ (800791c <HAL_TIM_PWM_Start+0x208>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b06      	cmp	r3, #6
 80078c2:	d015      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1dc>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ca:	d011      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078dc:	e008      	b.n	80078f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e000      	b.n	80078f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	00010007 	.word	0x00010007

08007920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007936:	2302      	movs	r3, #2
 8007938:	e0fd      	b.n	8007b36 <HAL_TIM_PWM_ConfigChannel+0x216>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b14      	cmp	r3, #20
 8007946:	f200 80f0 	bhi.w	8007b2a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	080079a5 	.word	0x080079a5
 8007954:	08007b2b 	.word	0x08007b2b
 8007958:	08007b2b 	.word	0x08007b2b
 800795c:	08007b2b 	.word	0x08007b2b
 8007960:	080079e5 	.word	0x080079e5
 8007964:	08007b2b 	.word	0x08007b2b
 8007968:	08007b2b 	.word	0x08007b2b
 800796c:	08007b2b 	.word	0x08007b2b
 8007970:	08007a27 	.word	0x08007a27
 8007974:	08007b2b 	.word	0x08007b2b
 8007978:	08007b2b 	.word	0x08007b2b
 800797c:	08007b2b 	.word	0x08007b2b
 8007980:	08007a67 	.word	0x08007a67
 8007984:	08007b2b 	.word	0x08007b2b
 8007988:	08007b2b 	.word	0x08007b2b
 800798c:	08007b2b 	.word	0x08007b2b
 8007990:	08007aa9 	.word	0x08007aa9
 8007994:	08007b2b 	.word	0x08007b2b
 8007998:	08007b2b 	.word	0x08007b2b
 800799c:	08007b2b 	.word	0x08007b2b
 80079a0:	08007ae9 	.word	0x08007ae9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f962 	bl	8007c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0204 	bic.w	r2, r2, #4
 80079ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	619a      	str	r2, [r3, #24]
      break;
 80079e2:	e0a3      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f9d2 	bl	8007d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6999      	ldr	r1, [r3, #24]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	021a      	lsls	r2, r3, #8
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	619a      	str	r2, [r3, #24]
      break;
 8007a24:	e082      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fa3b 	bl	8007ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0208 	orr.w	r2, r2, #8
 8007a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0204 	bic.w	r2, r2, #4
 8007a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	61da      	str	r2, [r3, #28]
      break;
 8007a64:	e062      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68b9      	ldr	r1, [r7, #8]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 faa3 	bl	8007fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69d9      	ldr	r1, [r3, #28]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	021a      	lsls	r2, r3, #8
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	61da      	str	r2, [r3, #28]
      break;
 8007aa6:	e041      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 faec 	bl	800808c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0208 	orr.w	r2, r2, #8
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ae6:	e021      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fb30 	bl	8008154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b28:	e000      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007b2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop

08007b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a40      	ldr	r2, [pc, #256]	@ (8007c54 <TIM_Base_SetConfig+0x114>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5e:	d00f      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3d      	ldr	r2, [pc, #244]	@ (8007c58 <TIM_Base_SetConfig+0x118>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8007c5c <TIM_Base_SetConfig+0x11c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3b      	ldr	r2, [pc, #236]	@ (8007c60 <TIM_Base_SetConfig+0x120>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0x40>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a3a      	ldr	r2, [pc, #232]	@ (8007c64 <TIM_Base_SetConfig+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d108      	bne.n	8007b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2f      	ldr	r2, [pc, #188]	@ (8007c54 <TIM_Base_SetConfig+0x114>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d01f      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba0:	d01b      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c58 <TIM_Base_SetConfig+0x118>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d017      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2b      	ldr	r2, [pc, #172]	@ (8007c5c <TIM_Base_SetConfig+0x11c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007c60 <TIM_Base_SetConfig+0x120>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a29      	ldr	r2, [pc, #164]	@ (8007c64 <TIM_Base_SetConfig+0x124>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a28      	ldr	r2, [pc, #160]	@ (8007c68 <TIM_Base_SetConfig+0x128>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a27      	ldr	r2, [pc, #156]	@ (8007c6c <TIM_Base_SetConfig+0x12c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <TIM_Base_SetConfig+0x130>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a10      	ldr	r2, [pc, #64]	@ (8007c54 <TIM_Base_SetConfig+0x114>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00f      	beq.n	8007c38 <TIM_Base_SetConfig+0xf8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a12      	ldr	r2, [pc, #72]	@ (8007c64 <TIM_Base_SetConfig+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <TIM_Base_SetConfig+0xf8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a11      	ldr	r2, [pc, #68]	@ (8007c68 <TIM_Base_SetConfig+0x128>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d007      	beq.n	8007c38 <TIM_Base_SetConfig+0xf8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a10      	ldr	r2, [pc, #64]	@ (8007c6c <TIM_Base_SetConfig+0x12c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_Base_SetConfig+0xf8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a0f      	ldr	r2, [pc, #60]	@ (8007c70 <TIM_Base_SetConfig+0x130>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d103      	bne.n	8007c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	615a      	str	r2, [r3, #20]
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40000400 	.word	0x40000400
 8007c5c:	40000800 	.word	0x40000800
 8007c60:	40000c00 	.word	0x40000c00
 8007c64:	40013400 	.word	0x40013400
 8007c68:	40014000 	.word	0x40014000
 8007c6c:	40014400 	.word	0x40014400
 8007c70:	40014800 	.word	0x40014800

08007c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 0302 	bic.w	r3, r3, #2
 8007cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a2c      	ldr	r2, [pc, #176]	@ (8007d80 <TIM_OC1_SetConfig+0x10c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00f      	beq.n	8007cf4 <TIM_OC1_SetConfig+0x80>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007d84 <TIM_OC1_SetConfig+0x110>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <TIM_OC1_SetConfig+0x80>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a2a      	ldr	r2, [pc, #168]	@ (8007d88 <TIM_OC1_SetConfig+0x114>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d007      	beq.n	8007cf4 <TIM_OC1_SetConfig+0x80>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a29      	ldr	r2, [pc, #164]	@ (8007d8c <TIM_OC1_SetConfig+0x118>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_OC1_SetConfig+0x80>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a28      	ldr	r2, [pc, #160]	@ (8007d90 <TIM_OC1_SetConfig+0x11c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10c      	bne.n	8007d0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f023 0308 	bic.w	r3, r3, #8
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f023 0304 	bic.w	r3, r3, #4
 8007d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1b      	ldr	r2, [pc, #108]	@ (8007d80 <TIM_OC1_SetConfig+0x10c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d00f      	beq.n	8007d36 <TIM_OC1_SetConfig+0xc2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a1a      	ldr	r2, [pc, #104]	@ (8007d84 <TIM_OC1_SetConfig+0x110>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00b      	beq.n	8007d36 <TIM_OC1_SetConfig+0xc2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a19      	ldr	r2, [pc, #100]	@ (8007d88 <TIM_OC1_SetConfig+0x114>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d007      	beq.n	8007d36 <TIM_OC1_SetConfig+0xc2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a18      	ldr	r2, [pc, #96]	@ (8007d8c <TIM_OC1_SetConfig+0x118>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <TIM_OC1_SetConfig+0xc2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a17      	ldr	r2, [pc, #92]	@ (8007d90 <TIM_OC1_SetConfig+0x11c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d111      	bne.n	8007d5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	621a      	str	r2, [r3, #32]
}
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40012c00 	.word	0x40012c00
 8007d84:	40013400 	.word	0x40013400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	40014800 	.word	0x40014800

08007d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f023 0210 	bic.w	r2, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f023 0320 	bic.w	r3, r3, #32
 8007de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a28      	ldr	r2, [pc, #160]	@ (8007e94 <TIM_OC2_SetConfig+0x100>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d003      	beq.n	8007e00 <TIM_OC2_SetConfig+0x6c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a27      	ldr	r2, [pc, #156]	@ (8007e98 <TIM_OC2_SetConfig+0x104>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d10d      	bne.n	8007e1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007e94 <TIM_OC2_SetConfig+0x100>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00f      	beq.n	8007e44 <TIM_OC2_SetConfig+0xb0>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a1c      	ldr	r2, [pc, #112]	@ (8007e98 <TIM_OC2_SetConfig+0x104>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <TIM_OC2_SetConfig+0xb0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e9c <TIM_OC2_SetConfig+0x108>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d007      	beq.n	8007e44 <TIM_OC2_SetConfig+0xb0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea0 <TIM_OC2_SetConfig+0x10c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a19      	ldr	r2, [pc, #100]	@ (8007ea4 <TIM_OC2_SetConfig+0x110>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d113      	bne.n	8007e6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40012c00 	.word	0x40012c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800

08007ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0303 	bic.w	r3, r3, #3
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a27      	ldr	r2, [pc, #156]	@ (8007fa4 <TIM_OC3_SetConfig+0xfc>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d003      	beq.n	8007f12 <TIM_OC3_SetConfig+0x6a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a26      	ldr	r2, [pc, #152]	@ (8007fa8 <TIM_OC3_SetConfig+0x100>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10d      	bne.n	8007f2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa4 <TIM_OC3_SetConfig+0xfc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00f      	beq.n	8007f56 <TIM_OC3_SetConfig+0xae>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa8 <TIM_OC3_SetConfig+0x100>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <TIM_OC3_SetConfig+0xae>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1a      	ldr	r2, [pc, #104]	@ (8007fac <TIM_OC3_SetConfig+0x104>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <TIM_OC3_SetConfig+0xae>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a19      	ldr	r2, [pc, #100]	@ (8007fb0 <TIM_OC3_SetConfig+0x108>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_OC3_SetConfig+0xae>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a18      	ldr	r2, [pc, #96]	@ (8007fb4 <TIM_OC3_SetConfig+0x10c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d113      	bne.n	8007f7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800

08007fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	031b      	lsls	r3, r3, #12
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a18      	ldr	r2, [pc, #96]	@ (8008078 <TIM_OC4_SetConfig+0xc0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00f      	beq.n	800803c <TIM_OC4_SetConfig+0x84>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a17      	ldr	r2, [pc, #92]	@ (800807c <TIM_OC4_SetConfig+0xc4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00b      	beq.n	800803c <TIM_OC4_SetConfig+0x84>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <TIM_OC4_SetConfig+0xc8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d007      	beq.n	800803c <TIM_OC4_SetConfig+0x84>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <TIM_OC4_SetConfig+0xcc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC4_SetConfig+0x84>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a14      	ldr	r2, [pc, #80]	@ (8008088 <TIM_OC4_SetConfig+0xd0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d109      	bne.n	8008050 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40013400 	.word	0x40013400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800

0800808c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a17      	ldr	r2, [pc, #92]	@ (8008140 <TIM_OC5_SetConfig+0xb4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00f      	beq.n	8008106 <TIM_OC5_SetConfig+0x7a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a16      	ldr	r2, [pc, #88]	@ (8008144 <TIM_OC5_SetConfig+0xb8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00b      	beq.n	8008106 <TIM_OC5_SetConfig+0x7a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a15      	ldr	r2, [pc, #84]	@ (8008148 <TIM_OC5_SetConfig+0xbc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d007      	beq.n	8008106 <TIM_OC5_SetConfig+0x7a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a14      	ldr	r2, [pc, #80]	@ (800814c <TIM_OC5_SetConfig+0xc0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d003      	beq.n	8008106 <TIM_OC5_SetConfig+0x7a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a13      	ldr	r2, [pc, #76]	@ (8008150 <TIM_OC5_SetConfig+0xc4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d109      	bne.n	800811a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800810c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800819a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	051b      	lsls	r3, r3, #20
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a18      	ldr	r2, [pc, #96]	@ (800820c <TIM_OC6_SetConfig+0xb8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00f      	beq.n	80081d0 <TIM_OC6_SetConfig+0x7c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <TIM_OC6_SetConfig+0xbc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00b      	beq.n	80081d0 <TIM_OC6_SetConfig+0x7c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a16      	ldr	r2, [pc, #88]	@ (8008214 <TIM_OC6_SetConfig+0xc0>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d007      	beq.n	80081d0 <TIM_OC6_SetConfig+0x7c>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a15      	ldr	r2, [pc, #84]	@ (8008218 <TIM_OC6_SetConfig+0xc4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC6_SetConfig+0x7c>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a14      	ldr	r2, [pc, #80]	@ (800821c <TIM_OC6_SetConfig+0xc8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d109      	bne.n	80081e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40012c00 	.word	0x40012c00
 8008210:	40013400 	.word	0x40013400
 8008214:	40014000 	.word	0x40014000
 8008218:	40014400 	.word	0x40014400
 800821c:	40014800 	.word	0x40014800

08008220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 031f 	and.w	r3, r3, #31
 8008232:	2201      	movs	r2, #1
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1a      	ldr	r2, [r3, #32]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	43db      	mvns	r3, r3
 8008242:	401a      	ands	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	431a      	orrs	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008280:	2302      	movs	r3, #2
 8008282:	e068      	b.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a2e      	ldr	r2, [pc, #184]	@ (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a2d      	ldr	r2, [pc, #180]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d108      	bne.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80082be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01d      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f6:	d018      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1a      	ldr	r2, [pc, #104]	@ (8008370 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a13      	ldr	r2, [pc, #76]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a14      	ldr	r2, [pc, #80]	@ (8008378 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d10c      	bne.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4313      	orrs	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40014000 	.word	0x40014000

0800837c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e040      	b.n	8008410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f83a 	bl	8008418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	@ 0x24
 80083a8:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8ca 	bl	8008554 <UART_SetConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e022      	b.n	8008410 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb78 	bl	8008ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fbff 	bl	8008c0c <UART_CheckIdleState>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	@ 0x28
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	4613      	mov	r3, r2
 800843a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008440:	2b20      	cmp	r3, #32
 8008442:	f040 8081 	bne.w	8008548 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_UART_Transmit+0x26>
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e079      	b.n	800854a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_UART_Transmit+0x38>
 8008460:	2302      	movs	r3, #2
 8008462:	e072      	b.n	800854a <HAL_UART_Transmit+0x11e>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2221      	movs	r2, #33	@ 0x21
 8008478:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800847a:	f7fb fb93 	bl	8003ba4 <HAL_GetTick>
 800847e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008498:	d108      	bne.n	80084ac <HAL_UART_Transmit+0x80>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	e003      	b.n	80084b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 80084bc:	e02c      	b.n	8008518 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2180      	movs	r1, #128	@ 0x80
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fbe8 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e038      	b.n	800854a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ea:	b292      	uxth	r2, r2
 80084ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	3302      	adds	r3, #2
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e007      	b.n	8008506 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1cc      	bne.n	80084be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	2140      	movs	r1, #64	@ 0x40
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fbb5 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e005      	b.n	800854a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008558:	b08a      	sub	sp, #40	@ 0x28
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	431a      	orrs	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	431a      	orrs	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	4313      	orrs	r3, r2
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4ba4      	ldr	r3, [pc, #656]	@ (8008814 <UART_SetConfig+0x2c0>)
 8008584:	4013      	ands	r3, r2
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	6812      	ldr	r2, [r2, #0]
 800858a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800858c:	430b      	orrs	r3, r1
 800858e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a99      	ldr	r2, [pc, #612]	@ (8008818 <UART_SetConfig+0x2c4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d004      	beq.n	80085c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085bc:	4313      	orrs	r3, r2
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d0:	430a      	orrs	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a90      	ldr	r2, [pc, #576]	@ (800881c <UART_SetConfig+0x2c8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d126      	bne.n	800862c <UART_SetConfig+0xd8>
 80085de:	4b90      	ldr	r3, [pc, #576]	@ (8008820 <UART_SetConfig+0x2cc>)
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d81b      	bhi.n	8008624 <UART_SetConfig+0xd0>
 80085ec:	a201      	add	r2, pc, #4	@ (adr r2, 80085f4 <UART_SetConfig+0xa0>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008605 	.word	0x08008605
 80085f8:	08008615 	.word	0x08008615
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800860a:	e116      	b.n	800883a <UART_SetConfig+0x2e6>
 800860c:	2302      	movs	r3, #2
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008612:	e112      	b.n	800883a <UART_SetConfig+0x2e6>
 8008614:	2304      	movs	r3, #4
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861a:	e10e      	b.n	800883a <UART_SetConfig+0x2e6>
 800861c:	2308      	movs	r3, #8
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e10a      	b.n	800883a <UART_SetConfig+0x2e6>
 8008624:	2310      	movs	r3, #16
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e106      	b.n	800883a <UART_SetConfig+0x2e6>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a7c      	ldr	r2, [pc, #496]	@ (8008824 <UART_SetConfig+0x2d0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d138      	bne.n	80086a8 <UART_SetConfig+0x154>
 8008636:	4b7a      	ldr	r3, [pc, #488]	@ (8008820 <UART_SetConfig+0x2cc>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863c:	f003 030c 	and.w	r3, r3, #12
 8008640:	2b0c      	cmp	r3, #12
 8008642:	d82d      	bhi.n	80086a0 <UART_SetConfig+0x14c>
 8008644:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <UART_SetConfig+0xf8>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008681 	.word	0x08008681
 8008650:	080086a1 	.word	0x080086a1
 8008654:	080086a1 	.word	0x080086a1
 8008658:	080086a1 	.word	0x080086a1
 800865c:	08008691 	.word	0x08008691
 8008660:	080086a1 	.word	0x080086a1
 8008664:	080086a1 	.word	0x080086a1
 8008668:	080086a1 	.word	0x080086a1
 800866c:	08008689 	.word	0x08008689
 8008670:	080086a1 	.word	0x080086a1
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086a1 	.word	0x080086a1
 800867c:	08008699 	.word	0x08008699
 8008680:	2300      	movs	r3, #0
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008686:	e0d8      	b.n	800883a <UART_SetConfig+0x2e6>
 8008688:	2302      	movs	r3, #2
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868e:	e0d4      	b.n	800883a <UART_SetConfig+0x2e6>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008696:	e0d0      	b.n	800883a <UART_SetConfig+0x2e6>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869e:	e0cc      	b.n	800883a <UART_SetConfig+0x2e6>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a6:	e0c8      	b.n	800883a <UART_SetConfig+0x2e6>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a5e      	ldr	r2, [pc, #376]	@ (8008828 <UART_SetConfig+0x2d4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d125      	bne.n	80086fe <UART_SetConfig+0x1aa>
 80086b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008820 <UART_SetConfig+0x2cc>)
 80086b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086bc:	2b30      	cmp	r3, #48	@ 0x30
 80086be:	d016      	beq.n	80086ee <UART_SetConfig+0x19a>
 80086c0:	2b30      	cmp	r3, #48	@ 0x30
 80086c2:	d818      	bhi.n	80086f6 <UART_SetConfig+0x1a2>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d00a      	beq.n	80086de <UART_SetConfig+0x18a>
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d814      	bhi.n	80086f6 <UART_SetConfig+0x1a2>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <UART_SetConfig+0x182>
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d008      	beq.n	80086e6 <UART_SetConfig+0x192>
 80086d4:	e00f      	b.n	80086f6 <UART_SetConfig+0x1a2>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086dc:	e0ad      	b.n	800883a <UART_SetConfig+0x2e6>
 80086de:	2302      	movs	r3, #2
 80086e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e4:	e0a9      	b.n	800883a <UART_SetConfig+0x2e6>
 80086e6:	2304      	movs	r3, #4
 80086e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ec:	e0a5      	b.n	800883a <UART_SetConfig+0x2e6>
 80086ee:	2308      	movs	r3, #8
 80086f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f4:	e0a1      	b.n	800883a <UART_SetConfig+0x2e6>
 80086f6:	2310      	movs	r3, #16
 80086f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fc:	e09d      	b.n	800883a <UART_SetConfig+0x2e6>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a4a      	ldr	r2, [pc, #296]	@ (800882c <UART_SetConfig+0x2d8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d125      	bne.n	8008754 <UART_SetConfig+0x200>
 8008708:	4b45      	ldr	r3, [pc, #276]	@ (8008820 <UART_SetConfig+0x2cc>)
 800870a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008712:	2bc0      	cmp	r3, #192	@ 0xc0
 8008714:	d016      	beq.n	8008744 <UART_SetConfig+0x1f0>
 8008716:	2bc0      	cmp	r3, #192	@ 0xc0
 8008718:	d818      	bhi.n	800874c <UART_SetConfig+0x1f8>
 800871a:	2b80      	cmp	r3, #128	@ 0x80
 800871c:	d00a      	beq.n	8008734 <UART_SetConfig+0x1e0>
 800871e:	2b80      	cmp	r3, #128	@ 0x80
 8008720:	d814      	bhi.n	800874c <UART_SetConfig+0x1f8>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <UART_SetConfig+0x1d8>
 8008726:	2b40      	cmp	r3, #64	@ 0x40
 8008728:	d008      	beq.n	800873c <UART_SetConfig+0x1e8>
 800872a:	e00f      	b.n	800874c <UART_SetConfig+0x1f8>
 800872c:	2300      	movs	r3, #0
 800872e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008732:	e082      	b.n	800883a <UART_SetConfig+0x2e6>
 8008734:	2302      	movs	r3, #2
 8008736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800873a:	e07e      	b.n	800883a <UART_SetConfig+0x2e6>
 800873c:	2304      	movs	r3, #4
 800873e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008742:	e07a      	b.n	800883a <UART_SetConfig+0x2e6>
 8008744:	2308      	movs	r3, #8
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874a:	e076      	b.n	800883a <UART_SetConfig+0x2e6>
 800874c:	2310      	movs	r3, #16
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008752:	e072      	b.n	800883a <UART_SetConfig+0x2e6>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a35      	ldr	r2, [pc, #212]	@ (8008830 <UART_SetConfig+0x2dc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d12a      	bne.n	80087b4 <UART_SetConfig+0x260>
 800875e:	4b30      	ldr	r3, [pc, #192]	@ (8008820 <UART_SetConfig+0x2cc>)
 8008760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800876c:	d01a      	beq.n	80087a4 <UART_SetConfig+0x250>
 800876e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008772:	d81b      	bhi.n	80087ac <UART_SetConfig+0x258>
 8008774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008778:	d00c      	beq.n	8008794 <UART_SetConfig+0x240>
 800877a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877e:	d815      	bhi.n	80087ac <UART_SetConfig+0x258>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <UART_SetConfig+0x238>
 8008784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008788:	d008      	beq.n	800879c <UART_SetConfig+0x248>
 800878a:	e00f      	b.n	80087ac <UART_SetConfig+0x258>
 800878c:	2300      	movs	r3, #0
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008792:	e052      	b.n	800883a <UART_SetConfig+0x2e6>
 8008794:	2302      	movs	r3, #2
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879a:	e04e      	b.n	800883a <UART_SetConfig+0x2e6>
 800879c:	2304      	movs	r3, #4
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087a2:	e04a      	b.n	800883a <UART_SetConfig+0x2e6>
 80087a4:	2308      	movs	r3, #8
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087aa:	e046      	b.n	800883a <UART_SetConfig+0x2e6>
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b2:	e042      	b.n	800883a <UART_SetConfig+0x2e6>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a17      	ldr	r2, [pc, #92]	@ (8008818 <UART_SetConfig+0x2c4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d13a      	bne.n	8008834 <UART_SetConfig+0x2e0>
 80087be:	4b18      	ldr	r3, [pc, #96]	@ (8008820 <UART_SetConfig+0x2cc>)
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087cc:	d01a      	beq.n	8008804 <UART_SetConfig+0x2b0>
 80087ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087d2:	d81b      	bhi.n	800880c <UART_SetConfig+0x2b8>
 80087d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d8:	d00c      	beq.n	80087f4 <UART_SetConfig+0x2a0>
 80087da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087de:	d815      	bhi.n	800880c <UART_SetConfig+0x2b8>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <UART_SetConfig+0x298>
 80087e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087e8:	d008      	beq.n	80087fc <UART_SetConfig+0x2a8>
 80087ea:	e00f      	b.n	800880c <UART_SetConfig+0x2b8>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087f2:	e022      	b.n	800883a <UART_SetConfig+0x2e6>
 80087f4:	2302      	movs	r3, #2
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fa:	e01e      	b.n	800883a <UART_SetConfig+0x2e6>
 80087fc:	2304      	movs	r3, #4
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008802:	e01a      	b.n	800883a <UART_SetConfig+0x2e6>
 8008804:	2308      	movs	r3, #8
 8008806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880a:	e016      	b.n	800883a <UART_SetConfig+0x2e6>
 800880c:	2310      	movs	r3, #16
 800880e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008812:	e012      	b.n	800883a <UART_SetConfig+0x2e6>
 8008814:	efff69f3 	.word	0xefff69f3
 8008818:	40008000 	.word	0x40008000
 800881c:	40013800 	.word	0x40013800
 8008820:	40021000 	.word	0x40021000
 8008824:	40004400 	.word	0x40004400
 8008828:	40004800 	.word	0x40004800
 800882c:	40004c00 	.word	0x40004c00
 8008830:	40005000 	.word	0x40005000
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4aa0      	ldr	r2, [pc, #640]	@ (8008ac0 <UART_SetConfig+0x56c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d17a      	bne.n	800893a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008848:	2b08      	cmp	r3, #8
 800884a:	d824      	bhi.n	8008896 <UART_SetConfig+0x342>
 800884c:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <UART_SetConfig+0x300>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008879 	.word	0x08008879
 8008858:	08008897 	.word	0x08008897
 800885c:	08008881 	.word	0x08008881
 8008860:	08008897 	.word	0x08008897
 8008864:	08008887 	.word	0x08008887
 8008868:	08008897 	.word	0x08008897
 800886c:	08008897 	.word	0x08008897
 8008870:	08008897 	.word	0x08008897
 8008874:	0800888f 	.word	0x0800888f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008878:	f7fc ffe0 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 800887c:	61f8      	str	r0, [r7, #28]
        break;
 800887e:	e010      	b.n	80088a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008880:	4b90      	ldr	r3, [pc, #576]	@ (8008ac4 <UART_SetConfig+0x570>)
 8008882:	61fb      	str	r3, [r7, #28]
        break;
 8008884:	e00d      	b.n	80088a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008886:	f7fc ff41 	bl	800570c <HAL_RCC_GetSysClockFreq>
 800888a:	61f8      	str	r0, [r7, #28]
        break;
 800888c:	e009      	b.n	80088a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008892:	61fb      	str	r3, [r7, #28]
        break;
 8008894:	e005      	b.n	80088a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80fd 	beq.w	8008aa4 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d305      	bcc.n	80088c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088cc:	e0ea      	b.n	8008aa4 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	2200      	movs	r2, #0
 80088d2:	461c      	mov	r4, r3
 80088d4:	4615      	mov	r5, r2
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	022b      	lsls	r3, r5, #8
 80088e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088e4:	0222      	lsls	r2, r4, #8
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	6849      	ldr	r1, [r1, #4]
 80088ea:	0849      	lsrs	r1, r1, #1
 80088ec:	2000      	movs	r0, #0
 80088ee:	4688      	mov	r8, r1
 80088f0:	4681      	mov	r9, r0
 80088f2:	eb12 0a08 	adds.w	sl, r2, r8
 80088f6:	eb43 0b09 	adc.w	fp, r3, r9
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008908:	4650      	mov	r0, sl
 800890a:	4659      	mov	r1, fp
 800890c:	f7f7 fcb8 	bl	8000280 <__aeabi_uldivmod>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4613      	mov	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800891e:	d308      	bcc.n	8008932 <UART_SetConfig+0x3de>
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008926:	d204      	bcs.n	8008932 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	e0b8      	b.n	8008aa4 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008938:	e0b4      	b.n	8008aa4 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008942:	d15f      	bne.n	8008a04 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8008944:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008948:	2b08      	cmp	r3, #8
 800894a:	d828      	bhi.n	800899e <UART_SetConfig+0x44a>
 800894c:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <UART_SetConfig+0x400>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	0800899f 	.word	0x0800899f
 8008964:	0800898f 	.word	0x0800898f
 8008968:	0800899f 	.word	0x0800899f
 800896c:	0800899f 	.word	0x0800899f
 8008970:	0800899f 	.word	0x0800899f
 8008974:	08008997 	.word	0x08008997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008978:	f7fc ff60 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 800897c:	61f8      	str	r0, [r7, #28]
        break;
 800897e:	e014      	b.n	80089aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008980:	f7fc ff72 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8008984:	61f8      	str	r0, [r7, #28]
        break;
 8008986:	e010      	b.n	80089aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008988:	4b4e      	ldr	r3, [pc, #312]	@ (8008ac4 <UART_SetConfig+0x570>)
 800898a:	61fb      	str	r3, [r7, #28]
        break;
 800898c:	e00d      	b.n	80089aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898e:	f7fc febd 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8008992:	61f8      	str	r0, [r7, #28]
        break;
 8008994:	e009      	b.n	80089aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800899a:	61fb      	str	r3, [r7, #28]
        break;
 800899c:	e005      	b.n	80089aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80089a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d079      	beq.n	8008aa4 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	005a      	lsls	r2, r3, #1
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d916      	bls.n	80089fc <UART_SetConfig+0x4a8>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d4:	d212      	bcs.n	80089fc <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f023 030f 	bic.w	r3, r3, #15
 80089de:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	8afb      	ldrh	r3, [r7, #22]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	8afa      	ldrh	r2, [r7, #22]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	e053      	b.n	8008aa4 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a02:	e04f      	b.n	8008aa4 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d828      	bhi.n	8008a5e <UART_SetConfig+0x50a>
 8008a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <UART_SetConfig+0x4c0>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a49 	.word	0x08008a49
 8008a20:	08008a5f 	.word	0x08008a5f
 8008a24:	08008a4f 	.word	0x08008a4f
 8008a28:	08008a5f 	.word	0x08008a5f
 8008a2c:	08008a5f 	.word	0x08008a5f
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	08008a57 	.word	0x08008a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7fc ff00 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 8008a3c:	61f8      	str	r0, [r7, #28]
        break;
 8008a3e:	e014      	b.n	8008a6a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a40:	f7fc ff12 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 8008a44:	61f8      	str	r0, [r7, #28]
        break;
 8008a46:	e010      	b.n	8008a6a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <UART_SetConfig+0x570>)
 8008a4a:	61fb      	str	r3, [r7, #28]
        break;
 8008a4c:	e00d      	b.n	8008a6a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fc fe5d 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8008a52:	61f8      	str	r0, [r7, #28]
        break;
 8008a54:	e009      	b.n	8008a6a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5a:	61fb      	str	r3, [r7, #28]
        break;
 8008a5c:	e005      	b.n	8008a6a <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a68:	bf00      	nop
    }

    if (pclk != 0U)
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d019      	beq.n	8008aa4 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	085a      	lsrs	r2, r3, #1
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b0f      	cmp	r3, #15
 8008a8a:	d908      	bls.n	8008a9e <UART_SetConfig+0x54a>
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a92:	d204      	bcs.n	8008a9e <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	60da      	str	r2, [r3, #12]
 8008a9c:	e002      	b.n	8008aa4 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8008ab0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3728      	adds	r7, #40	@ 0x28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008abe:	bf00      	nop
 8008ac0:	40008000 	.word	0x40008000
 8008ac4:	00f42400 	.word	0x00f42400

08008ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01a      	beq.n	8008bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bc6:	d10a      	bne.n	8008bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	605a      	str	r2, [r3, #4]
  }
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c1c:	f7fa ffc2 	bl	8003ba4 <HAL_GetTick>
 8008c20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0308 	and.w	r3, r3, #8
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10e      	bne.n	8008c4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f82d 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e023      	b.n	8008c96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d10e      	bne.n	8008c7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f817 	bl	8008c9e <UART_WaitOnFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e00d      	b.n	8008c96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cae:	e05e      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb6:	d05a      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb8:	f7fa ff74 	bl	8003ba4 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <UART_WaitOnFlagUntilTimeout+0x30>
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d11b      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008cdc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e043      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d02c      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d22:	d124      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d2c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008d3c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0201 	bic.w	r2, r2, #1
 8008d4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2220      	movs	r2, #32
 8008d52:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2220      	movs	r2, #32
 8008d58:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e00f      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4013      	ands	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d091      	beq.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <std>:
 8008d98:	2300      	movs	r3, #0
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008da6:	6083      	str	r3, [r0, #8]
 8008da8:	8181      	strh	r1, [r0, #12]
 8008daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dac:	81c2      	strh	r2, [r0, #14]
 8008dae:	6183      	str	r3, [r0, #24]
 8008db0:	4619      	mov	r1, r3
 8008db2:	2208      	movs	r2, #8
 8008db4:	305c      	adds	r0, #92	@ 0x5c
 8008db6:	f000 fa55 	bl	8009264 <memset>
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <std+0x58>)
 8008dbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <std+0x5c>)
 8008dc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008df8 <std+0x60>)
 8008dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <std+0x64>)
 8008dc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <std+0x68>)
 8008dcc:	6224      	str	r4, [r4, #32]
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d006      	beq.n	8008de0 <std+0x48>
 8008dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dd6:	4294      	cmp	r4, r2
 8008dd8:	d002      	beq.n	8008de0 <std+0x48>
 8008dda:	33d0      	adds	r3, #208	@ 0xd0
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d105      	bne.n	8008dec <std+0x54>
 8008de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	f000 bb5a 	b.w	80094a0 <__retarget_lock_init_recursive>
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	08009091 	.word	0x08009091
 8008df4:	080090b7 	.word	0x080090b7
 8008df8:	080090ef 	.word	0x080090ef
 8008dfc:	08009113 	.word	0x08009113
 8008e00:	2000134c 	.word	0x2000134c

08008e04 <stdio_exit_handler>:
 8008e04:	4a02      	ldr	r2, [pc, #8]	@ (8008e10 <stdio_exit_handler+0xc>)
 8008e06:	4903      	ldr	r1, [pc, #12]	@ (8008e14 <stdio_exit_handler+0x10>)
 8008e08:	4803      	ldr	r0, [pc, #12]	@ (8008e18 <stdio_exit_handler+0x14>)
 8008e0a:	f000 b869 	b.w	8008ee0 <_fwalk_sglue>
 8008e0e:	bf00      	nop
 8008e10:	2000002c 	.word	0x2000002c
 8008e14:	0800a68d 	.word	0x0800a68d
 8008e18:	2000003c 	.word	0x2000003c

08008e1c <cleanup_stdio>:
 8008e1c:	6841      	ldr	r1, [r0, #4]
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e50 <cleanup_stdio+0x34>)
 8008e20:	4299      	cmp	r1, r3
 8008e22:	b510      	push	{r4, lr}
 8008e24:	4604      	mov	r4, r0
 8008e26:	d001      	beq.n	8008e2c <cleanup_stdio+0x10>
 8008e28:	f001 fc30 	bl	800a68c <_fflush_r>
 8008e2c:	68a1      	ldr	r1, [r4, #8]
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <cleanup_stdio+0x38>)
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d002      	beq.n	8008e3a <cleanup_stdio+0x1e>
 8008e34:	4620      	mov	r0, r4
 8008e36:	f001 fc29 	bl	800a68c <_fflush_r>
 8008e3a:	68e1      	ldr	r1, [r4, #12]
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <cleanup_stdio+0x3c>)
 8008e3e:	4299      	cmp	r1, r3
 8008e40:	d004      	beq.n	8008e4c <cleanup_stdio+0x30>
 8008e42:	4620      	mov	r0, r4
 8008e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e48:	f001 bc20 	b.w	800a68c <_fflush_r>
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	2000134c 	.word	0x2000134c
 8008e54:	200013b4 	.word	0x200013b4
 8008e58:	2000141c 	.word	0x2000141c

08008e5c <global_stdio_init.part.0>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <global_stdio_init.part.0+0x30>)
 8008e60:	4c0b      	ldr	r4, [pc, #44]	@ (8008e90 <global_stdio_init.part.0+0x34>)
 8008e62:	4a0c      	ldr	r2, [pc, #48]	@ (8008e94 <global_stdio_init.part.0+0x38>)
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	4620      	mov	r0, r4
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	f7ff ff94 	bl	8008d98 <std>
 8008e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e74:	2201      	movs	r2, #1
 8008e76:	2109      	movs	r1, #9
 8008e78:	f7ff ff8e 	bl	8008d98 <std>
 8008e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e80:	2202      	movs	r2, #2
 8008e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e86:	2112      	movs	r1, #18
 8008e88:	f7ff bf86 	b.w	8008d98 <std>
 8008e8c:	20001484 	.word	0x20001484
 8008e90:	2000134c 	.word	0x2000134c
 8008e94:	08008e05 	.word	0x08008e05

08008e98 <__sfp_lock_acquire>:
 8008e98:	4801      	ldr	r0, [pc, #4]	@ (8008ea0 <__sfp_lock_acquire+0x8>)
 8008e9a:	f000 bb02 	b.w	80094a2 <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2000148d 	.word	0x2000148d

08008ea4 <__sfp_lock_release>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	@ (8008eac <__sfp_lock_release+0x8>)
 8008ea6:	f000 bafd 	b.w	80094a4 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	2000148d 	.word	0x2000148d

08008eb0 <__sinit>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	f7ff fff0 	bl	8008e98 <__sfp_lock_acquire>
 8008eb8:	6a23      	ldr	r3, [r4, #32]
 8008eba:	b11b      	cbz	r3, 8008ec4 <__sinit+0x14>
 8008ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec0:	f7ff bff0 	b.w	8008ea4 <__sfp_lock_release>
 8008ec4:	4b04      	ldr	r3, [pc, #16]	@ (8008ed8 <__sinit+0x28>)
 8008ec6:	6223      	str	r3, [r4, #32]
 8008ec8:	4b04      	ldr	r3, [pc, #16]	@ (8008edc <__sinit+0x2c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1f5      	bne.n	8008ebc <__sinit+0xc>
 8008ed0:	f7ff ffc4 	bl	8008e5c <global_stdio_init.part.0>
 8008ed4:	e7f2      	b.n	8008ebc <__sinit+0xc>
 8008ed6:	bf00      	nop
 8008ed8:	08008e1d 	.word	0x08008e1d
 8008edc:	20001484 	.word	0x20001484

08008ee0 <_fwalk_sglue>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	4688      	mov	r8, r1
 8008ee8:	4614      	mov	r4, r2
 8008eea:	2600      	movs	r6, #0
 8008eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ef4:	d505      	bpl.n	8008f02 <_fwalk_sglue+0x22>
 8008ef6:	6824      	ldr	r4, [r4, #0]
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	d1f7      	bne.n	8008eec <_fwalk_sglue+0xc>
 8008efc:	4630      	mov	r0, r6
 8008efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d907      	bls.n	8008f18 <_fwalk_sglue+0x38>
 8008f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	d003      	beq.n	8008f18 <_fwalk_sglue+0x38>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4638      	mov	r0, r7
 8008f14:	47c0      	blx	r8
 8008f16:	4306      	orrs	r6, r0
 8008f18:	3568      	adds	r5, #104	@ 0x68
 8008f1a:	e7e9      	b.n	8008ef0 <_fwalk_sglue+0x10>

08008f1c <iprintf>:
 8008f1c:	b40f      	push	{r0, r1, r2, r3}
 8008f1e:	b507      	push	{r0, r1, r2, lr}
 8008f20:	4906      	ldr	r1, [pc, #24]	@ (8008f3c <iprintf+0x20>)
 8008f22:	ab04      	add	r3, sp, #16
 8008f24:	6808      	ldr	r0, [r1, #0]
 8008f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f2a:	6881      	ldr	r1, [r0, #8]
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	f000 ff35 	bl	8009d9c <_vfiprintf_r>
 8008f32:	b003      	add	sp, #12
 8008f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f38:	b004      	add	sp, #16
 8008f3a:	4770      	bx	lr
 8008f3c:	20000038 	.word	0x20000038

08008f40 <_puts_r>:
 8008f40:	6a03      	ldr	r3, [r0, #32]
 8008f42:	b570      	push	{r4, r5, r6, lr}
 8008f44:	6884      	ldr	r4, [r0, #8]
 8008f46:	4605      	mov	r5, r0
 8008f48:	460e      	mov	r6, r1
 8008f4a:	b90b      	cbnz	r3, 8008f50 <_puts_r+0x10>
 8008f4c:	f7ff ffb0 	bl	8008eb0 <__sinit>
 8008f50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d405      	bmi.n	8008f62 <_puts_r+0x22>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	0598      	lsls	r0, r3, #22
 8008f5a:	d402      	bmi.n	8008f62 <_puts_r+0x22>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f5e:	f000 faa0 	bl	80094a2 <__retarget_lock_acquire_recursive>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	0719      	lsls	r1, r3, #28
 8008f66:	d502      	bpl.n	8008f6e <_puts_r+0x2e>
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d135      	bne.n	8008fda <_puts_r+0x9a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f911 	bl	8009198 <__swsetup_r>
 8008f76:	b380      	cbz	r0, 8008fda <_puts_r+0x9a>
 8008f78:	f04f 35ff 	mov.w	r5, #4294967295
 8008f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f7e:	07da      	lsls	r2, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_puts_r+0x4e>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	059b      	lsls	r3, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_puts_r+0x4e>
 8008f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8a:	f000 fa8b 	bl	80094a4 <__retarget_lock_release_recursive>
 8008f8e:	4628      	mov	r0, r5
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da04      	bge.n	8008fa0 <_puts_r+0x60>
 8008f96:	69a2      	ldr	r2, [r4, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	dc17      	bgt.n	8008fcc <_puts_r+0x8c>
 8008f9c:	290a      	cmp	r1, #10
 8008f9e:	d015      	beq.n	8008fcc <_puts_r+0x8c>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	7019      	strb	r1, [r3, #0]
 8008fa8:	68a3      	ldr	r3, [r4, #8]
 8008faa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	60a3      	str	r3, [r4, #8]
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	d1ed      	bne.n	8008f92 <_puts_r+0x52>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da11      	bge.n	8008fde <_puts_r+0x9e>
 8008fba:	4622      	mov	r2, r4
 8008fbc:	210a      	movs	r1, #10
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 f8ab 	bl	800911a <__swbuf_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d0d7      	beq.n	8008f78 <_puts_r+0x38>
 8008fc8:	250a      	movs	r5, #10
 8008fca:	e7d7      	b.n	8008f7c <_puts_r+0x3c>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f8a3 	bl	800911a <__swbuf_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d1e7      	bne.n	8008fa8 <_puts_r+0x68>
 8008fd8:	e7ce      	b.n	8008f78 <_puts_r+0x38>
 8008fda:	3e01      	subs	r6, #1
 8008fdc:	e7e4      	b.n	8008fa8 <_puts_r+0x68>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	6022      	str	r2, [r4, #0]
 8008fe4:	220a      	movs	r2, #10
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e7ee      	b.n	8008fc8 <_puts_r+0x88>
	...

08008fec <puts>:
 8008fec:	4b02      	ldr	r3, [pc, #8]	@ (8008ff8 <puts+0xc>)
 8008fee:	4601      	mov	r1, r0
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	f7ff bfa5 	b.w	8008f40 <_puts_r>
 8008ff6:	bf00      	nop
 8008ff8:	20000038 	.word	0x20000038

08008ffc <siprintf>:
 8008ffc:	b40e      	push	{r1, r2, r3}
 8008ffe:	b500      	push	{lr}
 8009000:	b09c      	sub	sp, #112	@ 0x70
 8009002:	ab1d      	add	r3, sp, #116	@ 0x74
 8009004:	9002      	str	r0, [sp, #8]
 8009006:	9006      	str	r0, [sp, #24]
 8009008:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800900c:	4809      	ldr	r0, [pc, #36]	@ (8009034 <siprintf+0x38>)
 800900e:	9107      	str	r1, [sp, #28]
 8009010:	9104      	str	r1, [sp, #16]
 8009012:	4909      	ldr	r1, [pc, #36]	@ (8009038 <siprintf+0x3c>)
 8009014:	f853 2b04 	ldr.w	r2, [r3], #4
 8009018:	9105      	str	r1, [sp, #20]
 800901a:	6800      	ldr	r0, [r0, #0]
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	a902      	add	r1, sp, #8
 8009020:	f000 fbca 	bl	80097b8 <_svfiprintf_r>
 8009024:	9b02      	ldr	r3, [sp, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	b01c      	add	sp, #112	@ 0x70
 800902c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009030:	b003      	add	sp, #12
 8009032:	4770      	bx	lr
 8009034:	20000038 	.word	0x20000038
 8009038:	ffff0208 	.word	0xffff0208

0800903c <siscanf>:
 800903c:	b40e      	push	{r1, r2, r3}
 800903e:	b530      	push	{r4, r5, lr}
 8009040:	b09c      	sub	sp, #112	@ 0x70
 8009042:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009044:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009048:	f854 5b04 	ldr.w	r5, [r4], #4
 800904c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009050:	9002      	str	r0, [sp, #8]
 8009052:	9006      	str	r0, [sp, #24]
 8009054:	f7f7 f8bc 	bl	80001d0 <strlen>
 8009058:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <siscanf+0x4c>)
 800905a:	9003      	str	r0, [sp, #12]
 800905c:	9007      	str	r0, [sp, #28]
 800905e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009060:	480a      	ldr	r0, [pc, #40]	@ (800908c <siscanf+0x50>)
 8009062:	9401      	str	r4, [sp, #4]
 8009064:	2300      	movs	r3, #0
 8009066:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009068:	9314      	str	r3, [sp, #80]	@ 0x50
 800906a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800906e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009072:	462a      	mov	r2, r5
 8009074:	4623      	mov	r3, r4
 8009076:	a902      	add	r1, sp, #8
 8009078:	6800      	ldr	r0, [r0, #0]
 800907a:	f000 fcf1 	bl	8009a60 <__ssvfiscanf_r>
 800907e:	b01c      	add	sp, #112	@ 0x70
 8009080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009084:	b003      	add	sp, #12
 8009086:	4770      	bx	lr
 8009088:	080090b3 	.word	0x080090b3
 800908c:	20000038 	.word	0x20000038

08009090 <__sread>:
 8009090:	b510      	push	{r4, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	f000 f9b4 	bl	8009404 <_read_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	bfab      	itete	ge
 80090a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090a2:	89a3      	ldrhlt	r3, [r4, #12]
 80090a4:	181b      	addge	r3, r3, r0
 80090a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090aa:	bfac      	ite	ge
 80090ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090ae:	81a3      	strhlt	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__seofread>:
 80090b2:	2000      	movs	r0, #0
 80090b4:	4770      	bx	lr

080090b6 <__swrite>:
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	461f      	mov	r7, r3
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	05db      	lsls	r3, r3, #23
 80090c0:	4605      	mov	r5, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	4616      	mov	r6, r2
 80090c6:	d505      	bpl.n	80090d4 <__swrite+0x1e>
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	2302      	movs	r3, #2
 80090ce:	2200      	movs	r2, #0
 80090d0:	f000 f986 	bl	80093e0 <_lseek_r>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ea:	f000 b99d 	b.w	8009428 <_write_r>

080090ee <__sseek>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f6:	f000 f973 	bl	80093e0 <_lseek_r>
 80090fa:	1c43      	adds	r3, r0, #1
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	bf15      	itete	ne
 8009100:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800910a:	81a3      	strheq	r3, [r4, #12]
 800910c:	bf18      	it	ne
 800910e:	81a3      	strhne	r3, [r4, #12]
 8009110:	bd10      	pop	{r4, pc}

08009112 <__sclose>:
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f000 b953 	b.w	80093c0 <_close_r>

0800911a <__swbuf_r>:
 800911a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911c:	460e      	mov	r6, r1
 800911e:	4614      	mov	r4, r2
 8009120:	4605      	mov	r5, r0
 8009122:	b118      	cbz	r0, 800912c <__swbuf_r+0x12>
 8009124:	6a03      	ldr	r3, [r0, #32]
 8009126:	b90b      	cbnz	r3, 800912c <__swbuf_r+0x12>
 8009128:	f7ff fec2 	bl	8008eb0 <__sinit>
 800912c:	69a3      	ldr	r3, [r4, #24]
 800912e:	60a3      	str	r3, [r4, #8]
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	071a      	lsls	r2, r3, #28
 8009134:	d501      	bpl.n	800913a <__swbuf_r+0x20>
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	b943      	cbnz	r3, 800914c <__swbuf_r+0x32>
 800913a:	4621      	mov	r1, r4
 800913c:	4628      	mov	r0, r5
 800913e:	f000 f82b 	bl	8009198 <__swsetup_r>
 8009142:	b118      	cbz	r0, 800914c <__swbuf_r+0x32>
 8009144:	f04f 37ff 	mov.w	r7, #4294967295
 8009148:	4638      	mov	r0, r7
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	1a98      	subs	r0, r3, r2
 8009152:	6963      	ldr	r3, [r4, #20]
 8009154:	b2f6      	uxtb	r6, r6
 8009156:	4283      	cmp	r3, r0
 8009158:	4637      	mov	r7, r6
 800915a:	dc05      	bgt.n	8009168 <__swbuf_r+0x4e>
 800915c:	4621      	mov	r1, r4
 800915e:	4628      	mov	r0, r5
 8009160:	f001 fa94 	bl	800a68c <_fflush_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	d1ed      	bne.n	8009144 <__swbuf_r+0x2a>
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	3b01      	subs	r3, #1
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	701e      	strb	r6, [r3, #0]
 8009176:	6962      	ldr	r2, [r4, #20]
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	429a      	cmp	r2, r3
 800917c:	d004      	beq.n	8009188 <__swbuf_r+0x6e>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	07db      	lsls	r3, r3, #31
 8009182:	d5e1      	bpl.n	8009148 <__swbuf_r+0x2e>
 8009184:	2e0a      	cmp	r6, #10
 8009186:	d1df      	bne.n	8009148 <__swbuf_r+0x2e>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f001 fa7e 	bl	800a68c <_fflush_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0d9      	beq.n	8009148 <__swbuf_r+0x2e>
 8009194:	e7d6      	b.n	8009144 <__swbuf_r+0x2a>
	...

08009198 <__swsetup_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4b29      	ldr	r3, [pc, #164]	@ (8009240 <__swsetup_r+0xa8>)
 800919c:	4605      	mov	r5, r0
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	460c      	mov	r4, r1
 80091a2:	b118      	cbz	r0, 80091ac <__swsetup_r+0x14>
 80091a4:	6a03      	ldr	r3, [r0, #32]
 80091a6:	b90b      	cbnz	r3, 80091ac <__swsetup_r+0x14>
 80091a8:	f7ff fe82 	bl	8008eb0 <__sinit>
 80091ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b0:	0719      	lsls	r1, r3, #28
 80091b2:	d422      	bmi.n	80091fa <__swsetup_r+0x62>
 80091b4:	06da      	lsls	r2, r3, #27
 80091b6:	d407      	bmi.n	80091c8 <__swsetup_r+0x30>
 80091b8:	2209      	movs	r2, #9
 80091ba:	602a      	str	r2, [r5, #0]
 80091bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	f04f 30ff 	mov.w	r0, #4294967295
 80091c6:	e033      	b.n	8009230 <__swsetup_r+0x98>
 80091c8:	0758      	lsls	r0, r3, #29
 80091ca:	d512      	bpl.n	80091f2 <__swsetup_r+0x5a>
 80091cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091ce:	b141      	cbz	r1, 80091e2 <__swsetup_r+0x4a>
 80091d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091d4:	4299      	cmp	r1, r3
 80091d6:	d002      	beq.n	80091de <__swsetup_r+0x46>
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 f991 	bl	8009500 <_free_r>
 80091de:	2300      	movs	r3, #0
 80091e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	2300      	movs	r3, #0
 80091ec:	6063      	str	r3, [r4, #4]
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f043 0308 	orr.w	r3, r3, #8
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	b94b      	cbnz	r3, 8009212 <__swsetup_r+0x7a>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009208:	d003      	beq.n	8009212 <__swsetup_r+0x7a>
 800920a:	4621      	mov	r1, r4
 800920c:	4628      	mov	r0, r5
 800920e:	f001 fa9d 	bl	800a74c <__smakebuf_r>
 8009212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009216:	f013 0201 	ands.w	r2, r3, #1
 800921a:	d00a      	beq.n	8009232 <__swsetup_r+0x9a>
 800921c:	2200      	movs	r2, #0
 800921e:	60a2      	str	r2, [r4, #8]
 8009220:	6962      	ldr	r2, [r4, #20]
 8009222:	4252      	negs	r2, r2
 8009224:	61a2      	str	r2, [r4, #24]
 8009226:	6922      	ldr	r2, [r4, #16]
 8009228:	b942      	cbnz	r2, 800923c <__swsetup_r+0xa4>
 800922a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800922e:	d1c5      	bne.n	80091bc <__swsetup_r+0x24>
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	0799      	lsls	r1, r3, #30
 8009234:	bf58      	it	pl
 8009236:	6962      	ldrpl	r2, [r4, #20]
 8009238:	60a2      	str	r2, [r4, #8]
 800923a:	e7f4      	b.n	8009226 <__swsetup_r+0x8e>
 800923c:	2000      	movs	r0, #0
 800923e:	e7f7      	b.n	8009230 <__swsetup_r+0x98>
 8009240:	20000038 	.word	0x20000038

08009244 <memcmp>:
 8009244:	b510      	push	{r4, lr}
 8009246:	3901      	subs	r1, #1
 8009248:	4402      	add	r2, r0
 800924a:	4290      	cmp	r0, r2
 800924c:	d101      	bne.n	8009252 <memcmp+0xe>
 800924e:	2000      	movs	r0, #0
 8009250:	e005      	b.n	800925e <memcmp+0x1a>
 8009252:	7803      	ldrb	r3, [r0, #0]
 8009254:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009258:	42a3      	cmp	r3, r4
 800925a:	d001      	beq.n	8009260 <memcmp+0x1c>
 800925c:	1b18      	subs	r0, r3, r4
 800925e:	bd10      	pop	{r4, pc}
 8009260:	3001      	adds	r0, #1
 8009262:	e7f2      	b.n	800924a <memcmp+0x6>

08009264 <memset>:
 8009264:	4402      	add	r2, r0
 8009266:	4603      	mov	r3, r0
 8009268:	4293      	cmp	r3, r2
 800926a:	d100      	bne.n	800926e <memset+0xa>
 800926c:	4770      	bx	lr
 800926e:	f803 1b01 	strb.w	r1, [r3], #1
 8009272:	e7f9      	b.n	8009268 <memset+0x4>

08009274 <strcat>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4602      	mov	r2, r0
 8009278:	7814      	ldrb	r4, [r2, #0]
 800927a:	4613      	mov	r3, r2
 800927c:	3201      	adds	r2, #1
 800927e:	2c00      	cmp	r4, #0
 8009280:	d1fa      	bne.n	8009278 <strcat+0x4>
 8009282:	3b01      	subs	r3, #1
 8009284:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009288:	f803 2f01 	strb.w	r2, [r3, #1]!
 800928c:	2a00      	cmp	r2, #0
 800928e:	d1f9      	bne.n	8009284 <strcat+0x10>
 8009290:	bd10      	pop	{r4, pc}

08009292 <strncmp>:
 8009292:	b510      	push	{r4, lr}
 8009294:	b16a      	cbz	r2, 80092b2 <strncmp+0x20>
 8009296:	3901      	subs	r1, #1
 8009298:	1884      	adds	r4, r0, r2
 800929a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800929e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d103      	bne.n	80092ae <strncmp+0x1c>
 80092a6:	42a0      	cmp	r0, r4
 80092a8:	d001      	beq.n	80092ae <strncmp+0x1c>
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	d1f5      	bne.n	800929a <strncmp+0x8>
 80092ae:	1ad0      	subs	r0, r2, r3
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	4610      	mov	r0, r2
 80092b4:	e7fc      	b.n	80092b0 <strncmp+0x1e>

080092b6 <strncpy>:
 80092b6:	b510      	push	{r4, lr}
 80092b8:	3901      	subs	r1, #1
 80092ba:	4603      	mov	r3, r0
 80092bc:	b132      	cbz	r2, 80092cc <strncpy+0x16>
 80092be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092c2:	f803 4b01 	strb.w	r4, [r3], #1
 80092c6:	3a01      	subs	r2, #1
 80092c8:	2c00      	cmp	r4, #0
 80092ca:	d1f7      	bne.n	80092bc <strncpy+0x6>
 80092cc:	441a      	add	r2, r3
 80092ce:	2100      	movs	r1, #0
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d100      	bne.n	80092d6 <strncpy+0x20>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	f803 1b01 	strb.w	r1, [r3], #1
 80092da:	e7f9      	b.n	80092d0 <strncpy+0x1a>

080092dc <strtok>:
 80092dc:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <strtok+0x5c>)
 80092de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e2:	681f      	ldr	r7, [r3, #0]
 80092e4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80092e6:	4605      	mov	r5, r0
 80092e8:	460e      	mov	r6, r1
 80092ea:	b9ec      	cbnz	r4, 8009328 <strtok+0x4c>
 80092ec:	2050      	movs	r0, #80	@ 0x50
 80092ee:	f000 f951 	bl	8009594 <malloc>
 80092f2:	4602      	mov	r2, r0
 80092f4:	6478      	str	r0, [r7, #68]	@ 0x44
 80092f6:	b920      	cbnz	r0, 8009302 <strtok+0x26>
 80092f8:	4b10      	ldr	r3, [pc, #64]	@ (800933c <strtok+0x60>)
 80092fa:	4811      	ldr	r0, [pc, #68]	@ (8009340 <strtok+0x64>)
 80092fc:	215b      	movs	r1, #91	@ 0x5b
 80092fe:	f000 f8e1 	bl	80094c4 <__assert_func>
 8009302:	e9c0 4400 	strd	r4, r4, [r0]
 8009306:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800930a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800930e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009312:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009316:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800931a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800931e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009322:	6184      	str	r4, [r0, #24]
 8009324:	7704      	strb	r4, [r0, #28]
 8009326:	6244      	str	r4, [r0, #36]	@ 0x24
 8009328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	2301      	movs	r3, #1
 8009330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	f000 b806 	b.w	8009344 <__strtok_r>
 8009338:	20000038 	.word	0x20000038
 800933c:	0800b9f0 	.word	0x0800b9f0
 8009340:	0800ba07 	.word	0x0800ba07

08009344 <__strtok_r>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	4604      	mov	r4, r0
 8009348:	b908      	cbnz	r0, 800934e <__strtok_r+0xa>
 800934a:	6814      	ldr	r4, [r2, #0]
 800934c:	b144      	cbz	r4, 8009360 <__strtok_r+0x1c>
 800934e:	4620      	mov	r0, r4
 8009350:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009354:	460f      	mov	r7, r1
 8009356:	f817 6b01 	ldrb.w	r6, [r7], #1
 800935a:	b91e      	cbnz	r6, 8009364 <__strtok_r+0x20>
 800935c:	b965      	cbnz	r5, 8009378 <__strtok_r+0x34>
 800935e:	6015      	str	r5, [r2, #0]
 8009360:	2000      	movs	r0, #0
 8009362:	e005      	b.n	8009370 <__strtok_r+0x2c>
 8009364:	42b5      	cmp	r5, r6
 8009366:	d1f6      	bne.n	8009356 <__strtok_r+0x12>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f0      	bne.n	800934e <__strtok_r+0xa>
 800936c:	6014      	str	r4, [r2, #0]
 800936e:	7003      	strb	r3, [r0, #0]
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	461c      	mov	r4, r3
 8009374:	e00c      	b.n	8009390 <__strtok_r+0x4c>
 8009376:	b915      	cbnz	r5, 800937e <__strtok_r+0x3a>
 8009378:	f814 3b01 	ldrb.w	r3, [r4], #1
 800937c:	460e      	mov	r6, r1
 800937e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009382:	42ab      	cmp	r3, r5
 8009384:	d1f7      	bne.n	8009376 <__strtok_r+0x32>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0f3      	beq.n	8009372 <__strtok_r+0x2e>
 800938a:	2300      	movs	r3, #0
 800938c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	e7ed      	b.n	8009370 <__strtok_r+0x2c>

08009394 <strstr>:
 8009394:	780a      	ldrb	r2, [r1, #0]
 8009396:	b570      	push	{r4, r5, r6, lr}
 8009398:	b96a      	cbnz	r2, 80093b6 <strstr+0x22>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	429a      	cmp	r2, r3
 800939e:	d109      	bne.n	80093b4 <strstr+0x20>
 80093a0:	460c      	mov	r4, r1
 80093a2:	4605      	mov	r5, r0
 80093a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0f6      	beq.n	800939a <strstr+0x6>
 80093ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80093b0:	429e      	cmp	r6, r3
 80093b2:	d0f7      	beq.n	80093a4 <strstr+0x10>
 80093b4:	3001      	adds	r0, #1
 80093b6:	7803      	ldrb	r3, [r0, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1ef      	bne.n	800939c <strstr+0x8>
 80093bc:	4618      	mov	r0, r3
 80093be:	e7ec      	b.n	800939a <strstr+0x6>

080093c0 <_close_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	@ (80093dc <_close_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f9 fe87 	bl	80030de <_close>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_close_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_close_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20001488 	.word	0x20001488

080093e0 <_lseek_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	@ (8009400 <_lseek_r+0x20>)
 80093e4:	4604      	mov	r4, r0
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f9 fe9c 	bl	800312c <_lseek>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_lseek_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_lseek_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20001488 	.word	0x20001488

08009404 <_read_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	@ (8009424 <_read_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f9 fe2a 	bl	800306c <_read>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_read_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_read_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20001488 	.word	0x20001488

08009428 <_write_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	@ (8009448 <_write_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f9 fe35 	bl	80030a6 <_write>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_write_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_write_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20001488 	.word	0x20001488

0800944c <__errno>:
 800944c:	4b01      	ldr	r3, [pc, #4]	@ (8009454 <__errno+0x8>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20000038 	.word	0x20000038

08009458 <__libc_init_array>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	4d0d      	ldr	r5, [pc, #52]	@ (8009490 <__libc_init_array+0x38>)
 800945c:	4c0d      	ldr	r4, [pc, #52]	@ (8009494 <__libc_init_array+0x3c>)
 800945e:	1b64      	subs	r4, r4, r5
 8009460:	10a4      	asrs	r4, r4, #2
 8009462:	2600      	movs	r6, #0
 8009464:	42a6      	cmp	r6, r4
 8009466:	d109      	bne.n	800947c <__libc_init_array+0x24>
 8009468:	4d0b      	ldr	r5, [pc, #44]	@ (8009498 <__libc_init_array+0x40>)
 800946a:	4c0c      	ldr	r4, [pc, #48]	@ (800949c <__libc_init_array+0x44>)
 800946c:	f001 fbd8 	bl	800ac20 <_init>
 8009470:	1b64      	subs	r4, r4, r5
 8009472:	10a4      	asrs	r4, r4, #2
 8009474:	2600      	movs	r6, #0
 8009476:	42a6      	cmp	r6, r4
 8009478:	d105      	bne.n	8009486 <__libc_init_array+0x2e>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009480:	4798      	blx	r3
 8009482:	3601      	adds	r6, #1
 8009484:	e7ee      	b.n	8009464 <__libc_init_array+0xc>
 8009486:	f855 3b04 	ldr.w	r3, [r5], #4
 800948a:	4798      	blx	r3
 800948c:	3601      	adds	r6, #1
 800948e:	e7f2      	b.n	8009476 <__libc_init_array+0x1e>
 8009490:	0800bbf4 	.word	0x0800bbf4
 8009494:	0800bbf4 	.word	0x0800bbf4
 8009498:	0800bbf4 	.word	0x0800bbf4
 800949c:	0800bbf8 	.word	0x0800bbf8

080094a0 <__retarget_lock_init_recursive>:
 80094a0:	4770      	bx	lr

080094a2 <__retarget_lock_acquire_recursive>:
 80094a2:	4770      	bx	lr

080094a4 <__retarget_lock_release_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <memcpy>:
 80094a6:	440a      	add	r2, r1
 80094a8:	4291      	cmp	r1, r2
 80094aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ae:	d100      	bne.n	80094b2 <memcpy+0xc>
 80094b0:	4770      	bx	lr
 80094b2:	b510      	push	{r4, lr}
 80094b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094bc:	4291      	cmp	r1, r2
 80094be:	d1f9      	bne.n	80094b4 <memcpy+0xe>
 80094c0:	bd10      	pop	{r4, pc}
	...

080094c4 <__assert_func>:
 80094c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094c6:	4614      	mov	r4, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <__assert_func+0x2c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4605      	mov	r5, r0
 80094d0:	68d8      	ldr	r0, [r3, #12]
 80094d2:	b954      	cbnz	r4, 80094ea <__assert_func+0x26>
 80094d4:	4b07      	ldr	r3, [pc, #28]	@ (80094f4 <__assert_func+0x30>)
 80094d6:	461c      	mov	r4, r3
 80094d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094dc:	9100      	str	r1, [sp, #0]
 80094de:	462b      	mov	r3, r5
 80094e0:	4905      	ldr	r1, [pc, #20]	@ (80094f8 <__assert_func+0x34>)
 80094e2:	f001 f8fb 	bl	800a6dc <fiprintf>
 80094e6:	f001 fa2d 	bl	800a944 <abort>
 80094ea:	4b04      	ldr	r3, [pc, #16]	@ (80094fc <__assert_func+0x38>)
 80094ec:	e7f4      	b.n	80094d8 <__assert_func+0x14>
 80094ee:	bf00      	nop
 80094f0:	20000038 	.word	0x20000038
 80094f4:	0800ba9c 	.word	0x0800ba9c
 80094f8:	0800ba6e 	.word	0x0800ba6e
 80094fc:	0800ba61 	.word	0x0800ba61

08009500 <_free_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	2900      	cmp	r1, #0
 8009506:	d041      	beq.n	800958c <_free_r+0x8c>
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f0c      	subs	r4, r1, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfb8      	it	lt
 8009512:	18e4      	addlt	r4, r4, r3
 8009514:	f000 f8e8 	bl	80096e8 <__malloc_lock>
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <_free_r+0x90>)
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	b933      	cbnz	r3, 800952c <_free_r+0x2c>
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	6014      	str	r4, [r2, #0]
 8009522:	4628      	mov	r0, r5
 8009524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009528:	f000 b8e4 	b.w	80096f4 <__malloc_unlock>
 800952c:	42a3      	cmp	r3, r4
 800952e:	d908      	bls.n	8009542 <_free_r+0x42>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	1821      	adds	r1, r4, r0
 8009534:	428b      	cmp	r3, r1
 8009536:	bf01      	itttt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	1809      	addeq	r1, r1, r0
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	e7ed      	b.n	800951e <_free_r+0x1e>
 8009542:	461a      	mov	r2, r3
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	b10b      	cbz	r3, 800954c <_free_r+0x4c>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x42>
 800954c:	6811      	ldr	r1, [r2, #0]
 800954e:	1850      	adds	r0, r2, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x6c>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1850      	adds	r0, r2, r1
 800955a:	4283      	cmp	r3, r0
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	d1e0      	bne.n	8009522 <_free_r+0x22>
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	6053      	str	r3, [r2, #4]
 8009566:	4408      	add	r0, r1
 8009568:	6010      	str	r0, [r2, #0]
 800956a:	e7da      	b.n	8009522 <_free_r+0x22>
 800956c:	d902      	bls.n	8009574 <_free_r+0x74>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d6      	b.n	8009522 <_free_r+0x22>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428b      	cmp	r3, r1
 800957a:	bf04      	itt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	6054      	str	r4, [r2, #4]
 800958a:	e7ca      	b.n	8009522 <_free_r+0x22>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	20001494 	.word	0x20001494

08009594 <malloc>:
 8009594:	4b02      	ldr	r3, [pc, #8]	@ (80095a0 <malloc+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f000 b825 	b.w	80095e8 <_malloc_r>
 800959e:	bf00      	nop
 80095a0:	20000038 	.word	0x20000038

080095a4 <sbrk_aligned>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4e0f      	ldr	r6, [pc, #60]	@ (80095e4 <sbrk_aligned+0x40>)
 80095a8:	460c      	mov	r4, r1
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b911      	cbnz	r1, 80095b6 <sbrk_aligned+0x12>
 80095b0:	f001 f9b8 	bl	800a924 <_sbrk_r>
 80095b4:	6030      	str	r0, [r6, #0]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f001 f9b3 	bl	800a924 <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d103      	bne.n	80095ca <sbrk_aligned+0x26>
 80095c2:	f04f 34ff 	mov.w	r4, #4294967295
 80095c6:	4620      	mov	r0, r4
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	1cc4      	adds	r4, r0, #3
 80095cc:	f024 0403 	bic.w	r4, r4, #3
 80095d0:	42a0      	cmp	r0, r4
 80095d2:	d0f8      	beq.n	80095c6 <sbrk_aligned+0x22>
 80095d4:	1a21      	subs	r1, r4, r0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f001 f9a4 	bl	800a924 <_sbrk_r>
 80095dc:	3001      	adds	r0, #1
 80095de:	d1f2      	bne.n	80095c6 <sbrk_aligned+0x22>
 80095e0:	e7ef      	b.n	80095c2 <sbrk_aligned+0x1e>
 80095e2:	bf00      	nop
 80095e4:	20001490 	.word	0x20001490

080095e8 <_malloc_r>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	1ccd      	adds	r5, r1, #3
 80095ee:	f025 0503 	bic.w	r5, r5, #3
 80095f2:	3508      	adds	r5, #8
 80095f4:	2d0c      	cmp	r5, #12
 80095f6:	bf38      	it	cc
 80095f8:	250c      	movcc	r5, #12
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	db01      	blt.n	8009604 <_malloc_r+0x1c>
 8009600:	42a9      	cmp	r1, r5
 8009602:	d904      	bls.n	800960e <_malloc_r+0x26>
 8009604:	230c      	movs	r3, #12
 8009606:	6033      	str	r3, [r6, #0]
 8009608:	2000      	movs	r0, #0
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096e4 <_malloc_r+0xfc>
 8009612:	f000 f869 	bl	80096e8 <__malloc_lock>
 8009616:	f8d8 3000 	ldr.w	r3, [r8]
 800961a:	461c      	mov	r4, r3
 800961c:	bb44      	cbnz	r4, 8009670 <_malloc_r+0x88>
 800961e:	4629      	mov	r1, r5
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffbf 	bl	80095a4 <sbrk_aligned>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	4604      	mov	r4, r0
 800962a:	d158      	bne.n	80096de <_malloc_r+0xf6>
 800962c:	f8d8 4000 	ldr.w	r4, [r8]
 8009630:	4627      	mov	r7, r4
 8009632:	2f00      	cmp	r7, #0
 8009634:	d143      	bne.n	80096be <_malloc_r+0xd6>
 8009636:	2c00      	cmp	r4, #0
 8009638:	d04b      	beq.n	80096d2 <_malloc_r+0xea>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	4639      	mov	r1, r7
 800963e:	4630      	mov	r0, r6
 8009640:	eb04 0903 	add.w	r9, r4, r3
 8009644:	f001 f96e 	bl	800a924 <_sbrk_r>
 8009648:	4581      	cmp	r9, r0
 800964a:	d142      	bne.n	80096d2 <_malloc_r+0xea>
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	1a6d      	subs	r5, r5, r1
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ffa6 	bl	80095a4 <sbrk_aligned>
 8009658:	3001      	adds	r0, #1
 800965a:	d03a      	beq.n	80096d2 <_malloc_r+0xea>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	442b      	add	r3, r5
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	f8d8 3000 	ldr.w	r3, [r8]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	bb62      	cbnz	r2, 80096c4 <_malloc_r+0xdc>
 800966a:	f8c8 7000 	str.w	r7, [r8]
 800966e:	e00f      	b.n	8009690 <_malloc_r+0xa8>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	d420      	bmi.n	80096b8 <_malloc_r+0xd0>
 8009676:	2a0b      	cmp	r2, #11
 8009678:	d917      	bls.n	80096aa <_malloc_r+0xc2>
 800967a:	1961      	adds	r1, r4, r5
 800967c:	42a3      	cmp	r3, r4
 800967e:	6025      	str	r5, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	6059      	strne	r1, [r3, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	bf08      	it	eq
 8009688:	f8c8 1000 	streq.w	r1, [r8]
 800968c:	5162      	str	r2, [r4, r5]
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f82f 	bl	80096f4 <__malloc_unlock>
 8009696:	f104 000b 	add.w	r0, r4, #11
 800969a:	1d23      	adds	r3, r4, #4
 800969c:	f020 0007 	bic.w	r0, r0, #7
 80096a0:	1ac2      	subs	r2, r0, r3
 80096a2:	bf1c      	itt	ne
 80096a4:	1a1b      	subne	r3, r3, r0
 80096a6:	50a3      	strne	r3, [r4, r2]
 80096a8:	e7af      	b.n	800960a <_malloc_r+0x22>
 80096aa:	6862      	ldr	r2, [r4, #4]
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	bf0c      	ite	eq
 80096b0:	f8c8 2000 	streq.w	r2, [r8]
 80096b4:	605a      	strne	r2, [r3, #4]
 80096b6:	e7eb      	b.n	8009690 <_malloc_r+0xa8>
 80096b8:	4623      	mov	r3, r4
 80096ba:	6864      	ldr	r4, [r4, #4]
 80096bc:	e7ae      	b.n	800961c <_malloc_r+0x34>
 80096be:	463c      	mov	r4, r7
 80096c0:	687f      	ldr	r7, [r7, #4]
 80096c2:	e7b6      	b.n	8009632 <_malloc_r+0x4a>
 80096c4:	461a      	mov	r2, r3
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d1fb      	bne.n	80096c4 <_malloc_r+0xdc>
 80096cc:	2300      	movs	r3, #0
 80096ce:	6053      	str	r3, [r2, #4]
 80096d0:	e7de      	b.n	8009690 <_malloc_r+0xa8>
 80096d2:	230c      	movs	r3, #12
 80096d4:	6033      	str	r3, [r6, #0]
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 f80c 	bl	80096f4 <__malloc_unlock>
 80096dc:	e794      	b.n	8009608 <_malloc_r+0x20>
 80096de:	6005      	str	r5, [r0, #0]
 80096e0:	e7d6      	b.n	8009690 <_malloc_r+0xa8>
 80096e2:	bf00      	nop
 80096e4:	20001494 	.word	0x20001494

080096e8 <__malloc_lock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	@ (80096f0 <__malloc_lock+0x8>)
 80096ea:	f7ff beda 	b.w	80094a2 <__retarget_lock_acquire_recursive>
 80096ee:	bf00      	nop
 80096f0:	2000148c 	.word	0x2000148c

080096f4 <__malloc_unlock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	@ (80096fc <__malloc_unlock+0x8>)
 80096f6:	f7ff bed5 	b.w	80094a4 <__retarget_lock_release_recursive>
 80096fa:	bf00      	nop
 80096fc:	2000148c 	.word	0x2000148c

08009700 <__ssputs_r>:
 8009700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009704:	688e      	ldr	r6, [r1, #8]
 8009706:	461f      	mov	r7, r3
 8009708:	42be      	cmp	r6, r7
 800970a:	680b      	ldr	r3, [r1, #0]
 800970c:	4682      	mov	sl, r0
 800970e:	460c      	mov	r4, r1
 8009710:	4690      	mov	r8, r2
 8009712:	d82d      	bhi.n	8009770 <__ssputs_r+0x70>
 8009714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800971c:	d026      	beq.n	800976c <__ssputs_r+0x6c>
 800971e:	6965      	ldr	r5, [r4, #20]
 8009720:	6909      	ldr	r1, [r1, #16]
 8009722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009726:	eba3 0901 	sub.w	r9, r3, r1
 800972a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800972e:	1c7b      	adds	r3, r7, #1
 8009730:	444b      	add	r3, r9
 8009732:	106d      	asrs	r5, r5, #1
 8009734:	429d      	cmp	r5, r3
 8009736:	bf38      	it	cc
 8009738:	461d      	movcc	r5, r3
 800973a:	0553      	lsls	r3, r2, #21
 800973c:	d527      	bpl.n	800978e <__ssputs_r+0x8e>
 800973e:	4629      	mov	r1, r5
 8009740:	f7ff ff52 	bl	80095e8 <_malloc_r>
 8009744:	4606      	mov	r6, r0
 8009746:	b360      	cbz	r0, 80097a2 <__ssputs_r+0xa2>
 8009748:	6921      	ldr	r1, [r4, #16]
 800974a:	464a      	mov	r2, r9
 800974c:	f7ff feab 	bl	80094a6 <memcpy>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	6126      	str	r6, [r4, #16]
 800975e:	6165      	str	r5, [r4, #20]
 8009760:	444e      	add	r6, r9
 8009762:	eba5 0509 	sub.w	r5, r5, r9
 8009766:	6026      	str	r6, [r4, #0]
 8009768:	60a5      	str	r5, [r4, #8]
 800976a:	463e      	mov	r6, r7
 800976c:	42be      	cmp	r6, r7
 800976e:	d900      	bls.n	8009772 <__ssputs_r+0x72>
 8009770:	463e      	mov	r6, r7
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	4632      	mov	r2, r6
 8009776:	4641      	mov	r1, r8
 8009778:	f001 f897 	bl	800a8aa <memmove>
 800977c:	68a3      	ldr	r3, [r4, #8]
 800977e:	1b9b      	subs	r3, r3, r6
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	4433      	add	r3, r6
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	2000      	movs	r0, #0
 800978a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978e:	462a      	mov	r2, r5
 8009790:	f001 f8df 	bl	800a952 <_realloc_r>
 8009794:	4606      	mov	r6, r0
 8009796:	2800      	cmp	r0, #0
 8009798:	d1e0      	bne.n	800975c <__ssputs_r+0x5c>
 800979a:	6921      	ldr	r1, [r4, #16]
 800979c:	4650      	mov	r0, sl
 800979e:	f7ff feaf 	bl	8009500 <_free_r>
 80097a2:	230c      	movs	r3, #12
 80097a4:	f8ca 3000 	str.w	r3, [sl]
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	e7e9      	b.n	800978a <__ssputs_r+0x8a>
	...

080097b8 <_svfiprintf_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4698      	mov	r8, r3
 80097be:	898b      	ldrh	r3, [r1, #12]
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	b09d      	sub	sp, #116	@ 0x74
 80097c4:	4607      	mov	r7, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	4614      	mov	r4, r2
 80097ca:	d510      	bpl.n	80097ee <_svfiprintf_r+0x36>
 80097cc:	690b      	ldr	r3, [r1, #16]
 80097ce:	b973      	cbnz	r3, 80097ee <_svfiprintf_r+0x36>
 80097d0:	2140      	movs	r1, #64	@ 0x40
 80097d2:	f7ff ff09 	bl	80095e8 <_malloc_r>
 80097d6:	6028      	str	r0, [r5, #0]
 80097d8:	6128      	str	r0, [r5, #16]
 80097da:	b930      	cbnz	r0, 80097ea <_svfiprintf_r+0x32>
 80097dc:	230c      	movs	r3, #12
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	b01d      	add	sp, #116	@ 0x74
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	2340      	movs	r3, #64	@ 0x40
 80097ec:	616b      	str	r3, [r5, #20]
 80097ee:	2300      	movs	r3, #0
 80097f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f2:	2320      	movs	r3, #32
 80097f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097fc:	2330      	movs	r3, #48	@ 0x30
 80097fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800999c <_svfiprintf_r+0x1e4>
 8009802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009806:	f04f 0901 	mov.w	r9, #1
 800980a:	4623      	mov	r3, r4
 800980c:	469a      	mov	sl, r3
 800980e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009812:	b10a      	cbz	r2, 8009818 <_svfiprintf_r+0x60>
 8009814:	2a25      	cmp	r2, #37	@ 0x25
 8009816:	d1f9      	bne.n	800980c <_svfiprintf_r+0x54>
 8009818:	ebba 0b04 	subs.w	fp, sl, r4
 800981c:	d00b      	beq.n	8009836 <_svfiprintf_r+0x7e>
 800981e:	465b      	mov	r3, fp
 8009820:	4622      	mov	r2, r4
 8009822:	4629      	mov	r1, r5
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff ff6b 	bl	8009700 <__ssputs_r>
 800982a:	3001      	adds	r0, #1
 800982c:	f000 80a7 	beq.w	800997e <_svfiprintf_r+0x1c6>
 8009830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009832:	445a      	add	r2, fp
 8009834:	9209      	str	r2, [sp, #36]	@ 0x24
 8009836:	f89a 3000 	ldrb.w	r3, [sl]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 809f 	beq.w	800997e <_svfiprintf_r+0x1c6>
 8009840:	2300      	movs	r3, #0
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800984a:	f10a 0a01 	add.w	sl, sl, #1
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009856:	931a      	str	r3, [sp, #104]	@ 0x68
 8009858:	4654      	mov	r4, sl
 800985a:	2205      	movs	r2, #5
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	484e      	ldr	r0, [pc, #312]	@ (800999c <_svfiprintf_r+0x1e4>)
 8009862:	f7f6 fcbd 	bl	80001e0 <memchr>
 8009866:	9a04      	ldr	r2, [sp, #16]
 8009868:	b9d8      	cbnz	r0, 80098a2 <_svfiprintf_r+0xea>
 800986a:	06d0      	lsls	r0, r2, #27
 800986c:	bf44      	itt	mi
 800986e:	2320      	movmi	r3, #32
 8009870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009874:	0711      	lsls	r1, r2, #28
 8009876:	bf44      	itt	mi
 8009878:	232b      	movmi	r3, #43	@ 0x2b
 800987a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800987e:	f89a 3000 	ldrb.w	r3, [sl]
 8009882:	2b2a      	cmp	r3, #42	@ 0x2a
 8009884:	d015      	beq.n	80098b2 <_svfiprintf_r+0xfa>
 8009886:	9a07      	ldr	r2, [sp, #28]
 8009888:	4654      	mov	r4, sl
 800988a:	2000      	movs	r0, #0
 800988c:	f04f 0c0a 	mov.w	ip, #10
 8009890:	4621      	mov	r1, r4
 8009892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009896:	3b30      	subs	r3, #48	@ 0x30
 8009898:	2b09      	cmp	r3, #9
 800989a:	d94b      	bls.n	8009934 <_svfiprintf_r+0x17c>
 800989c:	b1b0      	cbz	r0, 80098cc <_svfiprintf_r+0x114>
 800989e:	9207      	str	r2, [sp, #28]
 80098a0:	e014      	b.n	80098cc <_svfiprintf_r+0x114>
 80098a2:	eba0 0308 	sub.w	r3, r0, r8
 80098a6:	fa09 f303 	lsl.w	r3, r9, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	46a2      	mov	sl, r4
 80098b0:	e7d2      	b.n	8009858 <_svfiprintf_r+0xa0>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	1d19      	adds	r1, r3, #4
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	9103      	str	r1, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bfbb      	ittet	lt
 80098be:	425b      	neglt	r3, r3
 80098c0:	f042 0202 	orrlt.w	r2, r2, #2
 80098c4:	9307      	strge	r3, [sp, #28]
 80098c6:	9307      	strlt	r3, [sp, #28]
 80098c8:	bfb8      	it	lt
 80098ca:	9204      	strlt	r2, [sp, #16]
 80098cc:	7823      	ldrb	r3, [r4, #0]
 80098ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80098d0:	d10a      	bne.n	80098e8 <_svfiprintf_r+0x130>
 80098d2:	7863      	ldrb	r3, [r4, #1]
 80098d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d6:	d132      	bne.n	800993e <_svfiprintf_r+0x186>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	1d1a      	adds	r2, r3, #4
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	9203      	str	r2, [sp, #12]
 80098e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098e4:	3402      	adds	r4, #2
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099ac <_svfiprintf_r+0x1f4>
 80098ec:	7821      	ldrb	r1, [r4, #0]
 80098ee:	2203      	movs	r2, #3
 80098f0:	4650      	mov	r0, sl
 80098f2:	f7f6 fc75 	bl	80001e0 <memchr>
 80098f6:	b138      	cbz	r0, 8009908 <_svfiprintf_r+0x150>
 80098f8:	9b04      	ldr	r3, [sp, #16]
 80098fa:	eba0 000a 	sub.w	r0, r0, sl
 80098fe:	2240      	movs	r2, #64	@ 0x40
 8009900:	4082      	lsls	r2, r0
 8009902:	4313      	orrs	r3, r2
 8009904:	3401      	adds	r4, #1
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990c:	4824      	ldr	r0, [pc, #144]	@ (80099a0 <_svfiprintf_r+0x1e8>)
 800990e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009912:	2206      	movs	r2, #6
 8009914:	f7f6 fc64 	bl	80001e0 <memchr>
 8009918:	2800      	cmp	r0, #0
 800991a:	d036      	beq.n	800998a <_svfiprintf_r+0x1d2>
 800991c:	4b21      	ldr	r3, [pc, #132]	@ (80099a4 <_svfiprintf_r+0x1ec>)
 800991e:	bb1b      	cbnz	r3, 8009968 <_svfiprintf_r+0x1b0>
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	3307      	adds	r3, #7
 8009924:	f023 0307 	bic.w	r3, r3, #7
 8009928:	3308      	adds	r3, #8
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992e:	4433      	add	r3, r6
 8009930:	9309      	str	r3, [sp, #36]	@ 0x24
 8009932:	e76a      	b.n	800980a <_svfiprintf_r+0x52>
 8009934:	fb0c 3202 	mla	r2, ip, r2, r3
 8009938:	460c      	mov	r4, r1
 800993a:	2001      	movs	r0, #1
 800993c:	e7a8      	b.n	8009890 <_svfiprintf_r+0xd8>
 800993e:	2300      	movs	r3, #0
 8009940:	3401      	adds	r4, #1
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	4619      	mov	r1, r3
 8009946:	f04f 0c0a 	mov.w	ip, #10
 800994a:	4620      	mov	r0, r4
 800994c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009950:	3a30      	subs	r2, #48	@ 0x30
 8009952:	2a09      	cmp	r2, #9
 8009954:	d903      	bls.n	800995e <_svfiprintf_r+0x1a6>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0c6      	beq.n	80098e8 <_svfiprintf_r+0x130>
 800995a:	9105      	str	r1, [sp, #20]
 800995c:	e7c4      	b.n	80098e8 <_svfiprintf_r+0x130>
 800995e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009962:	4604      	mov	r4, r0
 8009964:	2301      	movs	r3, #1
 8009966:	e7f0      	b.n	800994a <_svfiprintf_r+0x192>
 8009968:	ab03      	add	r3, sp, #12
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	462a      	mov	r2, r5
 800996e:	4b0e      	ldr	r3, [pc, #56]	@ (80099a8 <_svfiprintf_r+0x1f0>)
 8009970:	a904      	add	r1, sp, #16
 8009972:	4638      	mov	r0, r7
 8009974:	f3af 8000 	nop.w
 8009978:	1c42      	adds	r2, r0, #1
 800997a:	4606      	mov	r6, r0
 800997c:	d1d6      	bne.n	800992c <_svfiprintf_r+0x174>
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	065b      	lsls	r3, r3, #25
 8009982:	f53f af2d 	bmi.w	80097e0 <_svfiprintf_r+0x28>
 8009986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009988:	e72c      	b.n	80097e4 <_svfiprintf_r+0x2c>
 800998a:	ab03      	add	r3, sp, #12
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	462a      	mov	r2, r5
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <_svfiprintf_r+0x1f0>)
 8009992:	a904      	add	r1, sp, #16
 8009994:	4638      	mov	r0, r7
 8009996:	f000 fb87 	bl	800a0a8 <_printf_i>
 800999a:	e7ed      	b.n	8009978 <_svfiprintf_r+0x1c0>
 800999c:	0800ba9d 	.word	0x0800ba9d
 80099a0:	0800baa7 	.word	0x0800baa7
 80099a4:	00000000 	.word	0x00000000
 80099a8:	08009701 	.word	0x08009701
 80099ac:	0800baa3 	.word	0x0800baa3

080099b0 <_sungetc_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	1c4b      	adds	r3, r1, #1
 80099b4:	4614      	mov	r4, r2
 80099b6:	d103      	bne.n	80099c0 <_sungetc_r+0x10>
 80099b8:	f04f 35ff 	mov.w	r5, #4294967295
 80099bc:	4628      	mov	r0, r5
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	8993      	ldrh	r3, [r2, #12]
 80099c2:	f023 0320 	bic.w	r3, r3, #32
 80099c6:	8193      	strh	r3, [r2, #12]
 80099c8:	6853      	ldr	r3, [r2, #4]
 80099ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80099cc:	b2cd      	uxtb	r5, r1
 80099ce:	b18a      	cbz	r2, 80099f4 <_sungetc_r+0x44>
 80099d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80099d2:	429a      	cmp	r2, r3
 80099d4:	dd08      	ble.n	80099e8 <_sungetc_r+0x38>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	1e5a      	subs	r2, r3, #1
 80099da:	6022      	str	r2, [r4, #0]
 80099dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	3301      	adds	r3, #1
 80099e4:	6063      	str	r3, [r4, #4]
 80099e6:	e7e9      	b.n	80099bc <_sungetc_r+0xc>
 80099e8:	4621      	mov	r1, r4
 80099ea:	f000 ff24 	bl	800a836 <__submore>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d0f1      	beq.n	80099d6 <_sungetc_r+0x26>
 80099f2:	e7e1      	b.n	80099b8 <_sungetc_r+0x8>
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	b141      	cbz	r1, 8009a0c <_sungetc_r+0x5c>
 80099fa:	4291      	cmp	r1, r2
 80099fc:	d206      	bcs.n	8009a0c <_sungetc_r+0x5c>
 80099fe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009a02:	42a9      	cmp	r1, r5
 8009a04:	d102      	bne.n	8009a0c <_sungetc_r+0x5c>
 8009a06:	3a01      	subs	r2, #1
 8009a08:	6022      	str	r2, [r4, #0]
 8009a0a:	e7ea      	b.n	80099e2 <_sungetc_r+0x32>
 8009a0c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009a10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a16:	2303      	movs	r3, #3
 8009a18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	2301      	movs	r3, #1
 8009a24:	e7de      	b.n	80099e4 <_sungetc_r+0x34>

08009a26 <__ssrefill_r>:
 8009a26:	b510      	push	{r4, lr}
 8009a28:	460c      	mov	r4, r1
 8009a2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009a2c:	b169      	cbz	r1, 8009a4a <__ssrefill_r+0x24>
 8009a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a32:	4299      	cmp	r1, r3
 8009a34:	d001      	beq.n	8009a3a <__ssrefill_r+0x14>
 8009a36:	f7ff fd63 	bl	8009500 <_free_r>
 8009a3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	2000      	movs	r0, #0
 8009a40:	6360      	str	r0, [r4, #52]	@ 0x34
 8009a42:	b113      	cbz	r3, 8009a4a <__ssrefill_r+0x24>
 8009a44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	f043 0320 	orr.w	r3, r3, #32
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5e:	e7f3      	b.n	8009a48 <__ssrefill_r+0x22>

08009a60 <__ssvfiscanf_r>:
 8009a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a64:	460c      	mov	r4, r1
 8009a66:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009a70:	49a5      	ldr	r1, [pc, #660]	@ (8009d08 <__ssvfiscanf_r+0x2a8>)
 8009a72:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009a74:	f10d 0804 	add.w	r8, sp, #4
 8009a78:	49a4      	ldr	r1, [pc, #656]	@ (8009d0c <__ssvfiscanf_r+0x2ac>)
 8009a7a:	4fa5      	ldr	r7, [pc, #660]	@ (8009d10 <__ssvfiscanf_r+0x2b0>)
 8009a7c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009a80:	4606      	mov	r6, r0
 8009a82:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	7813      	ldrb	r3, [r2, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8158 	beq.w	8009d3e <__ssvfiscanf_r+0x2de>
 8009a8e:	5cf9      	ldrb	r1, [r7, r3]
 8009a90:	f011 0108 	ands.w	r1, r1, #8
 8009a94:	f102 0501 	add.w	r5, r2, #1
 8009a98:	d019      	beq.n	8009ace <__ssvfiscanf_r+0x6e>
 8009a9a:	6863      	ldr	r3, [r4, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd0f      	ble.n	8009ac0 <__ssvfiscanf_r+0x60>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	5cba      	ldrb	r2, [r7, r2]
 8009aa6:	0712      	lsls	r2, r2, #28
 8009aa8:	d401      	bmi.n	8009aae <__ssvfiscanf_r+0x4e>
 8009aaa:	462a      	mov	r2, r5
 8009aac:	e7eb      	b.n	8009a86 <__ssvfiscanf_r+0x26>
 8009aae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ab0:	3201      	adds	r2, #1
 8009ab2:	9245      	str	r2, [sp, #276]	@ 0x114
 8009ab4:	6862      	ldr	r2, [r4, #4]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	3a01      	subs	r2, #1
 8009aba:	6062      	str	r2, [r4, #4]
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	e7ec      	b.n	8009a9a <__ssvfiscanf_r+0x3a>
 8009ac0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4798      	blx	r3
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d0e9      	beq.n	8009aa0 <__ssvfiscanf_r+0x40>
 8009acc:	e7ed      	b.n	8009aaa <__ssvfiscanf_r+0x4a>
 8009ace:	2b25      	cmp	r3, #37	@ 0x25
 8009ad0:	d012      	beq.n	8009af8 <__ssvfiscanf_r+0x98>
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	6863      	ldr	r3, [r4, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f340 8093 	ble.w	8009c02 <__ssvfiscanf_r+0x1a2>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	7813      	ldrb	r3, [r2, #0]
 8009ae0:	454b      	cmp	r3, r9
 8009ae2:	f040 812c 	bne.w	8009d3e <__ssvfiscanf_r+0x2de>
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	6063      	str	r3, [r4, #4]
 8009aec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009aee:	3201      	adds	r2, #1
 8009af0:	3301      	adds	r3, #1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	9345      	str	r3, [sp, #276]	@ 0x114
 8009af6:	e7d8      	b.n	8009aaa <__ssvfiscanf_r+0x4a>
 8009af8:	9141      	str	r1, [sp, #260]	@ 0x104
 8009afa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009afc:	7853      	ldrb	r3, [r2, #1]
 8009afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b00:	bf02      	ittt	eq
 8009b02:	2310      	moveq	r3, #16
 8009b04:	1c95      	addeq	r5, r2, #2
 8009b06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009b08:	220a      	movs	r2, #10
 8009b0a:	46a9      	mov	r9, r5
 8009b0c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009b10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009b14:	2b09      	cmp	r3, #9
 8009b16:	d91e      	bls.n	8009b56 <__ssvfiscanf_r+0xf6>
 8009b18:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009d14 <__ssvfiscanf_r+0x2b4>
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	4650      	mov	r0, sl
 8009b20:	f7f6 fb5e 	bl	80001e0 <memchr>
 8009b24:	b138      	cbz	r0, 8009b36 <__ssvfiscanf_r+0xd6>
 8009b26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009b28:	eba0 000a 	sub.w	r0, r0, sl
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4083      	lsls	r3, r0
 8009b30:	4313      	orrs	r3, r2
 8009b32:	9341      	str	r3, [sp, #260]	@ 0x104
 8009b34:	464d      	mov	r5, r9
 8009b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b3a:	2b78      	cmp	r3, #120	@ 0x78
 8009b3c:	d806      	bhi.n	8009b4c <__ssvfiscanf_r+0xec>
 8009b3e:	2b57      	cmp	r3, #87	@ 0x57
 8009b40:	d810      	bhi.n	8009b64 <__ssvfiscanf_r+0x104>
 8009b42:	2b25      	cmp	r3, #37	@ 0x25
 8009b44:	d0c5      	beq.n	8009ad2 <__ssvfiscanf_r+0x72>
 8009b46:	d857      	bhi.n	8009bf8 <__ssvfiscanf_r+0x198>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d065      	beq.n	8009c18 <__ssvfiscanf_r+0x1b8>
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009b50:	230a      	movs	r3, #10
 8009b52:	9342      	str	r3, [sp, #264]	@ 0x108
 8009b54:	e078      	b.n	8009c48 <__ssvfiscanf_r+0x1e8>
 8009b56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009b58:	fb02 1103 	mla	r1, r2, r3, r1
 8009b5c:	3930      	subs	r1, #48	@ 0x30
 8009b5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009b60:	464d      	mov	r5, r9
 8009b62:	e7d2      	b.n	8009b0a <__ssvfiscanf_r+0xaa>
 8009b64:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009b68:	2a20      	cmp	r2, #32
 8009b6a:	d8ef      	bhi.n	8009b4c <__ssvfiscanf_r+0xec>
 8009b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8009b74 <__ssvfiscanf_r+0x114>)
 8009b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009c27 	.word	0x08009c27
 8009b78:	08009b4d 	.word	0x08009b4d
 8009b7c:	08009b4d 	.word	0x08009b4d
 8009b80:	08009c81 	.word	0x08009c81
 8009b84:	08009b4d 	.word	0x08009b4d
 8009b88:	08009b4d 	.word	0x08009b4d
 8009b8c:	08009b4d 	.word	0x08009b4d
 8009b90:	08009b4d 	.word	0x08009b4d
 8009b94:	08009b4d 	.word	0x08009b4d
 8009b98:	08009b4d 	.word	0x08009b4d
 8009b9c:	08009b4d 	.word	0x08009b4d
 8009ba0:	08009c97 	.word	0x08009c97
 8009ba4:	08009c7d 	.word	0x08009c7d
 8009ba8:	08009bff 	.word	0x08009bff
 8009bac:	08009bff 	.word	0x08009bff
 8009bb0:	08009bff 	.word	0x08009bff
 8009bb4:	08009b4d 	.word	0x08009b4d
 8009bb8:	08009c39 	.word	0x08009c39
 8009bbc:	08009b4d 	.word	0x08009b4d
 8009bc0:	08009b4d 	.word	0x08009b4d
 8009bc4:	08009b4d 	.word	0x08009b4d
 8009bc8:	08009b4d 	.word	0x08009b4d
 8009bcc:	08009ca7 	.word	0x08009ca7
 8009bd0:	08009c41 	.word	0x08009c41
 8009bd4:	08009c1f 	.word	0x08009c1f
 8009bd8:	08009b4d 	.word	0x08009b4d
 8009bdc:	08009b4d 	.word	0x08009b4d
 8009be0:	08009ca3 	.word	0x08009ca3
 8009be4:	08009b4d 	.word	0x08009b4d
 8009be8:	08009c7d 	.word	0x08009c7d
 8009bec:	08009b4d 	.word	0x08009b4d
 8009bf0:	08009b4d 	.word	0x08009b4d
 8009bf4:	08009c27 	.word	0x08009c27
 8009bf8:	3b45      	subs	r3, #69	@ 0x45
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d8a6      	bhi.n	8009b4c <__ssvfiscanf_r+0xec>
 8009bfe:	2305      	movs	r3, #5
 8009c00:	e021      	b.n	8009c46 <__ssvfiscanf_r+0x1e6>
 8009c02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009c04:	4621      	mov	r1, r4
 8009c06:	4630      	mov	r0, r6
 8009c08:	4798      	blx	r3
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f43f af66 	beq.w	8009adc <__ssvfiscanf_r+0x7c>
 8009c10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f040 808b 	bne.w	8009d2e <__ssvfiscanf_r+0x2ce>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1c:	e08b      	b.n	8009d36 <__ssvfiscanf_r+0x2d6>
 8009c1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009c20:	f042 0220 	orr.w	r2, r2, #32
 8009c24:	9241      	str	r2, [sp, #260]	@ 0x104
 8009c26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c2c:	9241      	str	r2, [sp, #260]	@ 0x104
 8009c2e:	2210      	movs	r2, #16
 8009c30:	2b6e      	cmp	r3, #110	@ 0x6e
 8009c32:	9242      	str	r2, [sp, #264]	@ 0x108
 8009c34:	d902      	bls.n	8009c3c <__ssvfiscanf_r+0x1dc>
 8009c36:	e005      	b.n	8009c44 <__ssvfiscanf_r+0x1e4>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e002      	b.n	8009c46 <__ssvfiscanf_r+0x1e6>
 8009c40:	2308      	movs	r3, #8
 8009c42:	9342      	str	r3, [sp, #264]	@ 0x108
 8009c44:	2304      	movs	r3, #4
 8009c46:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd39      	ble.n	8009cc2 <__ssvfiscanf_r+0x262>
 8009c4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009c50:	0659      	lsls	r1, r3, #25
 8009c52:	d404      	bmi.n	8009c5e <__ssvfiscanf_r+0x1fe>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	781a      	ldrb	r2, [r3, #0]
 8009c58:	5cba      	ldrb	r2, [r7, r2]
 8009c5a:	0712      	lsls	r2, r2, #28
 8009c5c:	d438      	bmi.n	8009cd0 <__ssvfiscanf_r+0x270>
 8009c5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	dc47      	bgt.n	8009cf4 <__ssvfiscanf_r+0x294>
 8009c64:	466b      	mov	r3, sp
 8009c66:	4622      	mov	r2, r4
 8009c68:	a941      	add	r1, sp, #260	@ 0x104
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 fb3c 	bl	800a2e8 <_scanf_chars>
 8009c70:	2801      	cmp	r0, #1
 8009c72:	d064      	beq.n	8009d3e <__ssvfiscanf_r+0x2de>
 8009c74:	2802      	cmp	r0, #2
 8009c76:	f47f af18 	bne.w	8009aaa <__ssvfiscanf_r+0x4a>
 8009c7a:	e7c9      	b.n	8009c10 <__ssvfiscanf_r+0x1b0>
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	e7d7      	b.n	8009c30 <__ssvfiscanf_r+0x1d0>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4640      	mov	r0, r8
 8009c84:	f000 fd9e 	bl	800a7c4 <__sccl>
 8009c88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009c90:	4605      	mov	r5, r0
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7d7      	b.n	8009c46 <__ssvfiscanf_r+0x1e6>
 8009c96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c9c:	9341      	str	r3, [sp, #260]	@ 0x104
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e7d1      	b.n	8009c46 <__ssvfiscanf_r+0x1e6>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e7cf      	b.n	8009c46 <__ssvfiscanf_r+0x1e6>
 8009ca6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009ca8:	06c3      	lsls	r3, r0, #27
 8009caa:	f53f aefe 	bmi.w	8009aaa <__ssvfiscanf_r+0x4a>
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009cb2:	1d19      	adds	r1, r3, #4
 8009cb4:	9100      	str	r1, [sp, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	07c0      	lsls	r0, r0, #31
 8009cba:	bf4c      	ite	mi
 8009cbc:	801a      	strhmi	r2, [r3, #0]
 8009cbe:	601a      	strpl	r2, [r3, #0]
 8009cc0:	e6f3      	b.n	8009aaa <__ssvfiscanf_r+0x4a>
 8009cc2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	4798      	blx	r3
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0bf      	beq.n	8009c4e <__ssvfiscanf_r+0x1ee>
 8009cce:	e79f      	b.n	8009c10 <__ssvfiscanf_r+0x1b0>
 8009cd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	9245      	str	r2, [sp, #276]	@ 0x114
 8009cd6:	6862      	ldr	r2, [r4, #4]
 8009cd8:	3a01      	subs	r2, #1
 8009cda:	2a00      	cmp	r2, #0
 8009cdc:	6062      	str	r2, [r4, #4]
 8009cde:	dd02      	ble.n	8009ce6 <__ssvfiscanf_r+0x286>
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	e7b6      	b.n	8009c54 <__ssvfiscanf_r+0x1f4>
 8009ce6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	4798      	blx	r3
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d0b0      	beq.n	8009c54 <__ssvfiscanf_r+0x1f4>
 8009cf2:	e78d      	b.n	8009c10 <__ssvfiscanf_r+0x1b0>
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	dc0f      	bgt.n	8009d18 <__ssvfiscanf_r+0x2b8>
 8009cf8:	466b      	mov	r3, sp
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	a941      	add	r1, sp, #260	@ 0x104
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f000 fb4c 	bl	800a39c <_scanf_i>
 8009d04:	e7b4      	b.n	8009c70 <__ssvfiscanf_r+0x210>
 8009d06:	bf00      	nop
 8009d08:	080099b1 	.word	0x080099b1
 8009d0c:	08009a27 	.word	0x08009a27
 8009d10:	0800baec 	.word	0x0800baec
 8009d14:	0800baa3 	.word	0x0800baa3
 8009d18:	4b0a      	ldr	r3, [pc, #40]	@ (8009d44 <__ssvfiscanf_r+0x2e4>)
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f43f aec5 	beq.w	8009aaa <__ssvfiscanf_r+0x4a>
 8009d20:	466b      	mov	r3, sp
 8009d22:	4622      	mov	r2, r4
 8009d24:	a941      	add	r1, sp, #260	@ 0x104
 8009d26:	4630      	mov	r0, r6
 8009d28:	f3af 8000 	nop.w
 8009d2c:	e7a0      	b.n	8009c70 <__ssvfiscanf_r+0x210>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	065b      	lsls	r3, r3, #25
 8009d32:	f53f af71 	bmi.w	8009c18 <__ssvfiscanf_r+0x1b8>
 8009d36:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009d40:	e7f9      	b.n	8009d36 <__ssvfiscanf_r+0x2d6>
 8009d42:	bf00      	nop
 8009d44:	00000000 	.word	0x00000000

08009d48 <__sfputc_r>:
 8009d48:	6893      	ldr	r3, [r2, #8]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	b410      	push	{r4}
 8009d50:	6093      	str	r3, [r2, #8]
 8009d52:	da08      	bge.n	8009d66 <__sfputc_r+0x1e>
 8009d54:	6994      	ldr	r4, [r2, #24]
 8009d56:	42a3      	cmp	r3, r4
 8009d58:	db01      	blt.n	8009d5e <__sfputc_r+0x16>
 8009d5a:	290a      	cmp	r1, #10
 8009d5c:	d103      	bne.n	8009d66 <__sfputc_r+0x1e>
 8009d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d62:	f7ff b9da 	b.w	800911a <__swbuf_r>
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	1c58      	adds	r0, r3, #1
 8009d6a:	6010      	str	r0, [r2, #0]
 8009d6c:	7019      	strb	r1, [r3, #0]
 8009d6e:	4608      	mov	r0, r1
 8009d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <__sfputs_r>:
 8009d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d78:	4606      	mov	r6, r0
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	18d5      	adds	r5, r2, r3
 8009d80:	42ac      	cmp	r4, r5
 8009d82:	d101      	bne.n	8009d88 <__sfputs_r+0x12>
 8009d84:	2000      	movs	r0, #0
 8009d86:	e007      	b.n	8009d98 <__sfputs_r+0x22>
 8009d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8c:	463a      	mov	r2, r7
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7ff ffda 	bl	8009d48 <__sfputc_r>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d1f3      	bne.n	8009d80 <__sfputs_r+0xa>
 8009d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d9c <_vfiprintf_r>:
 8009d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	460d      	mov	r5, r1
 8009da2:	b09d      	sub	sp, #116	@ 0x74
 8009da4:	4614      	mov	r4, r2
 8009da6:	4698      	mov	r8, r3
 8009da8:	4606      	mov	r6, r0
 8009daa:	b118      	cbz	r0, 8009db4 <_vfiprintf_r+0x18>
 8009dac:	6a03      	ldr	r3, [r0, #32]
 8009dae:	b90b      	cbnz	r3, 8009db4 <_vfiprintf_r+0x18>
 8009db0:	f7ff f87e 	bl	8008eb0 <__sinit>
 8009db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009db6:	07d9      	lsls	r1, r3, #31
 8009db8:	d405      	bmi.n	8009dc6 <_vfiprintf_r+0x2a>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	059a      	lsls	r2, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_vfiprintf_r+0x2a>
 8009dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dc2:	f7ff fb6e 	bl	80094a2 <__retarget_lock_acquire_recursive>
 8009dc6:	89ab      	ldrh	r3, [r5, #12]
 8009dc8:	071b      	lsls	r3, r3, #28
 8009dca:	d501      	bpl.n	8009dd0 <_vfiprintf_r+0x34>
 8009dcc:	692b      	ldr	r3, [r5, #16]
 8009dce:	b99b      	cbnz	r3, 8009df8 <_vfiprintf_r+0x5c>
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff f9e0 	bl	8009198 <__swsetup_r>
 8009dd8:	b170      	cbz	r0, 8009df8 <_vfiprintf_r+0x5c>
 8009dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ddc:	07dc      	lsls	r4, r3, #31
 8009dde:	d504      	bpl.n	8009dea <_vfiprintf_r+0x4e>
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295
 8009de4:	b01d      	add	sp, #116	@ 0x74
 8009de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	0598      	lsls	r0, r3, #22
 8009dee:	d4f7      	bmi.n	8009de0 <_vfiprintf_r+0x44>
 8009df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df2:	f7ff fb57 	bl	80094a4 <__retarget_lock_release_recursive>
 8009df6:	e7f3      	b.n	8009de0 <_vfiprintf_r+0x44>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfc:	2320      	movs	r3, #32
 8009dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e06:	2330      	movs	r3, #48	@ 0x30
 8009e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fb8 <_vfiprintf_r+0x21c>
 8009e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e10:	f04f 0901 	mov.w	r9, #1
 8009e14:	4623      	mov	r3, r4
 8009e16:	469a      	mov	sl, r3
 8009e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e1c:	b10a      	cbz	r2, 8009e22 <_vfiprintf_r+0x86>
 8009e1e:	2a25      	cmp	r2, #37	@ 0x25
 8009e20:	d1f9      	bne.n	8009e16 <_vfiprintf_r+0x7a>
 8009e22:	ebba 0b04 	subs.w	fp, sl, r4
 8009e26:	d00b      	beq.n	8009e40 <_vfiprintf_r+0xa4>
 8009e28:	465b      	mov	r3, fp
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7ff ffa1 	bl	8009d76 <__sfputs_r>
 8009e34:	3001      	adds	r0, #1
 8009e36:	f000 80a7 	beq.w	8009f88 <_vfiprintf_r+0x1ec>
 8009e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3c:	445a      	add	r2, fp
 8009e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e40:	f89a 3000 	ldrb.w	r3, [sl]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 809f 	beq.w	8009f88 <_vfiprintf_r+0x1ec>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e54:	f10a 0a01 	add.w	sl, sl, #1
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9307      	str	r3, [sp, #28]
 8009e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e62:	4654      	mov	r4, sl
 8009e64:	2205      	movs	r2, #5
 8009e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6a:	4853      	ldr	r0, [pc, #332]	@ (8009fb8 <_vfiprintf_r+0x21c>)
 8009e6c:	f7f6 f9b8 	bl	80001e0 <memchr>
 8009e70:	9a04      	ldr	r2, [sp, #16]
 8009e72:	b9d8      	cbnz	r0, 8009eac <_vfiprintf_r+0x110>
 8009e74:	06d1      	lsls	r1, r2, #27
 8009e76:	bf44      	itt	mi
 8009e78:	2320      	movmi	r3, #32
 8009e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e7e:	0713      	lsls	r3, r2, #28
 8009e80:	bf44      	itt	mi
 8009e82:	232b      	movmi	r3, #43	@ 0x2b
 8009e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e88:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e8e:	d015      	beq.n	8009ebc <_vfiprintf_r+0x120>
 8009e90:	9a07      	ldr	r2, [sp, #28]
 8009e92:	4654      	mov	r4, sl
 8009e94:	2000      	movs	r0, #0
 8009e96:	f04f 0c0a 	mov.w	ip, #10
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea0:	3b30      	subs	r3, #48	@ 0x30
 8009ea2:	2b09      	cmp	r3, #9
 8009ea4:	d94b      	bls.n	8009f3e <_vfiprintf_r+0x1a2>
 8009ea6:	b1b0      	cbz	r0, 8009ed6 <_vfiprintf_r+0x13a>
 8009ea8:	9207      	str	r2, [sp, #28]
 8009eaa:	e014      	b.n	8009ed6 <_vfiprintf_r+0x13a>
 8009eac:	eba0 0308 	sub.w	r3, r0, r8
 8009eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	9304      	str	r3, [sp, #16]
 8009eb8:	46a2      	mov	sl, r4
 8009eba:	e7d2      	b.n	8009e62 <_vfiprintf_r+0xc6>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	1d19      	adds	r1, r3, #4
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	9103      	str	r1, [sp, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bfbb      	ittet	lt
 8009ec8:	425b      	neglt	r3, r3
 8009eca:	f042 0202 	orrlt.w	r2, r2, #2
 8009ece:	9307      	strge	r3, [sp, #28]
 8009ed0:	9307      	strlt	r3, [sp, #28]
 8009ed2:	bfb8      	it	lt
 8009ed4:	9204      	strlt	r2, [sp, #16]
 8009ed6:	7823      	ldrb	r3, [r4, #0]
 8009ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eda:	d10a      	bne.n	8009ef2 <_vfiprintf_r+0x156>
 8009edc:	7863      	ldrb	r3, [r4, #1]
 8009ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ee0:	d132      	bne.n	8009f48 <_vfiprintf_r+0x1ac>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	1d1a      	adds	r2, r3, #4
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	9203      	str	r2, [sp, #12]
 8009eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eee:	3402      	adds	r4, #2
 8009ef0:	9305      	str	r3, [sp, #20]
 8009ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fc8 <_vfiprintf_r+0x22c>
 8009ef6:	7821      	ldrb	r1, [r4, #0]
 8009ef8:	2203      	movs	r2, #3
 8009efa:	4650      	mov	r0, sl
 8009efc:	f7f6 f970 	bl	80001e0 <memchr>
 8009f00:	b138      	cbz	r0, 8009f12 <_vfiprintf_r+0x176>
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	eba0 000a 	sub.w	r0, r0, sl
 8009f08:	2240      	movs	r2, #64	@ 0x40
 8009f0a:	4082      	lsls	r2, r0
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	3401      	adds	r4, #1
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f16:	4829      	ldr	r0, [pc, #164]	@ (8009fbc <_vfiprintf_r+0x220>)
 8009f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f1c:	2206      	movs	r2, #6
 8009f1e:	f7f6 f95f 	bl	80001e0 <memchr>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d03f      	beq.n	8009fa6 <_vfiprintf_r+0x20a>
 8009f26:	4b26      	ldr	r3, [pc, #152]	@ (8009fc0 <_vfiprintf_r+0x224>)
 8009f28:	bb1b      	cbnz	r3, 8009f72 <_vfiprintf_r+0x1d6>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	3307      	adds	r3, #7
 8009f2e:	f023 0307 	bic.w	r3, r3, #7
 8009f32:	3308      	adds	r3, #8
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f38:	443b      	add	r3, r7
 8009f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3c:	e76a      	b.n	8009e14 <_vfiprintf_r+0x78>
 8009f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f42:	460c      	mov	r4, r1
 8009f44:	2001      	movs	r0, #1
 8009f46:	e7a8      	b.n	8009e9a <_vfiprintf_r+0xfe>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	3401      	adds	r4, #1
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	f04f 0c0a 	mov.w	ip, #10
 8009f54:	4620      	mov	r0, r4
 8009f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5a:	3a30      	subs	r2, #48	@ 0x30
 8009f5c:	2a09      	cmp	r2, #9
 8009f5e:	d903      	bls.n	8009f68 <_vfiprintf_r+0x1cc>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0c6      	beq.n	8009ef2 <_vfiprintf_r+0x156>
 8009f64:	9105      	str	r1, [sp, #20]
 8009f66:	e7c4      	b.n	8009ef2 <_vfiprintf_r+0x156>
 8009f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e7f0      	b.n	8009f54 <_vfiprintf_r+0x1b8>
 8009f72:	ab03      	add	r3, sp, #12
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	462a      	mov	r2, r5
 8009f78:	4b12      	ldr	r3, [pc, #72]	@ (8009fc4 <_vfiprintf_r+0x228>)
 8009f7a:	a904      	add	r1, sp, #16
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f3af 8000 	nop.w
 8009f82:	4607      	mov	r7, r0
 8009f84:	1c78      	adds	r0, r7, #1
 8009f86:	d1d6      	bne.n	8009f36 <_vfiprintf_r+0x19a>
 8009f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x1fe>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x1fe>
 8009f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f96:	f7ff fa85 	bl	80094a4 <__retarget_lock_release_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	065b      	lsls	r3, r3, #25
 8009f9e:	f53f af1f 	bmi.w	8009de0 <_vfiprintf_r+0x44>
 8009fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fa4:	e71e      	b.n	8009de4 <_vfiprintf_r+0x48>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <_vfiprintf_r+0x228>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 f879 	bl	800a0a8 <_printf_i>
 8009fb6:	e7e4      	b.n	8009f82 <_vfiprintf_r+0x1e6>
 8009fb8:	0800ba9d 	.word	0x0800ba9d
 8009fbc:	0800baa7 	.word	0x0800baa7
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	08009d77 	.word	0x08009d77
 8009fc8:	0800baa3 	.word	0x0800baa3

08009fcc <_printf_common>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	4616      	mov	r6, r2
 8009fd2:	4698      	mov	r8, r3
 8009fd4:	688a      	ldr	r2, [r1, #8]
 8009fd6:	690b      	ldr	r3, [r1, #16]
 8009fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bfb8      	it	lt
 8009fe0:	4613      	movlt	r3, r2
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fe8:	4607      	mov	r7, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	b10a      	cbz	r2, 8009ff2 <_printf_common+0x26>
 8009fee:	3301      	adds	r3, #1
 8009ff0:	6033      	str	r3, [r6, #0]
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	0699      	lsls	r1, r3, #26
 8009ff6:	bf42      	ittt	mi
 8009ff8:	6833      	ldrmi	r3, [r6, #0]
 8009ffa:	3302      	addmi	r3, #2
 8009ffc:	6033      	strmi	r3, [r6, #0]
 8009ffe:	6825      	ldr	r5, [r4, #0]
 800a000:	f015 0506 	ands.w	r5, r5, #6
 800a004:	d106      	bne.n	800a014 <_printf_common+0x48>
 800a006:	f104 0a19 	add.w	sl, r4, #25
 800a00a:	68e3      	ldr	r3, [r4, #12]
 800a00c:	6832      	ldr	r2, [r6, #0]
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	42ab      	cmp	r3, r5
 800a012:	dc26      	bgt.n	800a062 <_printf_common+0x96>
 800a014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a018:	6822      	ldr	r2, [r4, #0]
 800a01a:	3b00      	subs	r3, #0
 800a01c:	bf18      	it	ne
 800a01e:	2301      	movne	r3, #1
 800a020:	0692      	lsls	r2, r2, #26
 800a022:	d42b      	bmi.n	800a07c <_printf_common+0xb0>
 800a024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a028:	4641      	mov	r1, r8
 800a02a:	4638      	mov	r0, r7
 800a02c:	47c8      	blx	r9
 800a02e:	3001      	adds	r0, #1
 800a030:	d01e      	beq.n	800a070 <_printf_common+0xa4>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	6922      	ldr	r2, [r4, #16]
 800a036:	f003 0306 	and.w	r3, r3, #6
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	bf02      	ittt	eq
 800a03e:	68e5      	ldreq	r5, [r4, #12]
 800a040:	6833      	ldreq	r3, [r6, #0]
 800a042:	1aed      	subeq	r5, r5, r3
 800a044:	68a3      	ldr	r3, [r4, #8]
 800a046:	bf0c      	ite	eq
 800a048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a04c:	2500      	movne	r5, #0
 800a04e:	4293      	cmp	r3, r2
 800a050:	bfc4      	itt	gt
 800a052:	1a9b      	subgt	r3, r3, r2
 800a054:	18ed      	addgt	r5, r5, r3
 800a056:	2600      	movs	r6, #0
 800a058:	341a      	adds	r4, #26
 800a05a:	42b5      	cmp	r5, r6
 800a05c:	d11a      	bne.n	800a094 <_printf_common+0xc8>
 800a05e:	2000      	movs	r0, #0
 800a060:	e008      	b.n	800a074 <_printf_common+0xa8>
 800a062:	2301      	movs	r3, #1
 800a064:	4652      	mov	r2, sl
 800a066:	4641      	mov	r1, r8
 800a068:	4638      	mov	r0, r7
 800a06a:	47c8      	blx	r9
 800a06c:	3001      	adds	r0, #1
 800a06e:	d103      	bne.n	800a078 <_printf_common+0xac>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	3501      	adds	r5, #1
 800a07a:	e7c6      	b.n	800a00a <_printf_common+0x3e>
 800a07c:	18e1      	adds	r1, r4, r3
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	2030      	movs	r0, #48	@ 0x30
 800a082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a086:	4422      	add	r2, r4
 800a088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a08c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a090:	3302      	adds	r3, #2
 800a092:	e7c7      	b.n	800a024 <_printf_common+0x58>
 800a094:	2301      	movs	r3, #1
 800a096:	4622      	mov	r2, r4
 800a098:	4641      	mov	r1, r8
 800a09a:	4638      	mov	r0, r7
 800a09c:	47c8      	blx	r9
 800a09e:	3001      	adds	r0, #1
 800a0a0:	d0e6      	beq.n	800a070 <_printf_common+0xa4>
 800a0a2:	3601      	adds	r6, #1
 800a0a4:	e7d9      	b.n	800a05a <_printf_common+0x8e>
	...

0800a0a8 <_printf_i>:
 800a0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	7e0f      	ldrb	r7, [r1, #24]
 800a0ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0b0:	2f78      	cmp	r7, #120	@ 0x78
 800a0b2:	4691      	mov	r9, r2
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	469a      	mov	sl, r3
 800a0ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0be:	d807      	bhi.n	800a0d0 <_printf_i+0x28>
 800a0c0:	2f62      	cmp	r7, #98	@ 0x62
 800a0c2:	d80a      	bhi.n	800a0da <_printf_i+0x32>
 800a0c4:	2f00      	cmp	r7, #0
 800a0c6:	f000 80d2 	beq.w	800a26e <_printf_i+0x1c6>
 800a0ca:	2f58      	cmp	r7, #88	@ 0x58
 800a0cc:	f000 80b9 	beq.w	800a242 <_printf_i+0x19a>
 800a0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0d8:	e03a      	b.n	800a150 <_printf_i+0xa8>
 800a0da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0de:	2b15      	cmp	r3, #21
 800a0e0:	d8f6      	bhi.n	800a0d0 <_printf_i+0x28>
 800a0e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a0e8 <_printf_i+0x40>)
 800a0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0e8:	0800a141 	.word	0x0800a141
 800a0ec:	0800a155 	.word	0x0800a155
 800a0f0:	0800a0d1 	.word	0x0800a0d1
 800a0f4:	0800a0d1 	.word	0x0800a0d1
 800a0f8:	0800a0d1 	.word	0x0800a0d1
 800a0fc:	0800a0d1 	.word	0x0800a0d1
 800a100:	0800a155 	.word	0x0800a155
 800a104:	0800a0d1 	.word	0x0800a0d1
 800a108:	0800a0d1 	.word	0x0800a0d1
 800a10c:	0800a0d1 	.word	0x0800a0d1
 800a110:	0800a0d1 	.word	0x0800a0d1
 800a114:	0800a255 	.word	0x0800a255
 800a118:	0800a17f 	.word	0x0800a17f
 800a11c:	0800a20f 	.word	0x0800a20f
 800a120:	0800a0d1 	.word	0x0800a0d1
 800a124:	0800a0d1 	.word	0x0800a0d1
 800a128:	0800a277 	.word	0x0800a277
 800a12c:	0800a0d1 	.word	0x0800a0d1
 800a130:	0800a17f 	.word	0x0800a17f
 800a134:	0800a0d1 	.word	0x0800a0d1
 800a138:	0800a0d1 	.word	0x0800a0d1
 800a13c:	0800a217 	.word	0x0800a217
 800a140:	6833      	ldr	r3, [r6, #0]
 800a142:	1d1a      	adds	r2, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6032      	str	r2, [r6, #0]
 800a148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a14c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a150:	2301      	movs	r3, #1
 800a152:	e09d      	b.n	800a290 <_printf_i+0x1e8>
 800a154:	6833      	ldr	r3, [r6, #0]
 800a156:	6820      	ldr	r0, [r4, #0]
 800a158:	1d19      	adds	r1, r3, #4
 800a15a:	6031      	str	r1, [r6, #0]
 800a15c:	0606      	lsls	r6, r0, #24
 800a15e:	d501      	bpl.n	800a164 <_printf_i+0xbc>
 800a160:	681d      	ldr	r5, [r3, #0]
 800a162:	e003      	b.n	800a16c <_printf_i+0xc4>
 800a164:	0645      	lsls	r5, r0, #25
 800a166:	d5fb      	bpl.n	800a160 <_printf_i+0xb8>
 800a168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a16c:	2d00      	cmp	r5, #0
 800a16e:	da03      	bge.n	800a178 <_printf_i+0xd0>
 800a170:	232d      	movs	r3, #45	@ 0x2d
 800a172:	426d      	negs	r5, r5
 800a174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a178:	4859      	ldr	r0, [pc, #356]	@ (800a2e0 <_printf_i+0x238>)
 800a17a:	230a      	movs	r3, #10
 800a17c:	e011      	b.n	800a1a2 <_printf_i+0xfa>
 800a17e:	6821      	ldr	r1, [r4, #0]
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	0608      	lsls	r0, r1, #24
 800a184:	f853 5b04 	ldr.w	r5, [r3], #4
 800a188:	d402      	bmi.n	800a190 <_printf_i+0xe8>
 800a18a:	0649      	lsls	r1, r1, #25
 800a18c:	bf48      	it	mi
 800a18e:	b2ad      	uxthmi	r5, r5
 800a190:	2f6f      	cmp	r7, #111	@ 0x6f
 800a192:	4853      	ldr	r0, [pc, #332]	@ (800a2e0 <_printf_i+0x238>)
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	bf14      	ite	ne
 800a198:	230a      	movne	r3, #10
 800a19a:	2308      	moveq	r3, #8
 800a19c:	2100      	movs	r1, #0
 800a19e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1a2:	6866      	ldr	r6, [r4, #4]
 800a1a4:	60a6      	str	r6, [r4, #8]
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	bfa2      	ittt	ge
 800a1aa:	6821      	ldrge	r1, [r4, #0]
 800a1ac:	f021 0104 	bicge.w	r1, r1, #4
 800a1b0:	6021      	strge	r1, [r4, #0]
 800a1b2:	b90d      	cbnz	r5, 800a1b8 <_printf_i+0x110>
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	d04b      	beq.n	800a250 <_printf_i+0x1a8>
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1be:	fb03 5711 	mls	r7, r3, r1, r5
 800a1c2:	5dc7      	ldrb	r7, [r0, r7]
 800a1c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1c8:	462f      	mov	r7, r5
 800a1ca:	42bb      	cmp	r3, r7
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	d9f4      	bls.n	800a1ba <_printf_i+0x112>
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d10b      	bne.n	800a1ec <_printf_i+0x144>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	07df      	lsls	r7, r3, #31
 800a1d8:	d508      	bpl.n	800a1ec <_printf_i+0x144>
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	6861      	ldr	r1, [r4, #4]
 800a1de:	4299      	cmp	r1, r3
 800a1e0:	bfde      	ittt	le
 800a1e2:	2330      	movle	r3, #48	@ 0x30
 800a1e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1ec:	1b92      	subs	r2, r2, r6
 800a1ee:	6122      	str	r2, [r4, #16]
 800a1f0:	f8cd a000 	str.w	sl, [sp]
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	aa03      	add	r2, sp, #12
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f7ff fee6 	bl	8009fcc <_printf_common>
 800a200:	3001      	adds	r0, #1
 800a202:	d14a      	bne.n	800a29a <_printf_i+0x1f2>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	b004      	add	sp, #16
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f043 0320 	orr.w	r3, r3, #32
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	4833      	ldr	r0, [pc, #204]	@ (800a2e4 <_printf_i+0x23c>)
 800a218:	2778      	movs	r7, #120	@ 0x78
 800a21a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	6831      	ldr	r1, [r6, #0]
 800a222:	061f      	lsls	r7, r3, #24
 800a224:	f851 5b04 	ldr.w	r5, [r1], #4
 800a228:	d402      	bmi.n	800a230 <_printf_i+0x188>
 800a22a:	065f      	lsls	r7, r3, #25
 800a22c:	bf48      	it	mi
 800a22e:	b2ad      	uxthmi	r5, r5
 800a230:	6031      	str	r1, [r6, #0]
 800a232:	07d9      	lsls	r1, r3, #31
 800a234:	bf44      	itt	mi
 800a236:	f043 0320 	orrmi.w	r3, r3, #32
 800a23a:	6023      	strmi	r3, [r4, #0]
 800a23c:	b11d      	cbz	r5, 800a246 <_printf_i+0x19e>
 800a23e:	2310      	movs	r3, #16
 800a240:	e7ac      	b.n	800a19c <_printf_i+0xf4>
 800a242:	4827      	ldr	r0, [pc, #156]	@ (800a2e0 <_printf_i+0x238>)
 800a244:	e7e9      	b.n	800a21a <_printf_i+0x172>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	f023 0320 	bic.w	r3, r3, #32
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	e7f6      	b.n	800a23e <_printf_i+0x196>
 800a250:	4616      	mov	r6, r2
 800a252:	e7bd      	b.n	800a1d0 <_printf_i+0x128>
 800a254:	6833      	ldr	r3, [r6, #0]
 800a256:	6825      	ldr	r5, [r4, #0]
 800a258:	6961      	ldr	r1, [r4, #20]
 800a25a:	1d18      	adds	r0, r3, #4
 800a25c:	6030      	str	r0, [r6, #0]
 800a25e:	062e      	lsls	r6, r5, #24
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	d501      	bpl.n	800a268 <_printf_i+0x1c0>
 800a264:	6019      	str	r1, [r3, #0]
 800a266:	e002      	b.n	800a26e <_printf_i+0x1c6>
 800a268:	0668      	lsls	r0, r5, #25
 800a26a:	d5fb      	bpl.n	800a264 <_printf_i+0x1bc>
 800a26c:	8019      	strh	r1, [r3, #0]
 800a26e:	2300      	movs	r3, #0
 800a270:	6123      	str	r3, [r4, #16]
 800a272:	4616      	mov	r6, r2
 800a274:	e7bc      	b.n	800a1f0 <_printf_i+0x148>
 800a276:	6833      	ldr	r3, [r6, #0]
 800a278:	1d1a      	adds	r2, r3, #4
 800a27a:	6032      	str	r2, [r6, #0]
 800a27c:	681e      	ldr	r6, [r3, #0]
 800a27e:	6862      	ldr	r2, [r4, #4]
 800a280:	2100      	movs	r1, #0
 800a282:	4630      	mov	r0, r6
 800a284:	f7f5 ffac 	bl	80001e0 <memchr>
 800a288:	b108      	cbz	r0, 800a28e <_printf_i+0x1e6>
 800a28a:	1b80      	subs	r0, r0, r6
 800a28c:	6060      	str	r0, [r4, #4]
 800a28e:	6863      	ldr	r3, [r4, #4]
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	2300      	movs	r3, #0
 800a294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a298:	e7aa      	b.n	800a1f0 <_printf_i+0x148>
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	4632      	mov	r2, r6
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	47d0      	blx	sl
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d0ad      	beq.n	800a204 <_printf_i+0x15c>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	079b      	lsls	r3, r3, #30
 800a2ac:	d413      	bmi.n	800a2d6 <_printf_i+0x22e>
 800a2ae:	68e0      	ldr	r0, [r4, #12]
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	4298      	cmp	r0, r3
 800a2b4:	bfb8      	it	lt
 800a2b6:	4618      	movlt	r0, r3
 800a2b8:	e7a6      	b.n	800a208 <_printf_i+0x160>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4632      	mov	r2, r6
 800a2be:	4649      	mov	r1, r9
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	47d0      	blx	sl
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d09d      	beq.n	800a204 <_printf_i+0x15c>
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	68e3      	ldr	r3, [r4, #12]
 800a2cc:	9903      	ldr	r1, [sp, #12]
 800a2ce:	1a5b      	subs	r3, r3, r1
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dcf2      	bgt.n	800a2ba <_printf_i+0x212>
 800a2d4:	e7eb      	b.n	800a2ae <_printf_i+0x206>
 800a2d6:	2500      	movs	r5, #0
 800a2d8:	f104 0619 	add.w	r6, r4, #25
 800a2dc:	e7f5      	b.n	800a2ca <_printf_i+0x222>
 800a2de:	bf00      	nop
 800a2e0:	0800baae 	.word	0x0800baae
 800a2e4:	0800babf 	.word	0x0800babf

0800a2e8 <_scanf_chars>:
 800a2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4615      	mov	r5, r2
 800a2ee:	688a      	ldr	r2, [r1, #8]
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	b932      	cbnz	r2, 800a304 <_scanf_chars+0x1c>
 800a2f6:	698a      	ldr	r2, [r1, #24]
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	bf14      	ite	ne
 800a2fc:	f04f 32ff 	movne.w	r2, #4294967295
 800a300:	2201      	moveq	r2, #1
 800a302:	608a      	str	r2, [r1, #8]
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a398 <_scanf_chars+0xb0>
 800a30a:	06d1      	lsls	r1, r2, #27
 800a30c:	bf5f      	itttt	pl
 800a30e:	681a      	ldrpl	r2, [r3, #0]
 800a310:	1d11      	addpl	r1, r2, #4
 800a312:	6019      	strpl	r1, [r3, #0]
 800a314:	6816      	ldrpl	r6, [r2, #0]
 800a316:	2700      	movs	r7, #0
 800a318:	69a0      	ldr	r0, [r4, #24]
 800a31a:	b188      	cbz	r0, 800a340 <_scanf_chars+0x58>
 800a31c:	2801      	cmp	r0, #1
 800a31e:	d107      	bne.n	800a330 <_scanf_chars+0x48>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	6963      	ldr	r3, [r4, #20]
 800a326:	5c9b      	ldrb	r3, [r3, r2]
 800a328:	b953      	cbnz	r3, 800a340 <_scanf_chars+0x58>
 800a32a:	2f00      	cmp	r7, #0
 800a32c:	d031      	beq.n	800a392 <_scanf_chars+0xaa>
 800a32e:	e022      	b.n	800a376 <_scanf_chars+0x8e>
 800a330:	2802      	cmp	r0, #2
 800a332:	d120      	bne.n	800a376 <_scanf_chars+0x8e>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a33c:	071b      	lsls	r3, r3, #28
 800a33e:	d41a      	bmi.n	800a376 <_scanf_chars+0x8e>
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	06da      	lsls	r2, r3, #27
 800a344:	bf5e      	ittt	pl
 800a346:	682b      	ldrpl	r3, [r5, #0]
 800a348:	781b      	ldrbpl	r3, [r3, #0]
 800a34a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a34e:	682a      	ldr	r2, [r5, #0]
 800a350:	686b      	ldr	r3, [r5, #4]
 800a352:	3201      	adds	r2, #1
 800a354:	602a      	str	r2, [r5, #0]
 800a356:	68a2      	ldr	r2, [r4, #8]
 800a358:	3b01      	subs	r3, #1
 800a35a:	3a01      	subs	r2, #1
 800a35c:	606b      	str	r3, [r5, #4]
 800a35e:	3701      	adds	r7, #1
 800a360:	60a2      	str	r2, [r4, #8]
 800a362:	b142      	cbz	r2, 800a376 <_scanf_chars+0x8e>
 800a364:	2b00      	cmp	r3, #0
 800a366:	dcd7      	bgt.n	800a318 <_scanf_chars+0x30>
 800a368:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a36c:	4629      	mov	r1, r5
 800a36e:	4640      	mov	r0, r8
 800a370:	4798      	blx	r3
 800a372:	2800      	cmp	r0, #0
 800a374:	d0d0      	beq.n	800a318 <_scanf_chars+0x30>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	f013 0310 	ands.w	r3, r3, #16
 800a37c:	d105      	bne.n	800a38a <_scanf_chars+0xa2>
 800a37e:	68e2      	ldr	r2, [r4, #12]
 800a380:	3201      	adds	r2, #1
 800a382:	60e2      	str	r2, [r4, #12]
 800a384:	69a2      	ldr	r2, [r4, #24]
 800a386:	b102      	cbz	r2, 800a38a <_scanf_chars+0xa2>
 800a388:	7033      	strb	r3, [r6, #0]
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	443b      	add	r3, r7
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	2000      	movs	r0, #0
 800a392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a396:	bf00      	nop
 800a398:	0800baec 	.word	0x0800baec

0800a39c <_scanf_i>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	4698      	mov	r8, r3
 800a3a2:	4b74      	ldr	r3, [pc, #464]	@ (800a574 <_scanf_i+0x1d8>)
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	4682      	mov	sl, r0
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	ab03      	add	r3, sp, #12
 800a3b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3b6:	4b70      	ldr	r3, [pc, #448]	@ (800a578 <_scanf_i+0x1dc>)
 800a3b8:	69a1      	ldr	r1, [r4, #24]
 800a3ba:	4a70      	ldr	r2, [pc, #448]	@ (800a57c <_scanf_i+0x1e0>)
 800a3bc:	2903      	cmp	r1, #3
 800a3be:	bf08      	it	eq
 800a3c0:	461a      	moveq	r2, r3
 800a3c2:	68a3      	ldr	r3, [r4, #8]
 800a3c4:	9201      	str	r2, [sp, #4]
 800a3c6:	1e5a      	subs	r2, r3, #1
 800a3c8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3cc:	bf88      	it	hi
 800a3ce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3d2:	4627      	mov	r7, r4
 800a3d4:	bf82      	ittt	hi
 800a3d6:	eb03 0905 	addhi.w	r9, r3, r5
 800a3da:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a3de:	60a3      	strhi	r3, [r4, #8]
 800a3e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a3e4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a3e8:	bf98      	it	ls
 800a3ea:	f04f 0900 	movls.w	r9, #0
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	463d      	mov	r5, r7
 800a3f2:	f04f 0b00 	mov.w	fp, #0
 800a3f6:	6831      	ldr	r1, [r6, #0]
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	7809      	ldrb	r1, [r1, #0]
 800a3fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a400:	2202      	movs	r2, #2
 800a402:	f7f5 feed 	bl	80001e0 <memchr>
 800a406:	b328      	cbz	r0, 800a454 <_scanf_i+0xb8>
 800a408:	f1bb 0f01 	cmp.w	fp, #1
 800a40c:	d159      	bne.n	800a4c2 <_scanf_i+0x126>
 800a40e:	6862      	ldr	r2, [r4, #4]
 800a410:	b92a      	cbnz	r2, 800a41e <_scanf_i+0x82>
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	2108      	movs	r1, #8
 800a416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a41a:	6061      	str	r1, [r4, #4]
 800a41c:	6022      	str	r2, [r4, #0]
 800a41e:	6822      	ldr	r2, [r4, #0]
 800a420:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a424:	6022      	str	r2, [r4, #0]
 800a426:	68a2      	ldr	r2, [r4, #8]
 800a428:	1e51      	subs	r1, r2, #1
 800a42a:	60a1      	str	r1, [r4, #8]
 800a42c:	b192      	cbz	r2, 800a454 <_scanf_i+0xb8>
 800a42e:	6832      	ldr	r2, [r6, #0]
 800a430:	1c51      	adds	r1, r2, #1
 800a432:	6031      	str	r1, [r6, #0]
 800a434:	7812      	ldrb	r2, [r2, #0]
 800a436:	f805 2b01 	strb.w	r2, [r5], #1
 800a43a:	6872      	ldr	r2, [r6, #4]
 800a43c:	3a01      	subs	r2, #1
 800a43e:	2a00      	cmp	r2, #0
 800a440:	6072      	str	r2, [r6, #4]
 800a442:	dc07      	bgt.n	800a454 <_scanf_i+0xb8>
 800a444:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a448:	4631      	mov	r1, r6
 800a44a:	4650      	mov	r0, sl
 800a44c:	4790      	blx	r2
 800a44e:	2800      	cmp	r0, #0
 800a450:	f040 8085 	bne.w	800a55e <_scanf_i+0x1c2>
 800a454:	f10b 0b01 	add.w	fp, fp, #1
 800a458:	f1bb 0f03 	cmp.w	fp, #3
 800a45c:	d1cb      	bne.n	800a3f6 <_scanf_i+0x5a>
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	b90b      	cbnz	r3, 800a466 <_scanf_i+0xca>
 800a462:	230a      	movs	r3, #10
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	6863      	ldr	r3, [r4, #4]
 800a468:	4945      	ldr	r1, [pc, #276]	@ (800a580 <_scanf_i+0x1e4>)
 800a46a:	6960      	ldr	r0, [r4, #20]
 800a46c:	1ac9      	subs	r1, r1, r3
 800a46e:	f000 f9a9 	bl	800a7c4 <__sccl>
 800a472:	f04f 0b00 	mov.w	fp, #0
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d03d      	beq.n	800a4fa <_scanf_i+0x15e>
 800a47e:	6831      	ldr	r1, [r6, #0]
 800a480:	6960      	ldr	r0, [r4, #20]
 800a482:	f891 c000 	ldrb.w	ip, [r1]
 800a486:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d035      	beq.n	800a4fa <_scanf_i+0x15e>
 800a48e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a492:	d124      	bne.n	800a4de <_scanf_i+0x142>
 800a494:	0510      	lsls	r0, r2, #20
 800a496:	d522      	bpl.n	800a4de <_scanf_i+0x142>
 800a498:	f10b 0b01 	add.w	fp, fp, #1
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	d003      	beq.n	800a4aa <_scanf_i+0x10e>
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4a8:	60a3      	str	r3, [r4, #8]
 800a4aa:	6873      	ldr	r3, [r6, #4]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	6073      	str	r3, [r6, #4]
 800a4b2:	dd1b      	ble.n	800a4ec <_scanf_i+0x150>
 800a4b4:	6833      	ldr	r3, [r6, #0]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	6033      	str	r3, [r6, #0]
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	60a3      	str	r3, [r4, #8]
 800a4c0:	e7d9      	b.n	800a476 <_scanf_i+0xda>
 800a4c2:	f1bb 0f02 	cmp.w	fp, #2
 800a4c6:	d1ae      	bne.n	800a426 <_scanf_i+0x8a>
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a4ce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a4d2:	d1bf      	bne.n	800a454 <_scanf_i+0xb8>
 800a4d4:	2110      	movs	r1, #16
 800a4d6:	6061      	str	r1, [r4, #4]
 800a4d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4dc:	e7a2      	b.n	800a424 <_scanf_i+0x88>
 800a4de:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	780b      	ldrb	r3, [r1, #0]
 800a4e6:	f805 3b01 	strb.w	r3, [r5], #1
 800a4ea:	e7de      	b.n	800a4aa <_scanf_i+0x10e>
 800a4ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	4798      	blx	r3
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d0df      	beq.n	800a4ba <_scanf_i+0x11e>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	05d9      	lsls	r1, r3, #23
 800a4fe:	d50d      	bpl.n	800a51c <_scanf_i+0x180>
 800a500:	42bd      	cmp	r5, r7
 800a502:	d909      	bls.n	800a518 <_scanf_i+0x17c>
 800a504:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a508:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a50c:	4632      	mov	r2, r6
 800a50e:	4650      	mov	r0, sl
 800a510:	4798      	blx	r3
 800a512:	f105 39ff 	add.w	r9, r5, #4294967295
 800a516:	464d      	mov	r5, r9
 800a518:	42bd      	cmp	r5, r7
 800a51a:	d028      	beq.n	800a56e <_scanf_i+0x1d2>
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	f012 0210 	ands.w	r2, r2, #16
 800a522:	d113      	bne.n	800a54c <_scanf_i+0x1b0>
 800a524:	702a      	strb	r2, [r5, #0]
 800a526:	6863      	ldr	r3, [r4, #4]
 800a528:	9e01      	ldr	r6, [sp, #4]
 800a52a:	4639      	mov	r1, r7
 800a52c:	4650      	mov	r0, sl
 800a52e:	47b0      	blx	r6
 800a530:	f8d8 3000 	ldr.w	r3, [r8]
 800a534:	6821      	ldr	r1, [r4, #0]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	f8c8 2000 	str.w	r2, [r8]
 800a53c:	f011 0f20 	tst.w	r1, #32
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	d00f      	beq.n	800a564 <_scanf_i+0x1c8>
 800a544:	6018      	str	r0, [r3, #0]
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	3301      	adds	r3, #1
 800a54a:	60e3      	str	r3, [r4, #12]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	1bed      	subs	r5, r5, r7
 800a550:	445d      	add	r5, fp
 800a552:	442b      	add	r3, r5
 800a554:	6123      	str	r3, [r4, #16]
 800a556:	2000      	movs	r0, #0
 800a558:	b007      	add	sp, #28
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	f04f 0b00 	mov.w	fp, #0
 800a562:	e7ca      	b.n	800a4fa <_scanf_i+0x15e>
 800a564:	07ca      	lsls	r2, r1, #31
 800a566:	bf4c      	ite	mi
 800a568:	8018      	strhmi	r0, [r3, #0]
 800a56a:	6018      	strpl	r0, [r3, #0]
 800a56c:	e7eb      	b.n	800a546 <_scanf_i+0x1aa>
 800a56e:	2001      	movs	r0, #1
 800a570:	e7f2      	b.n	800a558 <_scanf_i+0x1bc>
 800a572:	bf00      	nop
 800a574:	0800b99c 	.word	0x0800b99c
 800a578:	0800aaa5 	.word	0x0800aaa5
 800a57c:	0800ab85 	.word	0x0800ab85
 800a580:	0800bae0 	.word	0x0800bae0

0800a584 <__sflush_r>:
 800a584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	0716      	lsls	r6, r2, #28
 800a58e:	4605      	mov	r5, r0
 800a590:	460c      	mov	r4, r1
 800a592:	d454      	bmi.n	800a63e <__sflush_r+0xba>
 800a594:	684b      	ldr	r3, [r1, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dc02      	bgt.n	800a5a0 <__sflush_r+0x1c>
 800a59a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dd48      	ble.n	800a632 <__sflush_r+0xae>
 800a5a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d045      	beq.n	800a632 <__sflush_r+0xae>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5ac:	682f      	ldr	r7, [r5, #0]
 800a5ae:	6a21      	ldr	r1, [r4, #32]
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	d030      	beq.n	800a616 <__sflush_r+0x92>
 800a5b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	0759      	lsls	r1, r3, #29
 800a5ba:	d505      	bpl.n	800a5c8 <__sflush_r+0x44>
 800a5bc:	6863      	ldr	r3, [r4, #4]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5c2:	b10b      	cbz	r3, 800a5c8 <__sflush_r+0x44>
 800a5c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5cc:	6a21      	ldr	r1, [r4, #32]
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b0      	blx	r6
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	d106      	bne.n	800a5e6 <__sflush_r+0x62>
 800a5d8:	6829      	ldr	r1, [r5, #0]
 800a5da:	291d      	cmp	r1, #29
 800a5dc:	d82b      	bhi.n	800a636 <__sflush_r+0xb2>
 800a5de:	4a2a      	ldr	r2, [pc, #168]	@ (800a688 <__sflush_r+0x104>)
 800a5e0:	410a      	asrs	r2, r1
 800a5e2:	07d6      	lsls	r6, r2, #31
 800a5e4:	d427      	bmi.n	800a636 <__sflush_r+0xb2>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6062      	str	r2, [r4, #4]
 800a5ea:	04d9      	lsls	r1, r3, #19
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	d504      	bpl.n	800a5fc <__sflush_r+0x78>
 800a5f2:	1c42      	adds	r2, r0, #1
 800a5f4:	d101      	bne.n	800a5fa <__sflush_r+0x76>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	b903      	cbnz	r3, 800a5fc <__sflush_r+0x78>
 800a5fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5fe:	602f      	str	r7, [r5, #0]
 800a600:	b1b9      	cbz	r1, 800a632 <__sflush_r+0xae>
 800a602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a606:	4299      	cmp	r1, r3
 800a608:	d002      	beq.n	800a610 <__sflush_r+0x8c>
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7fe ff78 	bl	8009500 <_free_r>
 800a610:	2300      	movs	r3, #0
 800a612:	6363      	str	r3, [r4, #52]	@ 0x34
 800a614:	e00d      	b.n	800a632 <__sflush_r+0xae>
 800a616:	2301      	movs	r3, #1
 800a618:	4628      	mov	r0, r5
 800a61a:	47b0      	blx	r6
 800a61c:	4602      	mov	r2, r0
 800a61e:	1c50      	adds	r0, r2, #1
 800a620:	d1c9      	bne.n	800a5b6 <__sflush_r+0x32>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d0c6      	beq.n	800a5b6 <__sflush_r+0x32>
 800a628:	2b1d      	cmp	r3, #29
 800a62a:	d001      	beq.n	800a630 <__sflush_r+0xac>
 800a62c:	2b16      	cmp	r3, #22
 800a62e:	d11e      	bne.n	800a66e <__sflush_r+0xea>
 800a630:	602f      	str	r7, [r5, #0]
 800a632:	2000      	movs	r0, #0
 800a634:	e022      	b.n	800a67c <__sflush_r+0xf8>
 800a636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a63a:	b21b      	sxth	r3, r3
 800a63c:	e01b      	b.n	800a676 <__sflush_r+0xf2>
 800a63e:	690f      	ldr	r7, [r1, #16]
 800a640:	2f00      	cmp	r7, #0
 800a642:	d0f6      	beq.n	800a632 <__sflush_r+0xae>
 800a644:	0793      	lsls	r3, r2, #30
 800a646:	680e      	ldr	r6, [r1, #0]
 800a648:	bf08      	it	eq
 800a64a:	694b      	ldreq	r3, [r1, #20]
 800a64c:	600f      	str	r7, [r1, #0]
 800a64e:	bf18      	it	ne
 800a650:	2300      	movne	r3, #0
 800a652:	eba6 0807 	sub.w	r8, r6, r7
 800a656:	608b      	str	r3, [r1, #8]
 800a658:	f1b8 0f00 	cmp.w	r8, #0
 800a65c:	dde9      	ble.n	800a632 <__sflush_r+0xae>
 800a65e:	6a21      	ldr	r1, [r4, #32]
 800a660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a662:	4643      	mov	r3, r8
 800a664:	463a      	mov	r2, r7
 800a666:	4628      	mov	r0, r5
 800a668:	47b0      	blx	r6
 800a66a:	2800      	cmp	r0, #0
 800a66c:	dc08      	bgt.n	800a680 <__sflush_r+0xfc>
 800a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	4407      	add	r7, r0
 800a682:	eba8 0800 	sub.w	r8, r8, r0
 800a686:	e7e7      	b.n	800a658 <__sflush_r+0xd4>
 800a688:	dfbffffe 	.word	0xdfbffffe

0800a68c <_fflush_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	690b      	ldr	r3, [r1, #16]
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	b913      	cbnz	r3, 800a69c <_fflush_r+0x10>
 800a696:	2500      	movs	r5, #0
 800a698:	4628      	mov	r0, r5
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	b118      	cbz	r0, 800a6a6 <_fflush_r+0x1a>
 800a69e:	6a03      	ldr	r3, [r0, #32]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <_fflush_r+0x1a>
 800a6a2:	f7fe fc05 	bl	8008eb0 <__sinit>
 800a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f3      	beq.n	800a696 <_fflush_r+0xa>
 800a6ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6b0:	07d0      	lsls	r0, r2, #31
 800a6b2:	d404      	bmi.n	800a6be <_fflush_r+0x32>
 800a6b4:	0599      	lsls	r1, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <_fflush_r+0x32>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ba:	f7fe fef2 	bl	80094a2 <__retarget_lock_acquire_recursive>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	f7ff ff5f 	bl	800a584 <__sflush_r>
 800a6c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6c8:	07da      	lsls	r2, r3, #31
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	d4e4      	bmi.n	800a698 <_fflush_r+0xc>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	059b      	lsls	r3, r3, #22
 800a6d2:	d4e1      	bmi.n	800a698 <_fflush_r+0xc>
 800a6d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6d6:	f7fe fee5 	bl	80094a4 <__retarget_lock_release_recursive>
 800a6da:	e7dd      	b.n	800a698 <_fflush_r+0xc>

0800a6dc <fiprintf>:
 800a6dc:	b40e      	push	{r1, r2, r3}
 800a6de:	b503      	push	{r0, r1, lr}
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	ab03      	add	r3, sp, #12
 800a6e4:	4805      	ldr	r0, [pc, #20]	@ (800a6fc <fiprintf+0x20>)
 800a6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	f7ff fb55 	bl	8009d9c <_vfiprintf_r>
 800a6f2:	b002      	add	sp, #8
 800a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f8:	b003      	add	sp, #12
 800a6fa:	4770      	bx	lr
 800a6fc:	20000038 	.word	0x20000038

0800a700 <__swhatbuf_r>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	460c      	mov	r4, r1
 800a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a708:	2900      	cmp	r1, #0
 800a70a:	b096      	sub	sp, #88	@ 0x58
 800a70c:	4615      	mov	r5, r2
 800a70e:	461e      	mov	r6, r3
 800a710:	da0d      	bge.n	800a72e <__swhatbuf_r+0x2e>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a718:	f04f 0100 	mov.w	r1, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2340      	movne	r3, #64	@ 0x40
 800a720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a724:	2000      	movs	r0, #0
 800a726:	6031      	str	r1, [r6, #0]
 800a728:	602b      	str	r3, [r5, #0]
 800a72a:	b016      	add	sp, #88	@ 0x58
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
 800a72e:	466a      	mov	r2, sp
 800a730:	f000 f8d6 	bl	800a8e0 <_fstat_r>
 800a734:	2800      	cmp	r0, #0
 800a736:	dbec      	blt.n	800a712 <__swhatbuf_r+0x12>
 800a738:	9901      	ldr	r1, [sp, #4]
 800a73a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a73e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a742:	4259      	negs	r1, r3
 800a744:	4159      	adcs	r1, r3
 800a746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a74a:	e7eb      	b.n	800a724 <__swhatbuf_r+0x24>

0800a74c <__smakebuf_r>:
 800a74c:	898b      	ldrh	r3, [r1, #12]
 800a74e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a750:	079d      	lsls	r5, r3, #30
 800a752:	4606      	mov	r6, r0
 800a754:	460c      	mov	r4, r1
 800a756:	d507      	bpl.n	800a768 <__smakebuf_r+0x1c>
 800a758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	6123      	str	r3, [r4, #16]
 800a760:	2301      	movs	r3, #1
 800a762:	6163      	str	r3, [r4, #20]
 800a764:	b003      	add	sp, #12
 800a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a768:	ab01      	add	r3, sp, #4
 800a76a:	466a      	mov	r2, sp
 800a76c:	f7ff ffc8 	bl	800a700 <__swhatbuf_r>
 800a770:	9f00      	ldr	r7, [sp, #0]
 800a772:	4605      	mov	r5, r0
 800a774:	4639      	mov	r1, r7
 800a776:	4630      	mov	r0, r6
 800a778:	f7fe ff36 	bl	80095e8 <_malloc_r>
 800a77c:	b948      	cbnz	r0, 800a792 <__smakebuf_r+0x46>
 800a77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a782:	059a      	lsls	r2, r3, #22
 800a784:	d4ee      	bmi.n	800a764 <__smakebuf_r+0x18>
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	f043 0302 	orr.w	r3, r3, #2
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	e7e2      	b.n	800a758 <__smakebuf_r+0xc>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	6020      	str	r0, [r4, #0]
 800a796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	9b01      	ldr	r3, [sp, #4]
 800a79e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7a2:	b15b      	cbz	r3, 800a7bc <__smakebuf_r+0x70>
 800a7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f000 f8ab 	bl	800a904 <_isatty_r>
 800a7ae:	b128      	cbz	r0, 800a7bc <__smakebuf_r+0x70>
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	f023 0303 	bic.w	r3, r3, #3
 800a7b6:	f043 0301 	orr.w	r3, r3, #1
 800a7ba:	81a3      	strh	r3, [r4, #12]
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	431d      	orrs	r5, r3
 800a7c0:	81a5      	strh	r5, [r4, #12]
 800a7c2:	e7cf      	b.n	800a764 <__smakebuf_r+0x18>

0800a7c4 <__sccl>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	780b      	ldrb	r3, [r1, #0]
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800a7cc:	bf0b      	itete	eq
 800a7ce:	784b      	ldrbeq	r3, [r1, #1]
 800a7d0:	1c4a      	addne	r2, r1, #1
 800a7d2:	1c8a      	addeq	r2, r1, #2
 800a7d4:	2100      	movne	r1, #0
 800a7d6:	bf08      	it	eq
 800a7d8:	2101      	moveq	r1, #1
 800a7da:	3801      	subs	r0, #1
 800a7dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a7e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a7e4:	42a8      	cmp	r0, r5
 800a7e6:	d1fb      	bne.n	800a7e0 <__sccl+0x1c>
 800a7e8:	b90b      	cbnz	r3, 800a7ee <__sccl+0x2a>
 800a7ea:	1e50      	subs	r0, r2, #1
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	f081 0101 	eor.w	r1, r1, #1
 800a7f2:	54e1      	strb	r1, [r4, r3]
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7fc:	2d2d      	cmp	r5, #45	@ 0x2d
 800a7fe:	d005      	beq.n	800a80c <__sccl+0x48>
 800a800:	2d5d      	cmp	r5, #93	@ 0x5d
 800a802:	d016      	beq.n	800a832 <__sccl+0x6e>
 800a804:	2d00      	cmp	r5, #0
 800a806:	d0f1      	beq.n	800a7ec <__sccl+0x28>
 800a808:	462b      	mov	r3, r5
 800a80a:	e7f2      	b.n	800a7f2 <__sccl+0x2e>
 800a80c:	7846      	ldrb	r6, [r0, #1]
 800a80e:	2e5d      	cmp	r6, #93	@ 0x5d
 800a810:	d0fa      	beq.n	800a808 <__sccl+0x44>
 800a812:	42b3      	cmp	r3, r6
 800a814:	dcf8      	bgt.n	800a808 <__sccl+0x44>
 800a816:	3002      	adds	r0, #2
 800a818:	461a      	mov	r2, r3
 800a81a:	3201      	adds	r2, #1
 800a81c:	4296      	cmp	r6, r2
 800a81e:	54a1      	strb	r1, [r4, r2]
 800a820:	dcfb      	bgt.n	800a81a <__sccl+0x56>
 800a822:	1af2      	subs	r2, r6, r3
 800a824:	3a01      	subs	r2, #1
 800a826:	1c5d      	adds	r5, r3, #1
 800a828:	42b3      	cmp	r3, r6
 800a82a:	bfa8      	it	ge
 800a82c:	2200      	movge	r2, #0
 800a82e:	18ab      	adds	r3, r5, r2
 800a830:	e7e1      	b.n	800a7f6 <__sccl+0x32>
 800a832:	4610      	mov	r0, r2
 800a834:	e7da      	b.n	800a7ec <__sccl+0x28>

0800a836 <__submore>:
 800a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a83e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a842:	4299      	cmp	r1, r3
 800a844:	d11d      	bne.n	800a882 <__submore+0x4c>
 800a846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a84a:	f7fe fecd 	bl	80095e8 <_malloc_r>
 800a84e:	b918      	cbnz	r0, 800a858 <__submore+0x22>
 800a850:	f04f 30ff 	mov.w	r0, #4294967295
 800a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a85c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a85e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a862:	6360      	str	r0, [r4, #52]	@ 0x34
 800a864:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a868:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a86c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a870:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a874:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a878:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a87c:	6020      	str	r0, [r4, #0]
 800a87e:	2000      	movs	r0, #0
 800a880:	e7e8      	b.n	800a854 <__submore+0x1e>
 800a882:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a884:	0077      	lsls	r7, r6, #1
 800a886:	463a      	mov	r2, r7
 800a888:	f000 f863 	bl	800a952 <_realloc_r>
 800a88c:	4605      	mov	r5, r0
 800a88e:	2800      	cmp	r0, #0
 800a890:	d0de      	beq.n	800a850 <__submore+0x1a>
 800a892:	eb00 0806 	add.w	r8, r0, r6
 800a896:	4601      	mov	r1, r0
 800a898:	4632      	mov	r2, r6
 800a89a:	4640      	mov	r0, r8
 800a89c:	f7fe fe03 	bl	80094a6 <memcpy>
 800a8a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a8a4:	f8c4 8000 	str.w	r8, [r4]
 800a8a8:	e7e9      	b.n	800a87e <__submore+0x48>

0800a8aa <memmove>:
 800a8aa:	4288      	cmp	r0, r1
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	eb01 0402 	add.w	r4, r1, r2
 800a8b2:	d902      	bls.n	800a8ba <memmove+0x10>
 800a8b4:	4284      	cmp	r4, r0
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	d807      	bhi.n	800a8ca <memmove+0x20>
 800a8ba:	1e43      	subs	r3, r0, #1
 800a8bc:	42a1      	cmp	r1, r4
 800a8be:	d008      	beq.n	800a8d2 <memmove+0x28>
 800a8c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c8:	e7f8      	b.n	800a8bc <memmove+0x12>
 800a8ca:	4402      	add	r2, r0
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	428a      	cmp	r2, r1
 800a8d0:	d100      	bne.n	800a8d4 <memmove+0x2a>
 800a8d2:	bd10      	pop	{r4, pc}
 800a8d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8dc:	e7f7      	b.n	800a8ce <memmove+0x24>
	...

0800a8e0 <_fstat_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d07      	ldr	r5, [pc, #28]	@ (800a900 <_fstat_r+0x20>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	602b      	str	r3, [r5, #0]
 800a8ee:	f7f8 fc02 	bl	80030f6 <_fstat>
 800a8f2:	1c43      	adds	r3, r0, #1
 800a8f4:	d102      	bne.n	800a8fc <_fstat_r+0x1c>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	b103      	cbz	r3, 800a8fc <_fstat_r+0x1c>
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	bd38      	pop	{r3, r4, r5, pc}
 800a8fe:	bf00      	nop
 800a900:	20001488 	.word	0x20001488

0800a904 <_isatty_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d06      	ldr	r5, [pc, #24]	@ (800a920 <_isatty_r+0x1c>)
 800a908:	2300      	movs	r3, #0
 800a90a:	4604      	mov	r4, r0
 800a90c:	4608      	mov	r0, r1
 800a90e:	602b      	str	r3, [r5, #0]
 800a910:	f7f8 fc01 	bl	8003116 <_isatty>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_isatty_r+0x1a>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_isatty_r+0x1a>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20001488 	.word	0x20001488

0800a924 <_sbrk_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	@ (800a940 <_sbrk_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f8 fc0a 	bl	8003148 <_sbrk>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_sbrk_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_sbrk_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20001488 	.word	0x20001488

0800a944 <abort>:
 800a944:	b508      	push	{r3, lr}
 800a946:	2006      	movs	r0, #6
 800a948:	f000 f946 	bl	800abd8 <raise>
 800a94c:	2001      	movs	r0, #1
 800a94e:	f7f8 fb82 	bl	8003056 <_exit>

0800a952 <_realloc_r>:
 800a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	4680      	mov	r8, r0
 800a958:	4615      	mov	r5, r2
 800a95a:	460c      	mov	r4, r1
 800a95c:	b921      	cbnz	r1, 800a968 <_realloc_r+0x16>
 800a95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	4611      	mov	r1, r2
 800a964:	f7fe be40 	b.w	80095e8 <_malloc_r>
 800a968:	b92a      	cbnz	r2, 800a976 <_realloc_r+0x24>
 800a96a:	f7fe fdc9 	bl	8009500 <_free_r>
 800a96e:	2400      	movs	r4, #0
 800a970:	4620      	mov	r0, r4
 800a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a976:	f000 f94b 	bl	800ac10 <_malloc_usable_size_r>
 800a97a:	4285      	cmp	r5, r0
 800a97c:	4606      	mov	r6, r0
 800a97e:	d802      	bhi.n	800a986 <_realloc_r+0x34>
 800a980:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a984:	d8f4      	bhi.n	800a970 <_realloc_r+0x1e>
 800a986:	4629      	mov	r1, r5
 800a988:	4640      	mov	r0, r8
 800a98a:	f7fe fe2d 	bl	80095e8 <_malloc_r>
 800a98e:	4607      	mov	r7, r0
 800a990:	2800      	cmp	r0, #0
 800a992:	d0ec      	beq.n	800a96e <_realloc_r+0x1c>
 800a994:	42b5      	cmp	r5, r6
 800a996:	462a      	mov	r2, r5
 800a998:	4621      	mov	r1, r4
 800a99a:	bf28      	it	cs
 800a99c:	4632      	movcs	r2, r6
 800a99e:	f7fe fd82 	bl	80094a6 <memcpy>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	f7fe fdab 	bl	8009500 <_free_r>
 800a9aa:	463c      	mov	r4, r7
 800a9ac:	e7e0      	b.n	800a970 <_realloc_r+0x1e>
	...

0800a9b0 <_strtol_l.constprop.0>:
 800a9b0:	2b24      	cmp	r3, #36	@ 0x24
 800a9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b6:	4686      	mov	lr, r0
 800a9b8:	4690      	mov	r8, r2
 800a9ba:	d801      	bhi.n	800a9c0 <_strtol_l.constprop.0+0x10>
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d106      	bne.n	800a9ce <_strtol_l.constprop.0+0x1e>
 800a9c0:	f7fe fd44 	bl	800944c <__errno>
 800a9c4:	2316      	movs	r3, #22
 800a9c6:	6003      	str	r3, [r0, #0]
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	4834      	ldr	r0, [pc, #208]	@ (800aaa0 <_strtol_l.constprop.0+0xf0>)
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d8:	5d06      	ldrb	r6, [r0, r4]
 800a9da:	f016 0608 	ands.w	r6, r6, #8
 800a9de:	d1f8      	bne.n	800a9d2 <_strtol_l.constprop.0+0x22>
 800a9e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9e2:	d12d      	bne.n	800aa40 <_strtol_l.constprop.0+0x90>
 800a9e4:	782c      	ldrb	r4, [r5, #0]
 800a9e6:	2601      	movs	r6, #1
 800a9e8:	1c95      	adds	r5, r2, #2
 800a9ea:	f033 0210 	bics.w	r2, r3, #16
 800a9ee:	d109      	bne.n	800aa04 <_strtol_l.constprop.0+0x54>
 800a9f0:	2c30      	cmp	r4, #48	@ 0x30
 800a9f2:	d12a      	bne.n	800aa4a <_strtol_l.constprop.0+0x9a>
 800a9f4:	782a      	ldrb	r2, [r5, #0]
 800a9f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9fa:	2a58      	cmp	r2, #88	@ 0x58
 800a9fc:	d125      	bne.n	800aa4a <_strtol_l.constprop.0+0x9a>
 800a9fe:	786c      	ldrb	r4, [r5, #1]
 800aa00:	2310      	movs	r3, #16
 800aa02:	3502      	adds	r5, #2
 800aa04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa08:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	fbbc f9f3 	udiv	r9, ip, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa1c:	2f09      	cmp	r7, #9
 800aa1e:	d81b      	bhi.n	800aa58 <_strtol_l.constprop.0+0xa8>
 800aa20:	463c      	mov	r4, r7
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	dd27      	ble.n	800aa76 <_strtol_l.constprop.0+0xc6>
 800aa26:	1c57      	adds	r7, r2, #1
 800aa28:	d007      	beq.n	800aa3a <_strtol_l.constprop.0+0x8a>
 800aa2a:	4581      	cmp	r9, r0
 800aa2c:	d320      	bcc.n	800aa70 <_strtol_l.constprop.0+0xc0>
 800aa2e:	d101      	bne.n	800aa34 <_strtol_l.constprop.0+0x84>
 800aa30:	45a2      	cmp	sl, r4
 800aa32:	db1d      	blt.n	800aa70 <_strtol_l.constprop.0+0xc0>
 800aa34:	fb00 4003 	mla	r0, r0, r3, r4
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3e:	e7eb      	b.n	800aa18 <_strtol_l.constprop.0+0x68>
 800aa40:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa42:	bf04      	itt	eq
 800aa44:	782c      	ldrbeq	r4, [r5, #0]
 800aa46:	1c95      	addeq	r5, r2, #2
 800aa48:	e7cf      	b.n	800a9ea <_strtol_l.constprop.0+0x3a>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1da      	bne.n	800aa04 <_strtol_l.constprop.0+0x54>
 800aa4e:	2c30      	cmp	r4, #48	@ 0x30
 800aa50:	bf0c      	ite	eq
 800aa52:	2308      	moveq	r3, #8
 800aa54:	230a      	movne	r3, #10
 800aa56:	e7d5      	b.n	800aa04 <_strtol_l.constprop.0+0x54>
 800aa58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa5c:	2f19      	cmp	r7, #25
 800aa5e:	d801      	bhi.n	800aa64 <_strtol_l.constprop.0+0xb4>
 800aa60:	3c37      	subs	r4, #55	@ 0x37
 800aa62:	e7de      	b.n	800aa22 <_strtol_l.constprop.0+0x72>
 800aa64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa68:	2f19      	cmp	r7, #25
 800aa6a:	d804      	bhi.n	800aa76 <_strtol_l.constprop.0+0xc6>
 800aa6c:	3c57      	subs	r4, #87	@ 0x57
 800aa6e:	e7d8      	b.n	800aa22 <_strtol_l.constprop.0+0x72>
 800aa70:	f04f 32ff 	mov.w	r2, #4294967295
 800aa74:	e7e1      	b.n	800aa3a <_strtol_l.constprop.0+0x8a>
 800aa76:	1c53      	adds	r3, r2, #1
 800aa78:	d108      	bne.n	800aa8c <_strtol_l.constprop.0+0xdc>
 800aa7a:	2322      	movs	r3, #34	@ 0x22
 800aa7c:	f8ce 3000 	str.w	r3, [lr]
 800aa80:	4660      	mov	r0, ip
 800aa82:	f1b8 0f00 	cmp.w	r8, #0
 800aa86:	d0a0      	beq.n	800a9ca <_strtol_l.constprop.0+0x1a>
 800aa88:	1e69      	subs	r1, r5, #1
 800aa8a:	e006      	b.n	800aa9a <_strtol_l.constprop.0+0xea>
 800aa8c:	b106      	cbz	r6, 800aa90 <_strtol_l.constprop.0+0xe0>
 800aa8e:	4240      	negs	r0, r0
 800aa90:	f1b8 0f00 	cmp.w	r8, #0
 800aa94:	d099      	beq.n	800a9ca <_strtol_l.constprop.0+0x1a>
 800aa96:	2a00      	cmp	r2, #0
 800aa98:	d1f6      	bne.n	800aa88 <_strtol_l.constprop.0+0xd8>
 800aa9a:	f8c8 1000 	str.w	r1, [r8]
 800aa9e:	e794      	b.n	800a9ca <_strtol_l.constprop.0+0x1a>
 800aaa0:	0800baec 	.word	0x0800baec

0800aaa4 <_strtol_r>:
 800aaa4:	f7ff bf84 	b.w	800a9b0 <_strtol_l.constprop.0>

0800aaa8 <_strtoul_l.constprop.0>:
 800aaa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaac:	4e34      	ldr	r6, [pc, #208]	@ (800ab80 <_strtoul_l.constprop.0+0xd8>)
 800aaae:	4686      	mov	lr, r0
 800aab0:	460d      	mov	r5, r1
 800aab2:	4628      	mov	r0, r5
 800aab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aab8:	5d37      	ldrb	r7, [r6, r4]
 800aaba:	f017 0708 	ands.w	r7, r7, #8
 800aabe:	d1f8      	bne.n	800aab2 <_strtoul_l.constprop.0+0xa>
 800aac0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aac2:	d12f      	bne.n	800ab24 <_strtoul_l.constprop.0+0x7c>
 800aac4:	782c      	ldrb	r4, [r5, #0]
 800aac6:	2701      	movs	r7, #1
 800aac8:	1c85      	adds	r5, r0, #2
 800aaca:	f033 0010 	bics.w	r0, r3, #16
 800aace:	d109      	bne.n	800aae4 <_strtoul_l.constprop.0+0x3c>
 800aad0:	2c30      	cmp	r4, #48	@ 0x30
 800aad2:	d12c      	bne.n	800ab2e <_strtoul_l.constprop.0+0x86>
 800aad4:	7828      	ldrb	r0, [r5, #0]
 800aad6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800aada:	2858      	cmp	r0, #88	@ 0x58
 800aadc:	d127      	bne.n	800ab2e <_strtoul_l.constprop.0+0x86>
 800aade:	786c      	ldrb	r4, [r5, #1]
 800aae0:	2310      	movs	r3, #16
 800aae2:	3502      	adds	r5, #2
 800aae4:	f04f 38ff 	mov.w	r8, #4294967295
 800aae8:	2600      	movs	r6, #0
 800aaea:	fbb8 f8f3 	udiv	r8, r8, r3
 800aaee:	fb03 f908 	mul.w	r9, r3, r8
 800aaf2:	ea6f 0909 	mvn.w	r9, r9
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800aafc:	f1bc 0f09 	cmp.w	ip, #9
 800ab00:	d81c      	bhi.n	800ab3c <_strtoul_l.constprop.0+0x94>
 800ab02:	4664      	mov	r4, ip
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	dd2a      	ble.n	800ab5e <_strtoul_l.constprop.0+0xb6>
 800ab08:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ab0c:	d007      	beq.n	800ab1e <_strtoul_l.constprop.0+0x76>
 800ab0e:	4580      	cmp	r8, r0
 800ab10:	d322      	bcc.n	800ab58 <_strtoul_l.constprop.0+0xb0>
 800ab12:	d101      	bne.n	800ab18 <_strtoul_l.constprop.0+0x70>
 800ab14:	45a1      	cmp	r9, r4
 800ab16:	db1f      	blt.n	800ab58 <_strtoul_l.constprop.0+0xb0>
 800ab18:	fb00 4003 	mla	r0, r0, r3, r4
 800ab1c:	2601      	movs	r6, #1
 800ab1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab22:	e7e9      	b.n	800aaf8 <_strtoul_l.constprop.0+0x50>
 800ab24:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab26:	bf04      	itt	eq
 800ab28:	782c      	ldrbeq	r4, [r5, #0]
 800ab2a:	1c85      	addeq	r5, r0, #2
 800ab2c:	e7cd      	b.n	800aaca <_strtoul_l.constprop.0+0x22>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1d8      	bne.n	800aae4 <_strtoul_l.constprop.0+0x3c>
 800ab32:	2c30      	cmp	r4, #48	@ 0x30
 800ab34:	bf0c      	ite	eq
 800ab36:	2308      	moveq	r3, #8
 800ab38:	230a      	movne	r3, #10
 800ab3a:	e7d3      	b.n	800aae4 <_strtoul_l.constprop.0+0x3c>
 800ab3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ab40:	f1bc 0f19 	cmp.w	ip, #25
 800ab44:	d801      	bhi.n	800ab4a <_strtoul_l.constprop.0+0xa2>
 800ab46:	3c37      	subs	r4, #55	@ 0x37
 800ab48:	e7dc      	b.n	800ab04 <_strtoul_l.constprop.0+0x5c>
 800ab4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ab4e:	f1bc 0f19 	cmp.w	ip, #25
 800ab52:	d804      	bhi.n	800ab5e <_strtoul_l.constprop.0+0xb6>
 800ab54:	3c57      	subs	r4, #87	@ 0x57
 800ab56:	e7d5      	b.n	800ab04 <_strtoul_l.constprop.0+0x5c>
 800ab58:	f04f 36ff 	mov.w	r6, #4294967295
 800ab5c:	e7df      	b.n	800ab1e <_strtoul_l.constprop.0+0x76>
 800ab5e:	1c73      	adds	r3, r6, #1
 800ab60:	d106      	bne.n	800ab70 <_strtoul_l.constprop.0+0xc8>
 800ab62:	2322      	movs	r3, #34	@ 0x22
 800ab64:	f8ce 3000 	str.w	r3, [lr]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	b932      	cbnz	r2, 800ab7a <_strtoul_l.constprop.0+0xd2>
 800ab6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab70:	b107      	cbz	r7, 800ab74 <_strtoul_l.constprop.0+0xcc>
 800ab72:	4240      	negs	r0, r0
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	d0f9      	beq.n	800ab6c <_strtoul_l.constprop.0+0xc4>
 800ab78:	b106      	cbz	r6, 800ab7c <_strtoul_l.constprop.0+0xd4>
 800ab7a:	1e69      	subs	r1, r5, #1
 800ab7c:	6011      	str	r1, [r2, #0]
 800ab7e:	e7f5      	b.n	800ab6c <_strtoul_l.constprop.0+0xc4>
 800ab80:	0800baec 	.word	0x0800baec

0800ab84 <_strtoul_r>:
 800ab84:	f7ff bf90 	b.w	800aaa8 <_strtoul_l.constprop.0>

0800ab88 <_raise_r>:
 800ab88:	291f      	cmp	r1, #31
 800ab8a:	b538      	push	{r3, r4, r5, lr}
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	d904      	bls.n	800ab9c <_raise_r+0x14>
 800ab92:	2316      	movs	r3, #22
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab9e:	b112      	cbz	r2, 800aba6 <_raise_r+0x1e>
 800aba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba4:	b94b      	cbnz	r3, 800abba <_raise_r+0x32>
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f830 	bl	800ac0c <_getpid_r>
 800abac:	4622      	mov	r2, r4
 800abae:	4601      	mov	r1, r0
 800abb0:	4628      	mov	r0, r5
 800abb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb6:	f000 b817 	b.w	800abe8 <_kill_r>
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d00a      	beq.n	800abd4 <_raise_r+0x4c>
 800abbe:	1c59      	adds	r1, r3, #1
 800abc0:	d103      	bne.n	800abca <_raise_r+0x42>
 800abc2:	2316      	movs	r3, #22
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7e7      	b.n	800ab9a <_raise_r+0x12>
 800abca:	2100      	movs	r1, #0
 800abcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abd0:	4620      	mov	r0, r4
 800abd2:	4798      	blx	r3
 800abd4:	2000      	movs	r0, #0
 800abd6:	e7e0      	b.n	800ab9a <_raise_r+0x12>

0800abd8 <raise>:
 800abd8:	4b02      	ldr	r3, [pc, #8]	@ (800abe4 <raise+0xc>)
 800abda:	4601      	mov	r1, r0
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f7ff bfd3 	b.w	800ab88 <_raise_r>
 800abe2:	bf00      	nop
 800abe4:	20000038 	.word	0x20000038

0800abe8 <_kill_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	@ (800ac08 <_kill_r+0x20>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	4611      	mov	r1, r2
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	f7f8 fa1e 	bl	8003036 <_kill>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	d102      	bne.n	800ac04 <_kill_r+0x1c>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	b103      	cbz	r3, 800ac04 <_kill_r+0x1c>
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	bf00      	nop
 800ac08:	20001488 	.word	0x20001488

0800ac0c <_getpid_r>:
 800ac0c:	f7f8 ba0b 	b.w	8003026 <_getpid>

0800ac10 <_malloc_usable_size_r>:
 800ac10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac14:	1f18      	subs	r0, r3, #4
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bfbc      	itt	lt
 800ac1a:	580b      	ldrlt	r3, [r1, r0]
 800ac1c:	18c0      	addlt	r0, r0, r3
 800ac1e:	4770      	bx	lr

0800ac20 <_init>:
 800ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac22:	bf00      	nop
 800ac24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac26:	bc08      	pop	{r3}
 800ac28:	469e      	mov	lr, r3
 800ac2a:	4770      	bx	lr

0800ac2c <_fini>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr
